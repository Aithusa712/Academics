<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
        "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US"><head>
<meta name="viewport" content="width=device-width">
<title>GREP 8.0 Manual</title>
<meta name="description" content="GREP program finds strings or regular expressions in any files (shareware) (Oak Road Systems)">
<meta name="keywords" content="GREP, find, regular expression, regular expressions, regexp, DOS program, DOS utility, DOS programs, DOS utilities, command-line utilities, shareware, Oak Road Systems">
<link rel="stylesheet" type="text/css" href="ors.css">
<style type="text/css">
div#TOC0 ul li { margin-top:0; }
 div#TOCinFull ul.TOC ul ul li:before { content: inherit; }
 div#TOCinFull ul.TOC ul ul ul li:before { content:'\00B7\00A0'; }
</style>
</head><body>

<div class="maintitle">
<h1>GREP&nbsp;&#8212; Find Regular Expressions in&nbsp;Files
<br>Manual for Release&nbsp;8.0</h1>
<p><strong class="key">Program Dated 4 May 2005&nbsp;&nbsp;/&nbsp; Document Dated 7&nbsp;Feb&nbsp;2016</strong></p>
<p> Copyright &copy; 1986&#8211;2016 by Stan&nbsp;Brown, <a href="http://oakroadsystems.com/">Oak&nbsp;Road&nbsp;Systems</a></p>
</div>




<div class="Summary" id="TOC0"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R1-CmdLine">1. Command Line</a></li>
<li><a href="#R2-Inputs">2. Input Files</a></li>
<li><a href="#R3-Outputs">3. Outputs</a></li>
<li><a href="#R4-Regex">4. Regular Expressions (Regexes)</a></li>
<li><a href="#R5-Options">5. Options</a></li>
<li><a href="#R6-Messages">6. Messages</a></li>
<li><a href="#R7-QandA">7. Troubleshooting and How-to</a></li>
<li><a href="#R8-Future">8. Wish List</a></li>
<li><a href="#FULLTOC">Full Table of Contents</a></li>
<li class="nonprint"><a href="#WhatsNew">What&#8217;s New in This Manual</a></li>
</ul>
</div>

<div class="Summary" id="SeeAlso1"><span class="SummaryH"><strong class="key">See&nbsp;also:</strong></span>

<ul class="purelist">
<li><a href="grep101.htm"><cite>GREP Quick Start</cite></a> (&#8220;GREP&nbsp;101&#8221;)&nbsp;&#8212;
    read this first if you're new to GREP</li>
<li><a href="pcre.htm"><cite>PCRE Specification</cite> for extended regexes</a></li>
<li><a href="grephist.htm"><cite>GREP Revision History</cite></a></li>
<li>GREPQRC.DOC, <cite>Quick Reference Card</cite> in A4 or 8&frac12;&#215;11
    format</li>
<li>TOUR.BAT, an interactive demo of GREP, especially the newer features</li>
</ul></div>

<div class="Summary" id="Compatibility"><span class="SummaryH"><strong class="key">Compati-<br>bility:</strong></span>

Use GREP32 with all 32-bit and 64-bit Windows versions, from
Windows 95 through Windows 10. For legacy systems running DOS 2.0
through 7.0, use GREP16.
It lacks support for long filenames,
<a href="#R5x-OptE">extended regexes</a>,
and <a href="#R5x-OptM">character mapping</a>,
but is the same as GREP32 in all other respects.
<p class="nonbrk">GREP handles text in 256-character sets like the ISO-8859
group, ANSI, and Windows-1252. It is not compatible with multibyte
Unicode characters.</p>
</div>


<h2 id="R1-CmdLine">1. Command Line</h2>
<p class="brk"><em>TIP</em>: Rename your preferred version, GREP32.EXE or
GREP16.EXE, to GREP.EXE.</p>

<p class="brk">The GREP command form is
<pre>
        grep <var>options</var> <var>regex</var> <var>inputs</var> <var>outputs</var></pre>
<p class="brk">All arguments are optional, except that you must specify
either a regex or an <a href="#R5x-OptF"><kbd>/F</kbd> option</a>.</p>

<p class="nonbrk">You&#8217;ll find chapters on
<a href="#R5-Options">options</a>,
<a href="#R2-Inputs">inputs</a> (including redirection),
<a href="#R4-Regex">regular expressions (regexes)</a>, and
<a href="#R3-Outputs">outputs</a> (including redirection)
in this <cite>GREP Manual</cite>, as well as a list of
<a href="#R6-Messages">messages</a>.</p>

<p class="nonbrk">As with any command,
you can redirect or pipe <a href="#R2-Inputs">inputs</a>
or <a href="#R3.1.2-OutputRedirect">output</a>. GREP can return a useful value in
<a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>, as explained below.</p>

<p class="brk">Command-line <a href="#R5-Options">options</a> can actually appear
anywhere, not only before the <a href="#R4-Regex">regex</a>. The first
thing that isn&#8217;t an option is taken as the regex, and everything else
that isn&#8217;t an option is taken as input <a href="#filespec">filespecs</a>.
All the options are processed before any <a href="#R2-Inputs">input
files</a> are scanned&nbsp;&#8212; it doesn&#8217;t matter whether a given
option comes before, after, or among the filespecs.</p>

<p class="nonbrk"><a name="20040707a">This</a> means that if your regex begins
with a hyphen <kbd>-</kbd> or slash <kbd>/</kbd>, GREP will think
it&#8217;s an option; please see
<a href="#R4.1.4-RegexConfuse">Regex Starting with <kbd>-</kbd> or
/</a>. Quotes are also problematic; please see
<a href="#R4.1.3-RegexQuotes">Quotes in a Regex.</a></p>

<p class="brk">For a quick summary of operating instructions, type</p>
<pre>
        grep /? | more </pre>


<p class="brk"><a name="desktop">You</a> can <strong class="key">run GREP from the desktop</strong>
in Windows XP through Windows 10.
Click Start
and then Run, or by pressing the Windows and R keys together, then
typing</p>
<pre>
        cmd /k grep <var>options</var> <var>regex</var> <var>inputs</var> <var>outputs</var></pre>
<p class="brk">In Windows 95, 98, and ME, it&#8217;s the same except that you type
<kbd>command</kbd> instead of <kbd>cmd</kbd>.</p>

<p class="nonbrk">You can also put a GREP command in a Windows shortcut, using
the same form.</p>

<p class="brk">This assumes that your PATH contains the directory where
you&#8217;ve placed GREP; if it doesn&#8217;t, you&#8217;ll need to
specify the path. PATH is a standard Windows environment variable; to
set it, right-click <em>Computer</em> or <em>This PC</em> and select
<em>Properties</em>,
then <em>Advanced system settings</em>, then <em>Environment
Variables</em>, and look in the System list.</p>

<p class="nonbrk">As an alternative to setting the path, you could use DOSKEY
to define an alias that includes the path to the GREP executable.
Despite the name, DOSKEY is also included in most versions of
Windows.</p>



<h2 id="R2-Inputs">2. Input Files</h2>
<div class="Summary" id="TOC2"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R2.1-InputsNamed">2.1&nbsp; Named Input Files</a>
<ul>
<li><a href="#R2.1.1-InputsWildcards">2.1.1&nbsp; Wildcard Expansion (Globbing)</a></li>
<li><a href="#R2.1.2-InputsHidden">2.1.2&nbsp; Hidden and System Files</a></li>
<li><a href="#R2.1.3-InputsMissing">2.1.3&nbsp; Missing Files</a></li>
</ul></li>
<li><a href="#R2.2-InputStandard">2.2&nbsp; Standard Input and Redirection</a></li>
<li><a href="#R2.3-InputsSubdirs">2.3&nbsp; Subdirectory Searches</a>
<ul>
<li><a href="#R2.3.1-InputsSubdirsOrder">2.3.1&nbsp; Search Order</a></li>
</ul></li>
<li><a href="#R2.4-InputsBinary">2.4&nbsp; Binary Files and Text Files</a>
<ul>
<li><a href="#R2.4.3-InputsBinaryGuess">2.4.1&nbsp; Differences between Text and Binary Files</a>
<ul>
<li><a href="#R2.4-InputsBinaryText">Text Files</a></li>
<li><a href="#R2.4-InputsBinaryBinary">Binary Files</a></li>
<li><a href="#R2.4-InputsBinaryDecide">How Does GREP Know?</a></li>
</ul></li>
<li><a href="#R2.4.2-BinaryRead">2.4.2&nbsp; How Does GREP Read Binary and Text Files?</a></li>
<li><a href="#R2.4.3-BinaryHits">2.4.3&nbsp; How Does GREP Display Hits?</a></li>
</ul></li>
</ul>
</div>
<h3 id="R2.1-InputsNamed">2.1&nbsp; Named Input Files</h3>

<p class="brk">A <dfn id="filespec">filespec</dfn> is a file name, possibly containing wild cards or
preceded by a path or both. A filespec can also be a directory name,
which tells GREP to search all files in the directory.</p>

<p class="nonbrk">You can specify named input files or have GREP read the
<a href="#stdin">standard input</a> (possibly with redirection or piping).
<a href="#R2.2-InputStandard">Redirection and piping</a> are discussed
later; this section tells you how to specify named input files.</p>

<p class="nonbrk">List your input files on the
<a href="#R1-CmdLine">command line</a> or in a list file
referenced with the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>, or both. You
can also <em>exclude</em> files or groups of files by using the
<a href="#R5x-OptX"><kbd>/X</kbd> option</a>.
Input filespecs and <kbd>/X</kbd> exclusion filespecs use normal
command-line
conventions augmented by some features from
<a href="#R2.1.1-InputsWildcards">UNIX-style filename globbing</a>.</p>

<p class="brk">These rules apply to all filespecs, whether or not they contain
<a href="#R2.1.1-InputsWildcards">wildcards</a>:</p>

<ul>

<li><p>The case of letters is not significant.</p></li>

<li><p>Either slash <kbd>\</kbd> or <kbd>/</kbd> can be used to separate
directories in a path. For example:</p>
<pre class="secondhalf">
        grep <var>regex</var> ..\anstia.c *.h d:/dir1/dir2/orich.htm </pre>
<p class="secondhalf">Anything that starts with a forward slash is
interpreted as an option. If you want file EABC in the root directory,
either use a backslash (<kbd>\EABC</kbd>) or specify the drive
letter (<kbd>D:/EABC</kbd> or <kbd>D:\EABC</kbd>). GREP would read
plain <kbd>/EABC</kbd> as setting the E, A, B, and C
options.</p></li>

<li><p>If you want all files in a directory
you can say so using <a href="#R2.1.1-InputsWildcards">wildcards</a>
(below), or just specify the directory name.</p></li>

<li><p>Windows allows spaces in file and path names, but then
you must enclose the filespec in double quotes. This is a Windows
restriction, not a feature only of GREP. For instance,</p>
<pre class="secondhalf">
        grep <var>regex</var> c:\Program Files\My Office\* </pre>
<p class="secondhalf">contains three filespecs, namely c:\Program, Files\My, and Office\*.
That&#8217;s probably not what you meant. Double quotes preserve your
intended meaning:</p>
<pre class="secondhalf">
        grep <var>regex</var> "c:\Program Files\My Office\*" </pre>
</li>

<li><p>Windows allows hyphens <kbd>-</kbd> in file and
path names, but if a filespec begins with a hyphen, GREP reads it as
an option. To prevent this, use the standard syntax for &#8220;current
directory&#8221;. For example, to search a file named -omega.txt, type
either of</p>
<pre class="secondhalf">
        grep <var>regex</var> ./-omega.txt
        grep <var>regex</var> .\-omega.txt </pre>
</li>

<li><p>Windows allows a left square bracket <kbd>[</kbd> in file
names, but GREP reads this as part of a
<a href="#R2.1.1-InputsWildcards">wildcard</a> (below). To prevent this,
enclose it in brackets. For example, if you want to search the file
o[mega.txt, do it like this:</p>
<pre class="secondhalf">
        grep <var>regex</var> o[[]mega.txt </pre>
</li>

<li><p>GREP ignores the <kbd>NUL</kbd> pseudo-file.</p>
</li>
</ul>

<h4 id="R2.1.1-InputsWildcards">2.1.1&nbsp; Wildcard Expansion (Globbing)</h4>

<p class="brk">Beginning with release 7.0, GREP16 and GREP32 treat
wildcards in filenames identically. The rules are derived from
Windows conventions and UNIX
&#8220;globbing&#8221;. There are three
<dfn id="wildcard">wildcard characters</dfn>, namely <kbd>*&nbsp;?&nbsp;[</kbd>.
Here are the extra rules, in
addition to the rules in <a href="#R2.1-InputsNamed">the previous
section</a> for all filespecs.</p><ul>

<li><p>Only the name part of a filespec
can be wildcarded. Paths may not contain a wildcard character
(<kbd>*&nbsp;?&nbsp;[</kbd>). Therefore
<kbd>c:\invoices\*\a*.doc</kbd> is not a legal filespec. You can get
the desired effect with <kbd>c:\invoices\a*.doc</kbd> and the
<a href="#R5x-OptS"><kbd>/S</kbd> option</a>.</p></li>

<li><p><kbd>*</kbd> in a filename matches any number of
characters, including no characters at all. Any of the matched
characters may be a dot (<kbd>.</kbd>).</p>

<p class="nonbrk">There are two special cases: <kbd>*.</kbd> (star-dot) at the end of a
filename matches all character sequences
that don&#8217;t contain a dot (filenames with no extension),
and <kbd>*.*</kbd> at the end of a
filename matches any character sequence whatever (just like plain
<kbd>*</kbd>), whether it contains a dot or not. These special cases
match traditional Windows wildcard rules.</p>

<p class="nonbrk">Examples: <kbd>abc*xyz</kbd> matches files ABCXYZ, Abcdwxyz,
AbC.xyZ, ABCDEF.wxyz, and so on.
<kbd>stmt*</kbd> and <kbd>stmt*.*</kbd> match STMT itself
and any other filename starting with STMT, but <kbd>stmt*.</kbd>
matches only filenames starting with STMT that have no
extension.</p></li>

<li><p><kbd>?</kbd> in a filename matches one
character, including a dot (.). The character must be there, even
if the <kbd>?</kbd> comes at the end of the pattern.
Examples: <kbd>abc?</kbd> matches ABCD but not ABC;
<kbd>abc?ef</kbd> matches ABCDEF and ABC.EF but not ABCEF.</p></li>

<li><p><kbd>[&nbsp;]</kbd> (square brackets)
in a filename match any character between them.
Example: <kbd>*[abc]*</kbd> matches any filename
that contains a, b, or c, in upper or lower case.</p></li>

<li><p><kbd>-</kbd> (hyphen) within square brackets
indicates a character range.
The endpoints must be two capital letters, two lower-case letters,
or two non-letter characters.
Example: <kbd>[ag-jz]?</kbd> matches two-character filenames
that start with capital or lower-case A, G, H, I, J, or Z.</p>

<p class="nonbrk">If you want to include a hyphen <kbd>-</kbd> or right square
bracket <kbd>]</kbd> in a
character class, put it first.
Example: <kbd>[]abc]</kbd> matches any
of the characters ], a, b, c.</p>

<li><p><kbd>[^&#133;]</kbd> or <kbd>[!&#133;]</kbd> in a filename
matches any character that is not within the class.
Example: <kbd>[^abc]*</kbd> or <kbd>[!abc]*</kbd> matches any
filename that doesn&#8217;t start with A, B, or C in upper or lower case.
<kbd>?[^ag-jz]</kbd> or <kbd>?[!ag-jz]</kbd> matches any
two-character filename that ends with a character other than A, G, H,
I, J, or Z, in upper or lower case.</p></li>

</ul>

<p class="brk">Caution: <strong class="key">Globbing is not regexes.</strong> In a filespec,
<kbd>[0-9]*</kbd>
doesn&#8217;t mean zero or more digits; it means one digit followed by zero
or more characters (which need not be digits).</p>


<h4 id="R2.1.2-InputsHidden">2.1.2&nbsp; Hidden and System Files</h4>

<p class="brk">Normally, GREP ignores hidden and system files when
expanding <a href="#wildcard">wildcards</a>. If you want to include hidden and system files in
the search, use the <a href="#R5x-OptA"><kbd>/A</kbd> option</a>.</p>

<p class="nonbrk">If you name a specific file, without wildcards, GREP
always tries to open it and there&#8217;s no need for the <kbd>/A</kbd> option.</p>

<h4 id="R2.1.3-InputsMissing">2.1.3&nbsp; Missing Files</h4>

<p class="brk">It may happen that you mistype an input
<a href="#filespec">filespec</a> on
the command line.
At the end of execution, GREP warns you about
each input filespec that didn&#8217;t match any files. That warning is suppressed
like the rest if you specify the
<a href="#R5x-OptQ"><kbd>/Q3</kbd> option</a>.</p>

<p class="nonbrk">GREP gives you a similar warning about filespecs from a list
file (<a href="#R5x-OptAt"><kbd>/@</kbd> option</a>) that don&#8217;t match any
actual files. That warning appears right after GREP reads that
filespec from the list file.</p>

<p class="brk">Caution: If you exclude files with the <a href="#R5x-OptX"><kbd>/X</kbd> option</a>,
you may cause GREP to bypass existing files that actually match your
input filespecs. Consider this example:</p>

<pre class="secondhalf">
        grep <var>regex</var> abcde.htm /X*.htm </pre>

<p class="secondhalf">In this situation, GREP tells you that no files matched
abcde.htm. This is correct, since <kbd>/X*.htm</kbd> makes GREP
exclude every *.HTM file. GREP reminds you of this possibility when
you have <a href="#R5x-OptX"><kbd>/X</kbd> option</a> file exclusions.</p>

<p class="brk">When in doubt about which files GREP is scanning, you can use the
<a href="#R5x-OptB"><kbd>/B</kbd> option</a> to make GREP
tell you the name of every file it examines. If you want to know why
GREP is bypassing certain files, use the
<a href="#R5x-OptD"><kbd>/D</kbd> option</a> for full debugging display.</p>


<h3 id="R2.2-InputStandard">2.2&nbsp; Standard Input and Redirection</h3>

<p class="brk">If you don&#8217;t specify any <a href="#R2.1-InputsNamed">named input
files</a>, GREP takes its input from the
<dfn id="stdin">standard input</dfn>. That can
mean any of these three sources:</p>

<ul>

<li><p>Input redirected from a single file:</p>
<pre>
        grep [<var>options</var>] [<var>regex</var>] &lt;<var>inputfile</var> </pre>
<p class="brk">(<var>inputfile</var> must specify a single file without
<a href="#wildcard">wildcards</a>.)

<li><p>Another command&#8217;s output piped into GREP for further
processing:</p>
<pre>
        <var>other-command</var> | grep [<var>options</var>] [<var>regex</var>] </pre>

<li><p>Keyboard input (GREP will prompt you):</p>
<pre>
        grep [<var>options</var>] [<var>regex</var>] </pre>


</ul>

<p class="brk">GREP actually can have up to three types of file inputs: regular
expressions (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>),
lines to be scanned for matches, and a list of files to scan for
matches (<a href="#R5x-OptAt"><kbd>/@</kbd> option</a>).
Any of the three can come from standard input (depending on options),
and standard input could be from the keyboard, piped, or redirected.
When GREP is waiting for keyboard input, it
<a href="#R6.6-MessagesPrompts">prompts you</a> for the
specific type it&#8217;s expecting.</p>

<p class="nonbrk">The standard input is always read in text mode regardless of
the <a href="#R5x-OptR"><kbd>/R</kbd> option</a>.</p>

<p class="brk">Example:</p>
<pre class="secondhalf">
        grep /F- <var>inputfiles</var> </pre>
<p class="secondhalf">tells GREP to read one or more <a href="#R4-Regex">regexes</a> from the keyboard,
rather than take a regex from the command line. GREP prompts you
with <samp>regex:</samp> for each regex, then after you&#8217;ve entered your regex(es)
it reads the named input files and match them against the
regex(es) you typed.</p>

<p class="nonbrk">For another example of redirection, please see the
<a href="#R5x-OptL"><kbd>/L</kbd> option</a>.</p>


<h3 id="R2.3-InputsSubdirs">2.3&nbsp; Subdirectory Searches</h3>

<p class="brk">If you set the <kbd>/S</kbd> option, GREP
searches not only the <a href="#filespec">filespecs</a> indicated on the command line, but also
the same-named files in subdirectories.</p>

<p class="nonbrk">In the <a href="grep101.htm#License">registered version</a>,
the <kbd>/S</kbd> option searches all the way to the bottom of a
directory tree. The search is <strong class="key">depth first</strong>, meaning that if a
directory has subdirectories A and B, and A has A1 and A2, then the
order is A\A1 (and its descendants), A\A2 (and its descendants), B
(and its descendants).</p>

<p class="nonbrk">In the <a href="grep101.htm#License">evaluation version</a>, GREP
searches the named or implied directories and all directories
immediately below them, but no further in any one execution of GREP. You can
either make multiple runs, or <a href="grep101.htm#License">register GREP</a>
for the convenience of searching the entire directory
tree.</p>

<p class="brk">For example, with the command
<pre class="secondhalf">
        grep /S <var>regex</var> \hazax* *.c g:\mumble\*.htm </pre>
<p class="secondhalf">GREP examines all files on the entire current drive whose names
start with hazax; then it looks at all C source files
in the current directory and all subdirectories under it; finally it
looks at all HTML files in directory g:\mumble and
all subdirectories under it.</p>

<p class="nonbrk">Perhaps a more realistic example: you have a document about
Vandelay Industries somewhere on your disk, but you can&#8217;t remember
where. You can find it this way:</p>
<pre class="secondhalf">
        grep Vandelay /S \* </pre>
<p class="secondhalf">or</p>
<pre class="secondhalf">
        grep Vandelay /S \*.* </pre>
<p class="secondhalf">or even</p>
<pre class="secondhalf">
        grep Vandelay /S \ </pre>
<p class="secondhalf">(Both <kbd>*</kbd> and <kbd>*.*</kbd> select all files; see
<a href="#R2.1.1-InputsWildcards">Wildcard Expansion</a>. And just
specifying a directory is equivalent to specifying all files in the
directory; see <a href="#R2.1-InputsNamed">Named Input Files</a>.) You might
want to add the <a href="#R5x-OptI"><kbd>/I</kbd> option</a>
if you can&#8217;t remember how &#8220;Vandelay&#8221; was capitalized.</p>

<p class="brk">Subdirectory search follows the normal file-searching rules,
and therefore GREP normally ignores
<strong class="key">hidden and and system subdirectories</strong>.
(Yes, they exist in Windows&nbsp;95 and later.)
The <a href="#R5x-OptA"><kbd>/A</kbd> option</a>
also applies during subdirectory search:
with <kbd>/S&nbsp;/A</kbd> together, GREP searches every subdirectory
including hidden and system subdirectories.
There&#8217;s no way to search every subdirectory but only normal files, or
to search only normal subdirectories but to search for hidden files in
them.</p>

<h4 id="R2.3.1-InputsSubdirsOrder">2.3.1&nbsp; Search Order</h4>

<p class="brk">You may want to know in what order GREP examines multiple
<a href="#filespec">filespecs</a> when the <a href="#R5x-OptS"><kbd>/S</kbd> option</a> is set. (If not, skip the
rest of this section.)</p>

<p class="brk">First, consider the situation without the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>.
All file inputs are listed on the command line.
Ordinarily, GREP examines all files in
the first file argument and its subdirectory tree, then
proceeds to the second file argument and its subdirectory tree, and so
on&nbsp;&#8212; GREP calls this <dfn>column order</dfn>.
However, when you use the <kbd>/S</kbd> option and none of the file
arguments are directories or have paths, then
GREP first scans the current directory for all
of them, then scans the first subdirectory for all of them, then the next
subdirectory, and so on&nbsp;&#8212; GREP calls this
<dfn>row order</dfn>.</p>

<p class="nonbrk">Example:</p>

<pre class="secondhalf">
        grep /S <var>regex</var> sampro f*</pre>

<p class="secondhalf">If SAMPRO is not a directory, GREP applies row order: it
looks first for file SAMPRO and any file starting with F in the
current directory, then for the same files in all subdirectories.
But if SAMPRO is a directory, then GREP applies column order,
looking first for all files
in SAMPRO and its subdirectories, then for all files beginning with F
in the current directory and its subdirectories.</p>

<p class="nonbrk">For contrast, consider the command

<pre class="secondhalf">
        grep /S <var>regex</var> sam\pro f*</pre>

<p class="secondhalf">Here one of the filespecs is a directory, and therefore GREP
applies column order: it looks first for PRO in subdirectory SAM and
its descendants, then for any file starting with F in the current
directory and its descendants.</p>


<p class="brk">Now suppose you specify a list of input files with the
<a href="#R5x-OptAt"><kbd>/@</kbd> option</a>. GREP processes the
first filespec in that list and all subdirectories, then
the second filespec and subdirectories, and so on.
When the <kbd>/@</kbd> list file is exhausted, GREP goes on to
process any filespecs on the command line, in row or column order as
described above.</p>

<p class="brk">The <a href="#R5x-OptD"><kbd>/D</kbd> option</a>
shows you every directory and <a href="#wildcard">wildcard</a> search
as GREP performs it. The output also contains lots of other stuff, but
the string <samp>GX:</samp> starts the record of each file visit.</p>



<h3 id="R2.4-InputsBinary">2.4&nbsp; Binary Files and Text Files</h3>

<p class="brk">GREP was originally written with plain text files in
mind, but you can also use it quite well with binary files.</p>

<h4 id="R2.4.3-InputsBinaryGuess">2.4.1&nbsp; Differences between Text
and Binary Files</h4>

<h5 id="R2.4-InputsBinaryText" class="secondheader">Text Files</h5>

<p class="brk">A <dfn id="textfile">text file</dfn> can be displayed without
special processing, for instance by the TYPE and MORE commands.
HTML files are always text files; program source code and files with
extension .TXT are nearly always text files.</p>

<p class="brk">Text files are separated into variable-length lines by carriage return
plus line feed (ASCII 13 and 10) or either one alone; and other control characters
(ASCII 0&#8211;8, 9, 11, and 14&#8211;31) are usually not present.</p>

<p class="nonbrk">Starting with release 8.0, GREP can handle any form of line
termination: CR+LF (Windows), LF (UNIX), CR (Macintosh), even LF+CR if any
system uses it. Also starting
with release 8.0, GREP continues reading a file even if it contains an
embedded Control-Z (ASCII 26). I am grateful to Scott Brueckner
for an excellent set of
<a href="http://www.mrx.net/c/input.files.html">test cases</a> in his
<a href="http://www.mrx.net/c/index.html"><cite>Reading Text Files in
C</cite></a>. Although I didn&#8217;t use any of his C code, I did benefit
greatly from his research into the issues with the standard C library.</p>

<p class="brk">By default, GREP adjusts automatically to the longest line in
the input. However, if you specify the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a>
and give a maximum line length with the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>,
GREP processes any lines longer than that in chunks.</p>

<p class="brk">If you think some matches might begin on one line and continue
to another line, use the <a href="#R5x-OptG"><kbd>/G2</kbd> option</a> to tell GREP to read in
paragraph mode.</p>

<h5 id="R2.4-InputsBinaryBinary">Binary Files</h5>

<p class="brk">A <dfn>binary file</dfn> contains numbers and sometimes even text in a
special internal form that looks like gibberish if simply printed
character by character. Any file byte can contain any value 0&#8211;255.
There are two types of binary files:</p><ul class="purelist">

<li><p>Some binary files are
<dfn id="recordbinary">record-oriented binary</dfn>, meaning that the
file consists entirely of a number of records all the same length and
formatted the same way.
Database files often take this form, and many programs write their
output as fixed-length binary records: bytes 5-18 of every record
might contain the customer&#8217;s family name, for instance.</p>

<p class="nonbrk">You specify the record length with the
<a href="#R5x-OptW"><kbd>/W</kbd> option</a>, and GREP reads
one record at a time.</p>

<li><p>Other binary files are
<dfn id="freeformbinary">free-form binary</dfn>: they
usually have some structure but their structure is not a series of
records of equal length. Examples include EXEs and DLLs,
most word-processing files and spreadsheets.
(ZIP archives and PDF files are also free-form
binary, but since they are compressed you won&#8217;t get useful results by
running GREP on them.)</p>

<p class="nonbrk">For free-form binary, GREP reads overlapping buffers and the
<a href="#R5x-OptW"><kbd>/W</kbd> option</a> specifies the
buffer size. Please see the <kbd>/W</kbd> option for recommended
buffer size to make sure that no matches in the file are missed.</p>

</ul>


<h5 id="R2.4-InputsBinaryDecide">How Does GREP Know?</h5>

<p class="brk">Windows doesn&#8217;t mark a file as text or binary; the program that reads
the file just has to know.
GREP &#8220;knows&#8221; files are binary when you tell it via the
<a href="#R5x-OptR"><kbd>/R2</kbd> or <kbd>/R3</kbd> option</a>;
otherwise it treats input files as text.
If GREP reads a file in text mode but the file is actually binary,
some matches may be missed. It&#8217;s important, therefore, to scan binary
files in binary mode.</p>

<p class="nonbrk"><a href="grep101.htm#License">Registered users</a> can use
the <a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a> to
have GREP examine each file and decide whether it&#8217;s text or
free-form binary. (Please see the
<a href="#R5x-OptR"><kbd>/R</kbd> option</a> for details on how GREP makes that decision.)
I recommend <kbd>/R-1</kbd> for registered users.</p>

<h4 id="R2.4.2-BinaryRead">2.4.2&nbsp; How Does GREP Read Binary and Text Files?</h4>

<p class="brk">Here&#8217;s a comparison of the three ways GREP can read input files:</p>

<div class="acchild"><table class="mystd" border="2">
<tr><th>line-oriented text<br>(<kbd>/R0</kbd>)</th>
    <th>record-oriented binary<br>(<kbd>/R2</kbd>)</th>
    <th>free-form binary<br>(<kbd>/R3</kbd>)</th>
    </tr>
<tr><td valign=top>(<kbd>/R0</kbd>) The file is read a line at a time.
        (But if you specify the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a>, any line
        bigger than the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>
        value is read in chunks with each chunk treated as
        a line.)</td>
    <td valign=top>(<kbd>/R2</kbd>) The file is read a record at a time; the record
        length is given by the
        <a href="#R5x-OptW"><kbd>/W</kbd> option</a>.</td>
    <td valign=top>(<kbd>/R3</kbd>) The file is read in overlapping half-buffers. The
        <a href="#R5x-OptW"><kbd>/W</kbd> option</a> gives
        the buffer size; see that option description for recommended
        buffer size.</td>
    </tr>
<tr><td valign=top>(<kbd>/R0</kbd>) A line ends with a
        carriage return or line feed (ASCII 13 or 10) or both.</td>
    <td valign=top colspan=2>(<kbd>/R2</kbd> or <kbd>/R3</kbd>) ASCII 13 and 10 have no special meaning.</td>
<tr><td valign=top colspan=3>(all) The file length is given by the directory
        entry. Control-Z is just another character.</td>
    </tr>
<tr><td valign=top colspan=2>(<kbd>/R0</kbd> or <kbd>/R2</kbd>) The regex characters
        <a href="#R4.8-RegexAnchor"><kbd>^</kbd> and
        <kbd>$</kbd></a> mean the start and end of a line or record.</td>
    <td valign=top>(<kbd>/R3</kbd>) The characters
        <a href="#R4.8-RegexAnchor"><kbd>^</kbd> and
        <kbd>$</kbd></a> in an extended regex match a newline
        (ASCII 10). In a basic regex they don&#8217;t match anything useful.</td>
<tr><td valign=top colspan=2>(<kbd>/R0</kbd> or <kbd>/R2</kbd>) The <a href="#R5x-OptV"><kbd>/V</kbd> option</a>
        looks for lines or records that don&#8217;t contain a match.</td>
    <td valign=top>(<kbd>/R3</kbd>) The <a href="#R5x-OptV"><kbd>/V</kbd> option</a>
        makes no sense with free-form binary
        processing, unless you use it with the
        <a href="#R5x-OptL"><kbd>/L</kbd> option</a> to report
        files that contain no matches to the regex at all.</td>
    </tr>
</table></div>

<h4 id="R2.4.3-BinaryHits">2.4.3&nbsp; How Does GREP Display Hits?</h4>

<p class="brk">The file format not only affects how the file is read (above), but it also
affects how <a href="#hits">hits</a> are displayed.
The table below shows the default output formats for the various input
formats; however, you can use the letter <a href="#R5x-OptO"><kbd>/o</kbd> option</a> to specify
any output format for any input format.</p>

<div class="acchild"><table class="mystd" border="2">
<tr><th>line-oriented text<br>(<kbd>/R0</kbd>)</th>
    <th>record-oriented binary<br>(<kbd>/R2</kbd>)</th>
    <th>free-form binary<br>(<kbd>/R3</kbd>)</th>
    </tr>
<tr><td valign=top colspan=2>(<kbd>/R0</kbd> or <kbd>/R2</kbd>) When a match is found, the matching line
        or record is displayed, unless you used the
        <a href="#R5x-OptC"><kbd>/C</kbd> option</a>,
        <a href="#R5x-OptJ"><kbd>/J</kbd> option</a>,
        or <a href="#R5x-OptL"><kbd>/L</kbd> option</a>.</td>
    <td valign=top>(<kbd>/R3</kbd>) The
        <a href="#R5x-OptC"><kbd>/C</kbd> option</a>,
        <a href="#R5x-OptJ"><kbd>/J</kbd> option</a>,
        or <a href="#R5x-OptL"><kbd>/L</kbd> option</a> is
        strongly recommended. But if you don&#8217;t use any of them, then
        when a match is found, GREP displays the buffer that
        contains it.</td>
    </tr>
<tr><td valign=top>(<kbd>/R0</kbd>) In paragraph mode
        (<a href="#R5x-OptG"><kbd>/G2</kbd> option</a>), matching lines are output as character streams.
        GREP doesn&#8217;t check for control characters like form feed (ASCII 12)
        and backspace (8); if they&#8217;re in the input,
        output may be formatted strangely.
        <p class="nonbrk">In line modes (<a href="#R5x-OptG"><kbd>/G0</kbd> or <kbd>/G1</kbd> option</a>), any
        non-printable characters in an output line are replaced by
        a control code like <samp>^Q</samp> or a hex sequence like
        <samp>&lt;7F&gt;</samp>.</p></td>
    <td valign=top colspan=2>(<kbd>/R2</kbd> or <kbd>/R3</kbd>)
        Hits are displayed in both hex and text form, 16 bytes per
        line. In the text output, non-printable characters appear as
        dots. (GREP16 considers characters 0-31 and 127-255
        as non-printable characters; in GREP32 that is the default but
        you can change it by setting a character mapping with the
        <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.) Here&#8217;s a sample:
        <pre>
---------- d:\abc\web\LN10HT.200
 792E6F72 672F7374 6174732F 61736B2F  &gt; y.org/stats/ask/ &lt;
 6E6E742E 61737022 3E6E756D 62657220  &gt; nnt.asp"&gt;number  &lt;
 6E656564 65640D0A 746F2074 72656174  &gt; needed..to treat &lt;
 3C2F                                 &gt; &lt;/               &lt;</pre>
        <p class="brk">It takes more than one line to display an output
        record or buffer that contains more than 16 bytes. In this case, GREP
        inserts a blank line after each record or buffer. Exception:
        with the <a href="#R5x-OptR"><kbd>/R2</kbd> option</a> and <a href="#R5x-OptN"><kbd>/N</kbd> option</a> together,
        records are identified by record number and are not separated
        by blank lines.</p></td>
        </tr>
<tr><td valign=top colspan=2>(<kbd>/R0</kbd> or <kbd>/R2</kbd>) With the
        <a href="#R5x-OptN"><kbd>/N</kbd> option</a>, GREP
        displays the line or record number with each hit.</td>
    <td valign=top>(<kbd>/R3</kbd>) With the <a href="#R5x-OptN"><kbd>/N</kbd> option</a>,
        GREP displays the starting byte number with each
        hit. The first byte in the file is numbered 0.</td>
    </tr>
<tr><td valign=top colspan=2>(<kbd>/R0</kbd> or <kbd>/R2</kbd>) The <a href="#R5x-OptP"><kbd>/P</kbd> option</a>
        specifies how many lines or records from the
        file to display before and after each hit.</td>
    <td valign=top>(<kbd>/R3</kbd>) The <a href="#R5x-OptP"><kbd>/P</kbd> option</a> is ignored.</td>
    </tr>
</table></div>



<h2 id="R3-Outputs">3. Outputs</h2>
<div class="Summary" id="TOC3"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R3.1-OutputHits">3.1&nbsp; List of Hits</a>
<ul>
<li><a href="#R3.1.1-Hits">3.1.1&nbsp; Variations on the Hit List</a></li>
<li><a href="#R3.1.2-OutputRedirect">3.1.2&nbsp; Redirected Output</a></li>
<li><a href="#R3.1.3-StderrRedirect">3.1.3&nbsp; Redirected Error Output</a></li>
</ul></li>
<li><a href="#R3.2-OutputDebug">3.2&nbsp; Debugging Output</a></li>
<li><a href="#R3.3-ERRORLEVEL">3.3&nbsp; Return Values (ERRORLEVEL)</a></li>
</ul>
</div>
<p class="brk">GREP displays the matches (with
<a href="#filespec">filespecs</a> and line numbers, depending on your
options) to the <dfn id="stdout">standard output</dfn>. Normally, the
standard output is your screen, but you can
<a href="#R3.1.2-OutputRedirect">redirect or pipe</a> the standard
output.</p>

<p class="brk">GREP displays the program logo and all
<a href="#R6-Messages">messages</a> to the <dfn id="stderr">standard
error stream</dfn>. Normally, that&#8217;s also your screen, but some
systems let you redirect standard error output
see <a href="#R3.1.3-StderrRedirect">Redirected Error Stream</a> for
details.</p>


<h3 id="R3.1-OutputHits">3.1&nbsp; List of Hits</h3>

<p class="brk">Normally, GREP displays hits on your screen. <dfn id="hits">Hits</dfn>
are the text lines, binary records, or binary buffers that contain matches
for the regex(es). As part of the output, GREP displays the file
path and name as a header above the group of hits from that file.
Here&#8217;s an example:</p>

<pre class="secondhalf">
        ---------- GREP.C
                op_showhead = ShowNoHeads;
                else if (op_showhead == ShowNoHeads)
                op_showhead = ShowNoHeads;

        ---------- GREP_MAT.C
                op_showhead == ShowNoHeads) </pre>

<p class="brk">Many people prefer UNIX-style output (<a href="#R5x-OptU"><kbd>/U</kbd> option</a>).
UNIX style shows the file path and name on the same line as the hit,
like this:</p>

<pre class="secondhalf">
        GREP.C:        op_showhead = ShowNoHeads;
        GREP.C:        else if (op_showhead == ShowNoHeads)
        GREP.C:        op_showhead = ShowNoHeads;
        GREP_MAT.C:        op_showhead == ShowNoHeads) </pre>

<h4 id="R3.1.1-Hits">3.1.1&nbsp; Variations on the Hit List</h4>

<p class="brk"><a href="#R5.4-OptOutput">Output options</a> give you a lot of
control over what GREP produces</p>

<ul class="loose">

<li>You can control the output format with the letter <a href="#R5x-OptO"><kbd>/o</kbd> option</a>,
selecting <a href="#R2.4.3-BinaryHits">binary dump</a> or a variety of
text formats.</li>

<li>You can display lines before and after matching lines
(<a href="#R5x-OptP"><kbd>/P</kbd> option</a>), just the matching lines
(default), just the matching <em>portions</em> of lines
(<a href="#R5x-OptJ"><kbd>/J</kbd> option</a>),
just a count of hits by file
(<a href="#R5x-OptC"><kbd>/C</kbd> option</a>), or just the names of
files that contain matches (<a href="#R5x-OptL"><kbd>/L</kbd> option</a>).</li>

<li>You can display on separate lines the <a href="#filespec">filespec</a>
of every file examined (<a href="#R5x-OptB"><kbd>/B</kbd> option</a>),
only the filespecs of files that contain matches (default),
or no filespec headers at all (<a href="#R5x-OptH"><kbd>/H</kbd> option</a>).</li>

<li>You can display hits plain (default) or preceded on the same
line by the filename (<a href="#R5x-OptU"><kbd>/U</kbd> option</a>)
and/or the line number (<a href="#R5x-OptN"><kbd>/N</kbd> option</a>).</li>

<li>You can stop reading the file after
displaying a desired number of hits
(<a href="#R5x-OptK"><kbd>/K</kbd> option</a>).</li>

</ul>

<p class="brk">In addition to these options, under the
<a href="#R5x-OptR"><kbd>/R2</kbd> or <kbd>/R3</kbd> option</a> GREP reads files
in <a href="#R2.4.2-BinaryRead">binary mode</a>, and binary hits are
displayed in a slightly <a href="#R2.4.3-BinaryHits">different
format</a>.</p>


<h4 id="R3.1.2-OutputRedirect">3.1.2&nbsp; Redirected Output</h4>

<p class="brk">You can redirect GREP&#8217;s list of <a href="#hits">hits</a> into a file or pipe
it to another command (even another GREP command). To redirect
GREP output, follow the command prompt rules and put one of these at the end of
the GREP command line:</p><ul>

<li><p><kbd>&gt;&gt;</kbd><var>reportfile</var>
appends GREP&#8217;s output to an existing file, or creates the file and
writes to it if it doesn&#8217;t exist.</p>

<li><p><kbd>&gt;</kbd><var>reportfile</var>
overwrites an existing file with GREP&#8217;s output, or creates the file
and writes to it if it doesn&#8217;t exist.</p>

<li><p><kbd>|</kbd>&nbsp;<var>other-command</var>
pipes GREP&#8217;s output to the standard input stream of the other
command.</p>

</ul>

<p class="brk">You can pipe or redirect output regardless of whether
<a href="#R2-Inputs">input</a> was piped or redirected.</p>


<h4 id="R3.1.3-StderrRedirect">3.1.3&nbsp; Redirected Error Output</h4>

<p class="brk"><a href="#R6-Messages">Errors and warning messages</a> are
sent to the <a href="#stderr">standard error</a> stream.
That is usually your screen, though some OSes or shell replacements
let you redirect error output. For instance, in the Windows XP command
prompt and in the 4NT command processor,</p>

<pre class="secondhalf">
        grep&nbsp;&#133; 2&gt;<var>file</var></pre>

<p class="secondhalf">will redirect the standard error stream to the named file with
no effect on the <a href="#stdout">standard output</a>. In those
systems, you can redirect standard output and standard error to
different files, like this:</p>

<pre class="secondhalf">
        grep&nbsp;&#133; &gt;<var>file1</var> 2&gt;<var>file2</var></pre>


<h3 id="R3.2-OutputDebug">3.2&nbsp; Debugging Output</h3>

<p class="brk">The <a href="#R5x-OptD"><kbd>/D</kbd> option</a> lets you
create extra debugging output and send it to a named file or the
<a href="#stderr">standard error</a> stream. This can be very handy when GREP isn&#8217;t doing
what you expect.</p>

<p class="nonbrk">You may be asked for include debugging output with any trouble
report.</p>


<h3 id="R3.3-ERRORLEVEL">3.3&nbsp; Return Values (ERRORLEVEL)</h3>

<p class="brk">GREP returns a status number to the command shell.
You can test the exit status with <kbd>IF&nbsp;ERRORLEVEL</kbd> in
a batch file or script. (In 
<a href="http://jpsoft.com">TCC</a>, 4NT, and 4DOS,
<kbd>%?</kbd> gets you the error level on the
command line, not just in a batch file.)</p>

<p class="nonbrk">Here are GREP&#8217;s status codes returned in
ERRORLEVEL:</p>

<div class="acchild"><table class="mynb" style="width:80%">
<tr><td>0&nbsp;or&nbsp;1</td><td>Success&nbsp;&#8212; the program
    read at least one input file and ran to completion. See below for
    details.</td></tr>
<tr><td>2</td><td>Help message requested
    (<a href="#R5x-OptHelp"><kbd>/?</kbd> option</a>).</td></tr>
<tr><td>3</td><td>Warnings were issued, but there were no actual
    errors. (This status is possible only if you specified the
    <a href="#R5x-Opt3"><kbd>/3</kbd> option</a>.)</td></tr>
<tr><td>4</td><td>Not a single file matched any of the
    <a href="#R2.1-InputsNamed">input filespecs</a>.</td></tr>
<tr><td>128</td><td>Internal GREP error in expanding a
    <a href="#R4-Regex">regex</a>&nbsp;&#8212; please report this to
    <a href="http://oakroadsystems.com/about.htm#Contact">Oak
    Road Systems</a>.</td></tr>
<tr><td>253</td><td>Insufficient memory for GREP to run
    with the options selected. (If this happens, see
    <a href="#R6.2-MessagesMemory">&#8220;insufficient memory&#8221;</a> in the
    list of messages.)</td></tr>
<tr><td>254</td><td>Couldn&#8217;t read specified file for
    <a href="#R5x-OptF"><kbd>/F</kbd> option</a> or
    <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>,
    <em>or</em> file-system error while reading
    any file.</td></tr>
<tr><td>255</td><td>Bad option in the
    <a href="#R5.1.2-Envvar">environment variable</a> or on the
    <a href="#R1-CmdLine">command line</a>, bad
    <a href="#R4-Regex">regex</a>, or some other mistake by user.</td></tr>
</table></div>

<p class="brk">You might want to use GREP in a batch file or a makefile and
take different actions depending on whether <a href="#hits">hits</a> were found. To
do this, use the <a href="#R5x-Opt1"><kbd>/0</kbd> or <kbd>/1</kbd> option</a>; each tells GREP
what to return in ERRORLEVEL if any hits were
found.</p>

<p class="nonbrk">Here are GREP&#8217;s <strong class="key">success codes</strong>, the codes it returns if
it ran to completion and processed at least one file or the
<a href="#stdin">standard input</a>:</p>

<div class="acchild"><table class="myctr">
<thead><tr><td rowspan=2></td>
           <th>with <kbd>/0</kbd></th>
           <th>with <kbd>/1</kbd></th>
           <th>with neither</th></tr>
       <tr><th colspan=3>value in ERRORLEVEL</th></tr>
</thead><tbody>

<tr><td class="al">GREP ran to completion and found at least one hit
in at least one file or the standard input.
(With the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>: GREP found at least one line that
<em>wasn&#8217;t</em> a match.)</td>
<td>0</td><td>1</td><td>0</td></tr>

<tr><td class="al">GREP ran to completion and read at least one file
or standard input, but didn&#8217;t find any hits in any files.
(With the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>: Every single line was a match.)</td>
<td>1</td><td>0</td><td>0</td></tr>

</tbody>
</table></div>



<h2 id="R4-Regex">4. Regular Expressions (Regexes)</h2>

<p class="brk">A <dfn>regular expression</dfn> or <dfn>regex</dfn> is a pattern of characters
to compare to one or more input files. A line/record/buffer
from an input file is a hit if all or part of it agrees with
the pattern in the regex. You've already met some
<a href="grep101.htm#RegexExamples">examples</a> in the <cite>GREP Quick Start</cite>.</p>

<p class="nonbrk">A regex can be a simple text string, like <kbd>mother</kbd>, or
it can include a bunch of special characters to express possibilities
like &#8220;repeated&#8221; and &#8220;any of these characters or substrings&#8221;.
(If you want to search only for simple
strings, use the <a href="#R5x-OptE"><kbd>/E0</kbd> option</a> and
ignore all this regex stuff.)</p>

<p class="nonbrk">Regexes come in two flavors, <a href="#R4.1.1-RegexTwoKinds">basic and
extended regexes</a>. If you're new to regexes, you might want to
ignore extended regexes while you get comfortable with basic regexes.
Use the following <a href="#R4.1-RegexOverview">Overview</a> to help
you find the particular feature you need.
On the other hand, if you're already comfortable with regexes, you'll
find additional material and tips in <cite>Mastering Regular
Expressions</cite> by Jeffrey Friedl (O'Reilly &amp; Associates).</p>

<p class="brk">You specify a single regex on the
<a href="#R1-CmdLine">command line</a>, or you specify one or more
regexes in a file with the <a href="#R5x-OptF"><kbd>/F</kbd> option</a>.</p>

<div class="Summary" id="TOC4"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R4.1-RegexOverview">4.1&nbsp; Overview</a>
<ul>
<li><a href="#R4.1.1-RegexTwoKinds">4.1.1&nbsp; Basic and Extended Regexes</a></li>
<li><a href="#R4.1.2-RegexCompatibility">4.1.2&nbsp; Compatibility Note</a></li>
<li><a href="#R4.1.3-RegexQuotes">4.1.3&nbsp; Quotes in a Regex</a></li>
<li><a href="#R4.1.4-RegexConfuse">4.1.4&nbsp; Regex Starting with <kbd>-</kbd> or /</a></li>
<li><a href="#R4.1.5-RegexLimits">4.1.5&nbsp; Limitations</a></li>
</ul></li>
<li><a href="#R4.2-RegexNormal">4.2&nbsp; Normal Character (any regex)</a></li>
<li><a href="#R4.3-RegexPeriod">4.3&nbsp; <kbd>.</kbd> for Any Character (any regex)</a></li>
<li><a href="#R4.4-RegexStarPlus">4.4&nbsp; <kbd>*</kbd> or <kbd>+</kbd> for Repetition (any regex)</a></li>
<li><a href="#R4.5-RegexQuestion">4.5&nbsp; <kbd>?</kbd> for Optional Match (extended regex)</a></li>
<li><a href="#R4.6-RegexBrace">4.6&nbsp;  for Repetition (extended regex)</a>
<ul>
<li><a href="#R4.6.1-RegexGreedy">4.6.1&nbsp; Greedy Quantifiers (extended regex)</a></li>
</ul></li>
<li><a href="#R4.7-RegexClass">4.7&nbsp;  for Character Class (any regex)</a>
<ul>
<li><a href="#R4.7.1-RegexClassMinus">4.7.1&nbsp; <kbd>-</kbd> for Character Range (any regex)</a></li>
<li><a href="#R4.7.2-RegexClassCaret">4.7.2&nbsp;  for Negative Character Class (any regex)</a></li>
<li><a href="#R4.7.3-RegexClassCaseblind">4.7.3&nbsp; Character Class and Case-Blind Matching (any regex)</a></li>
<li><a href="#R4.7.4-RegexClassName">4.7.4&nbsp; Character Class Names (extended regex)</a></li>
</ul></li>
<li><a href="#R4.8-RegexAnchor">4.8&nbsp; <kbd>^</kbd> and <kbd>$</kbd> for Start and End of Line (any regex)</a>
<ul>
<li><a href="#R4.8.1-LengthyExample">4.8.1&nbsp; Finding a Word (Lengthy Example)</a></li>
</ul></li>
<li><a href="#R4.9-RegexBar">4.9&nbsp; <kbd>|</kbd> for Alternatives (extended regex)</a></li>
<li><a href="#R4.10-RegexSub">4.10&nbsp;  for Subexpressions (extended regex)</a>
<ul>
<li><a href="#R4.10.1-RegexSubAdvanced">4.10.1&nbsp;  Advanced Topics (extended regex)</a></li>
</ul></li>
<li><a href="#R4.11-RegexBackslash">4.11&nbsp; The Backslash <kbd>\</kbd></a>
<ul>
<li><a href="#R4.11.1-RegexBackslashEscape">4.11.1&nbsp; Backslash as Escape (any regex)</a></li>
<li><a href="#R4.11.2-RegexBackslashType">4.11.2&nbsp; Backslash for Character Types (extended regex)</a></li>
<li><a href="#R4.11.3-RegexBackslashAssert">4.11.3&nbsp; Backslash for Assertions (extended regex)</a></li>
<li><a href="#R4.11.4-RegexBackslashBackref">4.11.4&nbsp; Backslash for Back References (extended regex)</a></li>
<li><a href="#R4.11.5-RegexBackslashEncode">4.11.5&nbsp; Backslash for Character Encoding (extended regex)</a></li>
</ul></li>
<li><a href="#R4.12-RegexCmdLine">4.12&nbsp; Special Rules for the Command Line</a>
<ul>
<li><a href="#R4.12.1-RegexCmdLineWhen">4.12.1&nbsp; When Do You Need the Special Rules?</a></li>
<li><a href="#R4.12.2-RegexCmdLineWhat">4.12.2&nbsp; What Exactly Are the Special Rules?</a></li>
</ul></li>
</ul>
</div>
<h3 id="R4.1-RegexOverview">4.1&nbsp; Overview</h3>

<p class="brk">A regex is a mix of <a href="#R4.2-RegexNormal">normal characters</a>
and the <dfn>special characters</dfn> listed in this section.</p>

<p class="brk">The following characters are special if they occur <em>outside
of</em> <a href="#R4.7-RegexClass">square brackets</a>:
<ul>
<li><kbd>\</kbd> backslash (<a href="#R4.11.1-RegexBackslashEscape">treat special character as normal</a>)
<li><kbd>\</kbd> backslash (<a href="#R4.11.2-RegexBackslashType">character
types</a>, <a href="#R4.11.3-RegexBackslashAssert">simple assertions</a>,
<a href="#R4.11.4-RegexBackslashBackref">back references</a>,
<a href="#R4.11.5-RegexBackslashEncode">character encoding</a>, extended regex only)
<li><kbd>.</kbd> period (matches <a href="#R4.3-RegexPeriod">any character</a>)
<li><kbd>*</kbd> asterisk (<a href="#R4.4-RegexStarPlus">0 or more occurrences</a>)
<li><kbd>+</kbd> plus sign (<a href="#R4.4-RegexStarPlus">1 or more occurrences</a>)
<li><kbd>?</kbd> question mark (<a href="#R4.5-RegexQuestion">0 or 1 occurrence</a>, extended regex only)
<li><kbd>{</kbd> left brace (<a href="#R4.6-RegexBrace">repetition count</a>,
extended regex only)
<li><kbd>[</kbd> left square bracket (start
<a href="#R4.7-RegexClass">character class</a>)
<li><kbd>^</kbd> caret (match <a href="#R4.8-RegexAnchor">start of line</a>)
<li><kbd>$</kbd> dollar sign (match <a href="#R4.8-RegexAnchor">end of line</a>)
<li><kbd>|</kbd> vertical bar (<a href="#R4.9-RegexBar">alternatives</a>,
extended regex only)
<li><kbd>(&nbsp;)</kbd> parentheses or round brackets
(<a href="#R4.10-RegexSub">subexpressions</a>, extended regex only)
</ul>
<p class="secondhalf">The characters <kbd>? { | (</kbd> are special in an extended
regex, but in a basic regex they&#8217;re just normal characters. Please see
<a href="#R4.1.1-RegexTwoKinds">Basic and Extended Regexes</a>,
below.</p>

<p class="brk">The following characters are special if they occur <em>within</em>
<a href="#R4.7-RegexClass">square brackets</a>:
<ul>
<li><kbd>]</kbd> right square bracket (end
<a href="#R4.7-RegexClass">character class</a>)
<li><kbd>^</kbd> caret (<a href="#R4.7.2-RegexClassCaret">negate the
character class</a>)
<li><kbd>\</kbd> backslash (<a href="#R4.7-RegexClass">treat special character as normal</a>)
<li><kbd>\</kbd> backslash (<a href="#R4.11.5-RegexBackslashEncode">character encoding</a>, extended regex only)
<li><kbd>-</kbd> minus sign or hyphen
(<a href="#R4.7.1-RegexClassMinus">character range</a>)
<li><kbd>[:</kbd> left square bracket followed by colon (introduce a
<a href="#R4.7.4-RegexClassName">named character class</a>, extended regex only)
</ul>

<p class="brk"><a name="20040707b">For</a> easy reference, here&#8217;s a condensed
list of special characters:</p>

<div class="acchild"><table class="mystd" border="2">
<thead><tr><td></td>
    <th>Special characters<br>in a basic regex
        <br>(default or <a href="#R5x-OptE"><kbd>/E1</kbd> option</a>)</th>
    <th>Special characters<br>in an extended regex
        <br>(<a href="#R5x-OptE"><kbd>/E2</kbd> or <kbd>/E4</kbd> option</a>)</th></tr></thead>
<tbody>
<tr><th>Outside square brackets</th>
    <td><kbd>\ . * + [ ^ $</kbd></td>
    <td>the same, plus <kbd>? { | (</kbd></td></tr>
<tr><th>Inside square brackets</th>
    <td><kbd>\ ^ - ]</kbd></td>
    <td>the same, plus the <kbd>[:</kbd> sequence</td></tr>
</table></div>

<p class="brk">Every character not listed above is a
<a href="#R4.2-RegexNormal">normal character</a>.
Any of the above characters also becomes a normal character if
preceded by a <a href="#R4.11-RegexBackslash">backslash</a>, as
you&#8217;ll see below.</p>


<h4 id="R4.1.1-RegexTwoKinds">4.1.1&nbsp; Basic and Extended Regexes</h4>

<p class="brk">GREP offers two levels of regular expressions. This
<cite>GREP Manual</cite> marks certain features as &#8220;extended regex&#8221;; all others are
common to basic and extended regexes.</p>

<p class="brk">Basic regexes offer a &#8220;core subset&#8221; of the regex capabilities.
By default, GREP treats your regexes as basic, since that&#8217;s the only
kind of regex that GREP supported before release 6.0. Special characters marked as
&#8220;extended regex&#8221; are treated as normal characters in basic regexes.</p>

<p class="brk">Extended regexes can do much more than basic, including
<a href="#R4.9-RegexBar"><kbd>|</kbd> alternatives</a>,
<a href="#R4.5-RegexQuestion"><kbd>?</kbd> optional match</a>,
<a href="#R4.6-RegexBrace"><kbd>{&nbsp;}</kbd> quantifiers</a>, and
<a href="#R4.10-RegexSub"><kbd>(&nbsp;)</kbd> subexpressions</a>.
If you want to use extended regexes, specify the
<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>, available only in GREP32.</p>

<p class="nonbrk"><strong class="key">Acknowledgment:</strong> Extended regexes were added to
GREP in release 6.0, using the open-source PCRE library package,
copyright by the University of Cambridge, England. Thanks
are due to Philip Hazel for making this available, and in that spirit
extended regexes were added to GREP with no increase in price.
The primary download site for PCRE is
&lt;<small><a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/</a></small>&gt;.</p>

<p class="nonbrk">This <cite>GREP Manual</cite> covers most of the features of extended
regexes, but you might want to know about two additional references.
For your convenience, the GREP download files include an abridged copy of
Philip Hazel&#8217;s PCRE man page, <a href="pcre.htm">PCRE.HTM</a>, with
just the information relevant to GREP users. His original man page at
&lt;<small><a href="http://www.pcre.org/man.txt">http://www.pcre.org/man.txt</a></small>&gt;
also contains considerable information about incorporating
PCRE in programs.</p>


<h4 id="R4.1.2-RegexCompatibility">4.1.2&nbsp; Compatibility Note</h4>

<p class="brk">Different utilities define regexes differently; the following
sections tell you how this GREP defines them. You can find fascinating
tables of different interpretations in Jeffrey Friedl&#8217;s book
<cite>Mastering Regular Expressions</cite> (pages 63 and 182-183 of
the 1997 edition).</p>

<p class="brk">A note to UNIX or Vim veterans:
This GREP follows the Perl or egrep scheme, which uses <kbd>|</kbd> not
<kbd>\|</kbd> for alternatives, <kbd>(&nbsp;)</kbd> not
<kbd>\(&nbsp;\)</kbd> for subexpressions, <kbd>\b</kbd>
not <kbd>\&lt;</kbd> <kbd>\&gt;</kbd> for word boundaries. Be
alert to differences from the scheme you may know.</p>


<h4 id="R4.1.3-RegexQuotes">4.1.3&nbsp; Quotes in a Regex</h4>

<p class="brk">If you put quotes in your regex, most post-1995 versions of
DOS and Windows strip them out. Even worse, if you have <em>one</em> quote,
most versions treat everything till the end of the line as part
of the regex passed to GREP.</p>

<p class="brk">Before release 7.3 (July 2004), GREP stripped away any quotes
surrounding a regex. Combined with the stripping of quotes by Windows,
it was almost impossible to GREP for a regex including quotes.</p>

<p class="nonbrk">With release 7.3, GREP no longer strips quotes out of a regex.
You can keep DOS and Windows (most versions) from stripping quotes by
using backslashes. Now if you type</p>

<pre class="secondhalf">
        grep \"Really!\" *.doc /r-1</pre>

<p class="secondhalf">Windows or DOS passes &#8220;Really!&#8221; including quotes as command
argument to GREP, and GREP searches for the string &#8220;Really!&#8221; including
the quotes. But if you type</p>

<pre class="secondhalf">
        grep "Really!" *.doc /r-1</pre>

<p class="secondhalf">then Windows strips away the quotes and passes Really!
to GREP, without quotes.
GREP then searches for the string Really! whether quoted or not.</p>

<p class="brk">Unfortunately, different versions of DOS or Windows are not consistent in how they
handle quotes on the command line. If GREP is not behaving as
expected, it might be GREP or the command processor or your own error. You can diagnose
the problem easily by adding this to the end of your command:</p>

<pre class="secondhalf">
        /D- | grep "grep G[CR]:"</pre>

<p class="secondhalf">The <a href="#R5x-OptD"><kbd>/D</kbd> option</a> shows you debugging information, and
the second GREP call selects only information about what arguments
GREP received from the command line and how GREP interpreted the regex.</p>

<p class="nonbrk">Usually adding backslashes will make things work as you wish.
If not, your other options are to use the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a> and type in
the regex at the keyboard, or store it in a file and use the
<a href="#R5x-OptF"><kbd>/F<var>file</var></kbd> option</a>. In
a regex read from keyboard or file,
a quote is always a normal character.</p>


<h4 id="R4.1.4-RegexConfuse">4.1.4&nbsp; Regex Starting with <kbd>-</kbd> or /</h4>

<p class="brk">If your regex begins
with a hyphen <kbd>-</kbd> or slash <kbd>/</kbd> and you type it
on the command line, GREP will think
it&#8217;s an option. To prevent this, give it an extra backslash
<kbd>\</kbd> at the start. For instance, to search for /x in all
.TXT files in the current directory, use a command like</p>

<pre class="secondhalf">
        grep \/x *.txt</pre>

<p class="brk">When your regex is in a file (<a href="#R5x-OptF"><kbd>/F<var>file</var></kbd> option</a>) or
when GREP prompts you to type it from the keyboard (<a href="#R5x-OptF"><kbd>/F-</kbd> option</a>),
there&#8217;s no problem with a leading hyphen or slash, and the extra
backslash is unnecessary (though harmless).</p>

<p class="brk">A really unlikely scenario, mentioned for completeness:
With the <a href="#R5x-OptE"><kbd>/E0</kbd> option</a>, the &#8220;regex&#8221; is actually a
plain string with no special characters. If you need to search for a
string that begins with <kbd>-</kbd> or <kbd>/</kbd> and you can&#8217;t
let it be a regex, then you can&#8217;t do it on the command line. In this
case you&#8217;ll need to use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a>.</p>



<h4 id="R4.1.5-RegexLimits">4.1.5&nbsp; Limitations</h4>

<p class="brk">For basic regexes, GREP is limited to 127 characters compiled
into no more than 511. The &#8220;compiled&#8221; basic regex is GREP&#8217;s internal
representation, after character ranges have been expanded and so
on.</p>

<p class="brk">For extended regexes, the maximum compiled size is 65,539 (sic)
bytes. There can be no more than 65,536 capturing subpatterns, and all
kinds of subpatterns can be nested no more than 200 levels deep.</p>



<h3 id="R4.2-RegexNormal">4.2&nbsp; Normal Character (any regex)</h3>

<p class="brk">Any normal character matches itself. (Any character that is
not a special character is a <dfn>normal character</dfn>. The special characters
were listed in the <a href="#R4.1-RegexOverview">Overview</a>.)
Example: the regex
<kbd>abc</kbd> matches input lines that contain the three-character
sequence abc anywhere on the line.</p>

<p class="nonbrk">GREP can handle any character from space through character 255.
When using
8-bit characters or certain special characters on the command line, see
<a href="#R4.12-RegexCmdLine">Special Rules for the Command Line</a>
below.</p>

<p class="nonbrk">If you specify the <a href="#R5x-OptI"><kbd>/I</kbd> option</a>, any
letter in your regex matches both the upper and lower case
of that letter. (By default, only unaccented English letters A-Z and a-z are
affected by the <kbd>/I</kbd> option. In GREP32, you can use the
<a href="#R5x-OptM"><kbd>/M</kbd> option</a> to select a mapping that
includes all letters.)</p>

<p class="brk">If you want to match a special character, you must precede it with
a <a href="#R4.11-RegexBackslash">backslash <kbd>\</kbd></a> in your
regex.</p>

<p class="nonbrk">Example: to search for the string ^abc\def, you must put
backslashes before the two special characters:</p>

<pre class="secondhalf">
        \^abc\\def</pre>

<p class="secondhalf">That makes GREP treat them as normal characters and not give
them special meanings. The <a href="#R4.1-RegexOverview">Overview</a>
lists all the special characters.</p>

<h3 id="R4.3-RegexPeriod">4.3&nbsp; <kbd>.</kbd> for Any Character (any regex)</h3>

<p class="brk">The <strong class="key">period (full stop or dot)</strong> in a regex normally matches
any character. Example: <kbd>o.e</kbd> matches lines that contain
&#8220;ode&#8221;, &#8220;one&#8221;, &#8220;ope&#8221;, &#8220;ore&#8221;, and &#8220;owe&#8221;. Of course it also matches lines
that contain &#8220;oae&#8221;, &#8220;o&nbsp;e&#8221;, &#8220;o$e&#8221;, &#8220;o&#180;e&#8221;, and so on.</p>

<p class="nonbrk">In <a href="#R2.4-InputsBinary">binary mode</a>, the period
matches any character without exception.
But in text mode, there are some special cases:</p><ul>
<li>Control-Z is end of file, and therefore
the period doesn&#8217;t match Control-Z in text mode.</li>
<li>Carriage return and/or line feed (ASCII 13 and 10) separate lines.
In normal text mode, the period doesn&#8217;t match them; but in paragraph
mode (<a href="#R5x-OptG"><kbd>/G2</kbd> option</a>), the dot matches the line feed that
separates lines within a paragraph.</li>
</ul>

<p class="brk">If you want to match a literal period, for instance to search for
&#8220;3.50&#8221;, you need a <a href="#R4.11-RegexBackslash">backslash
<kbd>\</kbd></a> before the
period in your regex to turn it into a <a href="#R4.2-RegexNormal">normal
character</a>, like this:</p>

<pre class="secondhalf">
        3\.50</pre>

<p class="secondhalf">A period between <a href="#R4.7-RegexClass">square brackets</a> is just
a <a href="#R4.2-RegexNormal">normal character</a>.
For example, [.?!] matches any of the
characters that end an unquoted sentence.</p>


<h3 id="R4.4-RegexStarPlus">4.4&nbsp; <kbd>*</kbd> or <kbd>+</kbd> for Repetition (any regex)</h3>

<p class="brk">A <strong class="key">plus sign</strong> <kbd>+</kbd> after a character,
<a href="#R4.7-RegexClass">character class</a>,
<a href="#R4.10-RegexSub">subexpression</a>, or
<a href="#R4.11.4-RegexBackslashBackref">back reference</a>
matches one or more occurrences; an <strong class="key">asterisk</strong>
<kbd>*</kbd> matches zero or more occurrences.
In other words, the plus sign means &#8220;one or more&#8221; and the
asterisk means &#8220;any number, including none at all&#8221;.</p>

<p class="nonbrk">(The note on <a href="#R4.6.1-RegexGreedy">greediness</a> below applies
to <kbd>*</kbd> and <kbd>+</kbd> in extended regexes.)</p>

<p class="nonbrk">Example: <kbd>Big.*night</kbd> matches lines that contain
&#8220;Big&#8221; followed by any number of any characters followed by &#8220;night&#8221;.
Since &#8220;any number&#8221; could be zero, that regex also matches lines
that contain &#8220;Bignight&#8221;.</p>

<p class="nonbrk">Examples: <kbd>snor+ing</kbd> matches lines that contain
&#8220;snoring&#8221;, &#8220;snorring&#8221;, &#8220;snorrring&#8221;, and so on, but not &#8220;snoing&#8221;.
<kbd>snor*ing</kbd> matches those and also &#8220;snoing&#8221;.</p>

<p class="brk">Used with a <a href="#R4.7-RegexClass">character class</a> or
<a href="#R4.11.2-RegexBackslashType">character type</a>, the plus
sign <kbd>+</kbd> and asterisk <kbd>*</kbd> match any multiple characters in the class, not only
multiple occurrences of the same character. For instance,
<kbd>sno[rw]+ing</kbd> matches lines that contain &#8220;snowing&#8221;,
&#8220;snorwing&#8221;, &#8220;snowrring&#8221;, and so on.</p>

<p class="nonbrk">Obligatory example: <kbd>[A-Za-z_][A-Za-z0-9_]*</kbd> matches a C
or C++ identifier, which is an English letter or underscore, possibly
followed by any number of letters, digits, and underscores.
(The square brackets enclose <a href="#R4.7-RegexClass">character
classes</a>.)</p>

<p class="nonbrk">But <kbd>+</kbd> and <kbd>*</kbd> are <a href="#R4.2-RegexNormal">normal
characters</a> when used between
<a href="#R4.7-RegexClass">square brackets</a> <kbd>[&nbsp;]</kbd>. For instance, the
regex <kbd>2[*+]2</kbd> matches lines containing &#8220;2+2&#8221; and
&#8220;2*2&#8221;.</p>

<p class="brk">Anything followed by <kbd>*</kbd> always matches. For example,
the regex <kbd>.*</kbd> would match any number of characters
including none, meaning that empty and non-empty lines would match.
<kbd>.*</kbd> is more useful as <em>part</em> of a regex.</p>


<h3 id="R4.5-RegexQuestion">4.5&nbsp; <kbd>?</kbd> for Optional Match (extended regex)</h3>

<p class="brk"> In an extended regex only, a <strong class="key">question mark</strong>
after a character,
<a href="#R4.7-RegexClass">character class</a>,
<a href="#R4.10-RegexSub">subexpression</a>, or
<a href="#R4.11.4-RegexBackslashBackref">back reference</a>
indicates that the construct is optional.
For example, the extended regex <kbd>move?able</kbd> matches
lines containing &#8220;moveable&#8221; or &#8220;movable&#8221;, but not
&#8220;moveeable&#8221;;
<kbd>labou?r</kbd> matches lines containing &#8220;labour&#8221; or
&#8220;labor&#8221;.</p>

<p class="nonbrk">(The note on <a href="#R4.6.1-RegexGreedy">greediness</a> below applies
to <kbd>?</kbd> in extended regexes.)</p>

<p class="nonbrk"><kbd>?</kbd> is a <a href="#R4.2-RegexNormal">normal
character</a> when it occurs within
<a href="#R4.7-RegexClass">square brackets</a> in an extended regex; it&#8217;s
always a normal character in a basic regex.</p>

<p class="brk">Anything followed by <kbd>?</kbd> always matches. For example,
the extended regex <kbd>.?</kbd> would match one character or none.
Since every line contains a string of no characters (whether or not
there are some additional characters on the line), every line would be
a match.</p>

<h3 id="R4.6-RegexBrace">4.6&nbsp; <kbd>{&nbsp;}</kbd> for Repetition (extended regex)</h3>

<p class="brk">In an extended regex only, you can use <strong class="key">curly braces</strong>
<kbd>{&nbsp;}</kbd> after a character,
<a href="#R4.7-RegexClass">character class</a>,
<a href="#R4.10-RegexSub">subexpression</a>, or
<a href="#R4.11.4-RegexBackslashBackref">back reference</a>
to specify repetition. The general form is
<kbd>{<var>minimum</var>,<var>maximum</var>}</kbd> where both
numbers are in the range 0 to 65535 and <var>minimum</var> is less than
<var>maximum</var>. Here are the three variations:</p>

<ul>
<li><p>Specify a minimum and maximum number of repetitions:
<kbd>Aa{1,5}</kbd> matches &#8220;Aa&#8221;, &#8220;Aaa&#8221;,
&#8220;Aaaa&#8221;, &#8220;Aaaaa&#8221;, or &#8220;Aaaaaa&#8221;.</p>

<li><p>Specify an exact number of repetitions:
<kbd>[0-9]{4}</kbd> matches four consecutive digits (not necessarily the
same digit four times).</p>

<li><p>Specify a minimum number of repetitions:
<kbd>^.{5,}$</kbd> matches lines that contain at least five
characters.</p>
</ul>

<p class="brk">The braces are <a href="#R4.2-RegexNormal">normal characters</a> in other
contexts. For instance, <kbd>{,3}</kbd> is just four normal
characters because it doesn&#8217;t match any of the three variations listed
above. The braces are always normal characters inside
<a href="#R4.7-RegexClass">square brackets</a> <kbd>[&nbsp;]</kbd>, and the right brace on its
own is always a normal character.
Both braces are normal characters anywhere in a basic regex.</p>

<p class="brk">You already know convenient shorthand for the three most common
combinations of <var>minimum</var> and <var>maximum</var>:</p><ul>

<li><a href="#R4.4-RegexStarPlus">asterisk <kbd>*</kbd></a> is equivalent
to <kbd>{0,}</kbd></li>

<li><a href="#R4.4-RegexStarPlus">plus sign <kbd>+</kbd></a> is
equivalent to <kbd>{1,}</kbd></li>

<li><a href="#R4.5-RegexQuestion">question mark <kbd>?</kbd></a> is
equivalent to <kbd>{0,1}</kbd></li></ul>


<h4 id="R4.6.1-RegexGreedy">4.6.1&nbsp; Greedy Quantifiers (extended regex)</h4>

<p class="brk">(You can skip this advanced topic, unless you&#8217;re using
<a href="#R4.10-RegexSub">capturing subexpressions</a> or
<a href="#R4.11.4-RegexBackslashBackref">back references</a> in your
extended regex.)</p>

<p class="brk">The quantifiers <kbd>{&nbsp;}</kbd>, <kbd>?</kbd>, <kbd>*</kbd>,
and <kbd>+</kbd> can be &#8220;greedy&#8221; or &#8220;ungreedy&#8221;. A <dfn>greedy
quantifier</dfn>
consumes as many characters as possible without causing the overall
extended regex to fail; an <dfn>ungreedy quantifier</dfn> consumes as few as
possible without causing the overall extended regex to fail.
Because both greedy and ungreedy quantifiers still let the overall
regex succeed if possible, you don&#8217;t need to worry about the
distinction unless you&#8217;re using <a href="#R4.10-RegexSub">capturing
subexpressions</a> and <a href="#R4.11.4-RegexBackslashBackref">back
references</a>.</p>

<p class="nonbrk">In an extended regex, all quantifiers are greedy by default. You can
make a particular quantifier ungreedy by putting a question mark after
it: <kbd>{&nbsp;}?</kbd>, <kbd>??</kbd>, <kbd>*?</kbd>, or
<kbd>+?</kbd>.</p>

<p class="nonbrk">For details and examples, please see the
<a href="pcre.htm#SEC22greedy">Repetition</a> section of the
included file PCRE.HTM.</p>


<h3 id="R4.7-RegexClass">4.7&nbsp; <kbd>[&nbsp;]</kbd> for Character Class (any regex)</h3>

<p class="brk">To match any one of a group of characters, enclose them in
<strong class="key">square brackets</strong> <kbd>[&nbsp;]</kbd>.
Examples: <kbd>[Aa]</kbd> matches a capital or lower-case letter A;
<kbd>sno[wr]ing</kbd> matches lines that contain &#8220;snowing&#8221; or
&#8220;snoring&#8221;.</p>

<p class="nonbrk">Immediately after the opening [ or
<a href="#R4.7.2-RegexClassCaret">[^</a>, a right square bracket is
just a <a href="#R4.2-RegexNormal">normal character</a>. For
example, <kbd>[]abc]</kbd>
matches the character ], a, b, or c.</p>

<p class="nonbrk">A right square bracket after a
left square bracket and at least one other character ends the
character class, though as always you can use a
<a href="#R4.11-RegexBackslash">backslash</a> to make it normal. For
example, <kbd>[abc\]]</kbd>
is the same character class as <kbd>[]abc]</kbd>.</p>

<p class="nonbrk">Finally, a right square bracket with no preceding left square
bracket is a <a href="#R4.2-RegexNormal">normal character</a>.</p>

<p class="brk">In an extended regex, certain
<a href="#R4.11.2-RegexBackslashType">abbreviations</a>
and <a href="#R4.7.4-RegexClassName">class names</a> are available for
commonly used classes.</p>

<h4 id="R4.7.1-RegexClassMinus">4.7.1&nbsp; <kbd>-</kbd> for Character Range (any regex)</h4>

<p class="brk">You can indicate a character range with the
<strong class="key">minus sign or hyphen</strong> <kbd>-</kbd>, ASCII 45.
For example,
<kbd>[0-9]</kbd> matches any single digit, and
<kbd>[a-zA-Z]</kbd> matches any English letter.</p>

<p class="brk">A character class can contain both ranges and single characters,
mixed any way you like as long as each range within the class is written
<var>low</var>-<var>high</var>: <kbd>T-f</kbd> is fine since they are ASCII
84 and 102, but <kbd>f-T</kbd> is invalid.</p>

<p class="nonbrk">There&#8217;s no difference to GREP between writing
out all the characters in a range and using the minus sign to
abbreviate a range: <kbd>[pqrsty]</kbd> and <kbd>[ytsrpq]</kbd> and
<kbd>[yp-t]</kbd> and <kbd>[yq-stp]</kbd> are just some of the ways
to write the same class.</p>

<p class="brk">The minus sign is a <a href="#R4.2-RegexNormal">normal
character</a> outside <a href="#R4.7-RegexClass">square brackets</a>.
It&#8217;s also a normal character if it occurs at the beginning or end of a
class (immediately after the opening <kbd>[</kbd> or <kbd>[^</kbd>
or immediately before the closing <kbd>]</kbd> character).
Otherwise, you can always make it a normal character with a
<a href="#R4.11.1-RegexBackslashEscape">backslash</a>.</p>

<p class="nonbrk">For example, if you want to
search for any of the four arithmetic signs, any of the regexes
<kbd>[+\-*/]</kbd> and <kbd>[-+*/]</kbd> and <kbd>[+*/-]</kbd>
does the job.</p>

<p class="brk">Here&#8217;s one final example:
To match any Western European letter (under most recent versions of
Windows, in North America and Western Europe), a basic regex is</p>
<pre class="secondhalf">
        [a-zA-Z&#192;-&#214;&#216;-&#246;&#248;-&#255;] </pre>
<p class="secondhalf">(Note 1. That regex works fine on the command line with GREP16 or in a file
[<a href="#R5x-OptF"><kbd>/F</kbd> option</a>]
with either GREP. But to enter it on the command line with
GREP32, you must use numeric sequences for the 8-bit characters; see <a href="#R4.12-RegexCmdLine">Special Rules for the Command Line</a>
below.)</p>

<p class="nonbrk">(Note 2. In GREP32, you can avoid the above mess.
Set an appropriate character mapping with the
<a href="#R5x-OptM"><kbd>/M</kbd> option</a> and use
the extended regex <kbd>[[:alpha:]]</kbd>.
(The <a href="#R5x-OptE"><kbd>/E2</kbd> option</a> selects extended
regexes, and
<a href="#R4.7.4-RegexClassName">named character classes</a>
are discussed below.)</p>

<h4 id="R4.7.2-RegexClassCaret">4.7.2&nbsp; <kbd>[^&nbsp;]</kbd> for Negative Character Class (any regex)</h4>

<p class="brk">To match any character that is <em>not</em> in a class, use square
brackets with a <strong class="key">caret or circumflex</strong>, <kbd>^</kbd>,
ASCII 94.</p>

<p class="nonbrk">Examples: <kbd>[^0-9&nbsp;]</kbd> matches any character except a
digit or a space, and <kbd>the[^a-z]</kbd> matches &#8220;the&#8221; followed by
anything except a lower-case letter.</p>

<p class="brk">The negative character class matches any character not within
the square brackets, but it does match a character. It might help to
read it as &#8220;a character other than&nbsp;&#133;&#8221; rather than
just &#8220;not&nbsp;&#133;&#8221;.
For instance,
<kbd>the[^a-z]</kbd> matches &#8220;the&#8221; followed by a character other than a
lower-case letter, but it does not match &#8220;the&#8221; at the end of a line
where &#8220;the&#8221; is not followed by any characters. For further
explanation, please see the <a href="#R4.8.1-LengthyExample">Finding a Word</a>
under the rules for <a href="#R4.8-RegexAnchor"><kbd>^</kbd> and
<kbd>$</kbd></a>, below.</p>

<p class="brk">The caret <kbd>^</kbd> has a <a href="#R4.8-RegexAnchor">different meaning</a> when
it occurs outside square brackets. And when it occurs within square
brackets but not immediately after the opening left square bracket,
the caret is a <a href="#R4.2-RegexNormal">normal character</a>.</p>

<h4 id="R4.7.3-RegexClassCaseblind">4.7.3&nbsp; Character Class and Case-Blind Matching (any regex)</h4>

<p class="brk">If you use the <a href="#R5x-OptI"><kbd>/I</kbd> option</a> to
specify case-blind matching, then the character class
<kbd>[abc]</kbd> matches an upper-case or lower-case a, b, or c.
With the <kbd>/I</kbd> option in effect, <kbd>[^abc]</kbd> matches
any character except A, a, B, b, C, or c.</p>

<h4 id="R4.7.4-RegexClassName">4.7.4&nbsp; Character Class Names (extended regex)</h4>

<p class="brk">Extended regexes support POSIX character class names, such as
<kbd>[:lower:]</kbd> for any lower-case letter and
<kbd>[:^lower:]</kbd> for any character <em>except</em> a lower-case
letter. Notice that you can negate a character class name by putting a
<strong class="key">caret or circumflex</strong> <kbd>^</kbd> after the first colon.</p>

<p class="nonbrk">These are not character classes, but special names that you can
insert within square brackets as (part of) a character class. For
instance, the extended regex</p>

<pre class="secondhalf">
        [AB[:^alpha:]]</pre>
<p class="secondhalf">matches a capital A or B or any non-alphabetic character.</p>

<p class="brk">Here&#8217;s the complete list of <dfn>POSIX character class
names</dfn>. Remember
that they occur inside the normal square brackets for a
<a href="#R4.7-RegexClass">character class</a>. Also remember that they
must be surrounded by <kbd>[:&nbsp;:]</kbd>, or
<kbd>[:^&nbsp;:]</kbd> for negation.</p>

<div class="acchild"><table class="mynbtight">
<tr><td><kbd>word</kbd></td>
    <td>Any &#8220;word&#8221; character (letters, digits and underscore, same as <a href="#R4.11.2-RegexBackslashType">\w</a> and can be redefined with the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>).</td></tr>
<tr><td><kbd>alnum</kbd></td>
    <td>Any letter or digit.</td></tr>
<tr><td><kbd>alpha</kbd></td>
    <td>Any letter.</td></tr>
<tr><td><kbd>lower</kbd></td>
    <td>Any lower case letter.</td></tr>
<tr><td><kbd>upper</kbd></td>
    <td>Any upper case letter.</td></tr>
<tr><td><kbd>digit</kbd></td>
    <td>Any decimal digit (same as <a href="#R4.11.2-RegexBackslashType">\d</a>).</td></tr>
<tr><td><kbd>xdigit</kbd></td>
    <td>Any hexadecimal digit, decimal digits plus A-F and a-f.</td></tr>
<tr><td><kbd>space</kbd></td>
    <td>Any <a href="#whitespace">whitespace character</a> (same as <a href="#R4.11.2-RegexBackslashType">\s</a>).</td></tr>
<tr><td><kbd>graph</kbd></td>
    <td>Any printing character, excluding space.</td></tr>
<tr><td><kbd>print</kbd></td>
    <td>Any printing character, including space.</td></tr>
<tr><td><kbd>punct</kbd></td>
    <td>Any printing character, excluding letters and digits
    and the space character.</td></tr>
<tr><td><kbd>ascii</kbd></td>
    <td>Any ASCII character (see note below).</td></tr>
<tr><td><kbd>cntrl</kbd></td>
    <td>Any control character.</td></tr>
</table></div>

<p class="brk">The exact definitions of the above classes depend on the
character mapping in effect. In the default C locale, the above
classes match only 7-bit characters (character positions 0-127); in
other mappings, 8-bit characters also match.
You can set the character mapping with the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.</p>

<p class="nonbrk">Use the supplied file TEST255 to test the meaning of any
character class in your selected locale; see
examples in the supplied TOUR.BAT file.</p>


<h3 id="R4.8-RegexAnchor">4.8&nbsp; <kbd>^</kbd> and <kbd>$</kbd> for Start and End of Line (any regex)</h3>

<p class="brk">A <strong class="key">caret or circumflex</strong> <kbd>^</kbd>, ASCII 94
at the start of a regex
means that the regex starts at the beginning of a line.
(In paragraph mode, <a href="#R5x-OptG"><kbd>/G2</kbd> option</a>, a caret in a basic regex
matches the beginning of a paragraph and a caret in an extended regex
matches the beginning of a paragraph or a line.)</p>

<p class="nonbrk">A <strong class="key">dollar sign</strong> <kbd>$</kbd>,
ASCII 36 at the end of a regex means that the regex
ends at the end of a line in the file(s) being searched.
(In paragraph mode, <a href="#R5x-OptG"><kbd>/G2</kbd> option</a>, a dollar sign matches
the end of a paragraph.)</p>

<p class="nonbrk">The caret and dollar are sometimes called <strong class="key">anchors</strong> because
they anchor a regex to the start or end of a line (or both). They&#8217;re
also the two best-known examples of
<a href="#R4.11.3-RegexBackslashAssert">assertions</a>, constructs that match
a condition rather than a character.</p>

<p class="nonbrk">Caution: <a href="#R4.1.1-RegexTwoKinds">Basic and extended
regexes</a> treat ^ differently when it&#8217;s not at the start of the
regex, and they treat $ differently when it&#8217;s not at the end of a
regex. In a basic regex, ^ and $ are normal characters when they&#8217;re
not in their &#8220;anchor positions&#8221;; in an extended regex they keep their
anchor meaning (and therefore won&#8217;t match anything). For safety,
always use a <a href="#R4.11.1-RegexBackslashEscape">backslash</a>
before ^ and $ if you want them interpreted as
<a href="#R4.2-RegexNormal">normal characters</a>.</p>

<p class="nonbrk">The caret and dollar are always <a href="#R4.2-RegexNormal">normal
characters</a> inside <a href="#R4.7-RegexClass">square brackets</a>,
except that the caret is special if it&#8217;s the
<a href="#R4.7.2-RegexClassCaret">first character after the left
square bracket</a>.</p>

<p class="brk">Examples: </p>

<ul>

<li><kbd>^[wW]hereas</kbd> matches the word &#8220;Whereas&#8221; or
&#8220;whereas&#8221; at the start of a line, but not in the middle of a line.
Blanks are not ignored, so if you want to find that word whenever it&#8217;s
the first word of the line, you need to use a pattern like
<kbd>^&nbsp;*[wW]hereas</kbd> to allow for indention.

<li><kbd>^$</kbd> matches only lines that contain no characters at
all.</li>

<li><kbd>^&nbsp;*$</kbd> matches lines that contain no characters
or contain only spaces.</li>

<li><kbd>^&nbsp;+$</kbd> matches lines that contain only spaces,
but not empty lines.</li>

<li><kbd>^[A-Za-z]+$</kbd> finds every line that contains
nothing but one or more English letters.</li>

<li><kbd>^&nbsp;*[a-z]+&nbsp;*$</kbd> finds every line that contains
exactly one lower-case English word, possibly preceded or followed by
blanks.</li>

</ul>

<p class="brk">You should probably use <kbd>^</kbd> and <kbd>$</kbd> only in
<a href="#R2.4-InputsBinary">text mode</a> or
<a href="#R2.4-InputsBinary">record-oriented binary mode</a>, not in
<a href="#R2.4-InputsBinary">free-format binary mode</a>.
Also, they make sense only at the beginning and end of your regex. For
those who prefer to live life on the edge, here are the full
rules:</p>

<div class="acchild"><table class="mystd" border="2">
<thead><tr><td></td><th>Basic regex</th><th>Extended regex</th></tr></thead>

<tr><th class="al">With line-oriented text or record-oriented binary
<br>(<kbd>/R0</kbd> or <kbd>/R2</kbd>)</th>

<td><kbd>^</kbd> at the start of a basic regex
matches the start of a line or record; everywhere else
it&#8217;s a <a href="#R4.2-RegexNormal">normal character</a>.
<kbd>$</kbd> at the end of a basic regex matches the end of a line
or record; everywhere else it&#8217;s a <a href="#R4.2-RegexNormal">normal
character</a>.
<p class="nonbrk">In <strong class="key">paragraph mode</strong> (<a href="#R5x-OptG"><kbd>G2</kbd> option</a>),
<kbd>^</kbd> matches only the start of a paragraph and <kbd>$</kbd>
matches only the end of a paragraph.</p></td>

<td><kbd>^</kbd> and <kbd>$</kbd> outside
<a href="#R4.7-RegexClass">square brackets</a> always mean start and end of
a line or record, and if used anywhere but at their &#8220;anchor
positions&#8221;
they won&#8217;t match anything.
<p class="nonbrk">In <strong class="key">paragraph mode</strong> (<a href="#R5x-OptG"><kbd>G2</kbd> option</a>),
<kbd>^</kbd> matches the start of a line or paragraph and <kbd>$</kbd>
matches only the end of a paragraph.</p></td></tr>

<tr><th class="al">With free-form binary<br>(<kbd>/R3</kbd>)</th>

<td><kbd>^</kbd> and <kbd>$</kbd> outside
<a href="#R4.7-RegexClass">square brackets</a> match the start and end
of GREP&#8217;s read buffer, which isn&#8217;t likely to be useful.</td>

<td><kbd>^</kbd> and <kbd>$</kbd> outside
<a href="#R4.7-RegexClass">square brackets</a> match a newline (ASCII 10).</td></tr>

<tr><th class="al">When GREP senses file format<br>(<kbd>/R-1</kbd> or <kbd>/R-2</kbd>)</th>

<td colspan=2>Don&#8217;t use <kbd>^</kbd> and <kbd>$</kbd> in a
regex with the <a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a>.
If you do use them, they work correctly in text files, but
in binary files they match the start and end of every buffer,
arbitrary file positions that are not likely to be useful.</td></tr>

</table></div>

<p class="brk">It&#8217;s a historical artifact that the rules for basic and extended
regexes are not quite the same.</p>

<h4 id="R4.8.1-LengthyExample">4.8.1&nbsp; Finding a Word (Lengthy Example)</h4>

<p class="brk">Suppose you want to find the
word &#8220;the&#8221; in a file, whether in caps or lower case. You can use the
<a href="#R5x-OptI"><kbd>/I</kbd> option</a>
to make the search case blind, and concentrate
on constructing the regexes.</p>

<p class="nonbrk">This section shows progressive refinements of the search technique.
If using GREP32, you might want to skip it and just use the
<a href="#R5x-OptE"><kbd>/E4</kbd> option</a>.</p>

<p class="brk">At first glance,
<kbd>[^a-z]the[^a-z]</kbd> seems adequate: anything other than a
letter, followed by &#8220;the&#8221;, followed by anything but a letter. That
lets in &#8220;the&#8221; and rules out &#8220;then&#8221; and
&#8220;mother&#8221;. But it also rules
out &#8220;the&#8221; at the beginning or end of a line. (Remember that a
<a href="#R4.7.2-RegexClassCaret">negative
character class</a> does insist on matching some character. Read it as
&#8220;any character other than&nbsp;&#133;&#8221; rather than as simply
&#8220;not&nbsp;&#133;&#8221;.) The
solution with basic regexes requires four of them, for &#8220;the&#8221; at the
beginning, middle, or end of a line, or on a line by itself:</p>

<pre class="secondhalf">
        ^the[^a-z]
        [^a-z]the[^a-z]
        [^a-z]the$
        ^the$ </pre>

<p class="secondhalf">To search for just the occurrences of the word &#8220;the&#8221;, put those four
lines in a file and then use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> on GREP.</p>

<p class="brk">But this becomes
<strong class="key">much easier with the power of extended regular expressions</strong>
(<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>, GREP32 only).
You can search for the word &#8220;the&#8221;, not embedded in larger words, with
one extended regex:</p>
<pre class="secondhalf">
        grep /E2 \bthe\b </pre>
<p class="secondhalf">Read this as &#8220;a <a href="#R4.11.3-RegexBackslashAssert">word
boundary</a>, followed by t-h-e, followed by a
word boundary.&#8221; As you would expect, start and end of line count as
word boundaries.</p>

<p class="brk">Easiest of all, the <a href="#R5x-OptE"><kbd>/E4</kbd> option</a> (GREP32 only)
supplies the <kbd>\b</kbd> sequences for you:</p>
<pre class="secondhalf">
        grep /E4 the </pre>

<p class="secondhalf">There might be one problem with the above regular
expression: it would not match &#8220;the6&#8221; or &#8220;the_&#8221; since the underscore
and the digits are considered
<a href="#R4.11.2-RegexBackslashType">&#8220;word&#8221; characters</a>.
(This is how the <kbd>-w</kbd> option works in most UNIX greps,
too.)
It&#8217;s not likely you&#8217;d get such sequences in a text file, but if you
want to be absolutely precise you should use something like the
<a href="#R5x-OptM"><kbd>/Mfr,alpha</kbd> option</a> to define
&#8220;word&#8221; characters as just letters.</p>


<h3 id="R4.9-RegexBar">4.9&nbsp; <kbd>|</kbd> for Alternatives (extended regex)</h3>

<p class="brk">In an extended regex only, the <strong class="key">vertical bar or pipe</strong>
<kbd>|</kbd>, ASCII 124 separates two or more alternatives. The
extended regex matches lines that contain any of the alternatives.
It&#8217;s legal for an alternative to be empty, and this can be useful in
<a href="#R4.10-RegexSub">subexpressions</a>.</p>

<p class="nonbrk">Example: the extended regex <kbd>cat|dog</kbd> matches any
input line that contains the string &#8220;cat&#8221; or &#8220;dog&#8221;.</p>

<p class="nonbrk">If you want alternatives for part of an extended regex,
use <a href="#R4.10-RegexSub">parentheses or round brackets</a> to form a
subexpression. See the examples in the section on
<a href="#R4.10-RegexSub">subexpressions</a>.</p>

<p class="nonbrk">If the alternatives must occur at the start or
end of a line, the anchor needs to be in each alternative. Example: to
match lines that start with &#8220;cat&#8221; or &#8220;dog&#8221;, use <kbd>^cat|^dog</kbd>
as your extended regex. Another way to express that is with a
subexpression, <kbd>^(cat|dog)</kbd>.</p>

<p class="brk">Efficiency note: Alternatives can be slower than character classes.
The extended regexes <kbd>bar|bat</kbd> and <kbd>ba(r|t)</kbd>
are logically equivalent to the basic regex
<kbd>ba[rt]</kbd>, but the latter generally executes faster
(even as an extended regex).
You may or may not notice any time difference, depending on the speed
of your computer and the size of the files that you&#8217;re searching.</p>

<p class="brk">Caution: The vertical bar <kbd>|</kbd> has special meaning on the
command line. If your operating system doesn&#8217;t let you override
that meaning, use the
<a href="#R5x-OptF"><kbd>/F-</kbd> option</a> to enter your regex from the
keyboard, or see <a href="#R4.11.5-RegexBackslashEncode">Backslash for
Character Encoding</a> below.</p>


<h3 id="R4.10-RegexSub">4.10&nbsp; <kbd>(&nbsp;)</kbd> for Subexpressions (extended regex)</h3>

<p class="brk">In an extended regex only, the
<strong class="key">parentheses or round brackets</strong> <kbd>(&nbsp;)</kbd>
have several uses, but only two
are discussed in this <cite>GREP Manual</cite>.
(Parentheses are <a href="#R4.2-RegexNormal">normal characters</a>
anywhere in a basic regex, and inside <a href="#R4.7-RegexClass">square
brackets</a> in an extended regex.)</p>

<p class="brk">The first use is straightforward: to set up
<a href="#R4.9-RegexBar">alternatives</a> as part of an extended regex. For
example, the extended regex</p>
<pre class="secondhalf">
        the quick (brown fox|white rabbit) </pre>

<p class="secondhalf">matches lines containing either &#8220;the quick brown fox&#8221;
or &#8220;the quick
white rabbit&#8221;. Here&#8217;s another example, adapted from the PCRE manual
page:</p>

<pre class="secondhalf">
        cat(aract|erpillar|)s </pre>

<p class="secondhalf">matches lines containing &#8220;cataracts&#8221;,
&#8220;caterpillars&#8221;, or &#8220;cats&#8221;.</p>

<p class="brk">The second use of parentheses is to set up a &#8220;capturing
subpattern&#8221;,
which can be referred to with a &#8220;back reference&#8221;; see
<a href="#R4.11.4-RegexBackslashBackref">Backslash for Back References</a>,
below.</p>


<h4 id="R4.10.1-RegexSubAdvanced">4.10.1&nbsp; <kbd>(&nbsp;)</kbd> Advanced Topics (extended regex)</h4>

<p class="brk">The parentheses or round brackets have several other
meanings in an extended regex.
To save space in this <cite>GREP Manual</cite>, they are not documented here
but you can read about them in the accompanying PCRE.HTM file:</p>

<ul>

<li><a href="pcre.htm#SEC24">Assertions</a> beyond the <a href="#R4.11.3-RegexBackslashAssert">simple ones with backslash</a>.</li>

<li><a href="pcre.htm#SEC26">Conditional subpatterns</a>.</li>

<li><a href="pcre.htm#SEC25">Once-only subpatterns</a>.</li>

<li><a href="pcre.htm#SEC28">Recursive patterns</a>.</li>

<li><a href="pcre.htm#SEC27">Comments</a>.</li>

<li><a href="pcre.htm#SEC20">Internal options</a>.</li>

</ul>

<h3 id="R4.11-RegexBackslash">4.11&nbsp; The Backslash <kbd>\</kbd></h3>

<p class="brk">In a basic regex, the backslash (<kbd>\</kbd>) has only one use:
<a href="#R4.11.1-RegexBackslashEscape">&#8220;escaping&#8221; a special
character</a> to treat it as a <a href="#R4.2-RegexNormal">normal
character</a>.</p>

<p class="brk">In an extended regex, the backslash has five uses:
<a href="#R4.11.1-RegexBackslashEscape">&#8220;escaping&#8221; a special
character</a>,
designating <a href="#R4.11.2-RegexBackslashType">character types</a>,
<a href="#R4.11.3-RegexBackslashAssert">asserting a word boundary</a>
or other conditions,
making a <a href="#R4.11.4-RegexBackslashBackref">back reference</a>,
and
<a href="#R4.11.5-RegexBackslashEncode">encoding ASCII
characters</a>.</p>


<h4 id="R4.11.1-RegexBackslashEscape">4.11.1&nbsp; Backslash as Escape (any regex)</h4>

<p class="brk">When the backslash precedes any
<a href="#R4.1-RegexOverview">special character</a> it makes that character
<a href="#R4.2-RegexNormal">normal</a>. For example, the regex <kbd>2+2</kbd> normally matches a
string of two or more 2s. (The <kbd>2+</kbd> construct means
&#8220;<a href="#R4.4-RegexStarPlus">one or more occurrences</a> of the character
2&#8221;.) If you want to match that middle character as an actual plus
sign, you must &#8220;escape&#8221; it with a backslash: <kbd>2\+2</kbd>.</p>

<p class="nonbrk">If you want to match a backslash itself, you escape it in the same
way. For example, the regex <kbd>^c:\\</kbd> matches every line that begins
with &#8220;c:\&#8221;.</p>

<p class="nonbrk">The backslash functions as an escape both inside and outside of
<a href="#R4.7-RegexClass">square brackets</a>. If you&#8217;re not sure when
a non-alphabetic character like <kbd>]</kbd> or <kbd>$</kbd> is
special and when it&#8217;s not, just precede it with a backslash to
make it a <a href="#R4.2-RegexNormal">normal character</a> whether it
already was one or not.</p>

<p class="brk">Example: To match any of the four signs of arithmetic, you might write
the regex <kbd>[+-*/]</kbd>. But that minus sign has a
<a href="#R4.7.1-RegexClassMinus">special meaning</a> inside square brackets.
To treat it as a normal character you must escape it with the
backslash, like this: <kbd>[+\-*/]</kbd>.</p>

<p class="brk">This is the only use of the backslash in basic regexes; the
others that follow all relate to extended regexes.</p>

<h4 id="R4.11.2-RegexBackslashType">4.11.2&nbsp; Backslash for Character Types (extended regex)</h4>

<p class="brk">Many regexes involve a type of character: digit (or
not), blank (or not), and so forth. While you can always use ordinary
<a href="#R4.7-RegexClass">character classes</a>, in an extended regex you
can also use these shortcuts on their own or as part of a character
class:</p>

<div class="acchild"><table class="mynbtight">
<tr><td><kbd>\w</kbd></td>
    <td>Any &#8220;word&#8221; character, meaning any letter or decimal digit or
        an underscore&nbsp;&#8212; can be redefined with the
        <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.</td></tr>
<tr><td><kbd>\W</kbd></td>
    <td>Any character except a &#8220;word&#8221; character.</td></tr>
<tr><td><kbd>\d</kbd></td>
    <td>Any of the decimal digits.</td></tr>
<tr><td><kbd>\D</kbd></td>
    <td>Any character except a decimal digit.</td></tr>
<tr><td><kbd>\s</kbd></td>
    <td>Any whitespace character: (see below).</td></tr>
<tr><td><kbd>\S</kbd></td>
    <td>Any character except a whitespace character.
    <br>The definition of a <dfn id="whitespace">whitespace
    character</dfn> depends on the locale. In GREP16, and by default
    in GREP32, the whitespace characters are ASCII 9-13 and 32 (TAB,
    LF, VT, FF, CR, and space). You can change the locale in GREP32
    with the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>. For instance, with <kbd>/Mfr</kbd> the
    non-breaking space (160) is added to the above list of whitespace
    characters. To list the whitespace characters in a given locale,
    use the supplied TEST255 file with this GREP command:
    <pre class="secondhalf">
            grep32 /R2 /W21 /E2 ^\s TEST255</pre>
    </td></tr>
</table></div>

<p class="brk">The exact definitions of the above types depend on the
character mapping in effect. In the default C locale, no 8-bit
characters (characters 128-255) are considered as possible
"word" characters, digits, or whitespace; in
other mappings, some 8-bit characters also match.
You can set the character mapping with the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.
Use the supplied file TEST255 to test the meaning of any
character type in your selected locale; see
examples in the supplied TOUR.BAT file.</p>


<p class="brk">Example: To scan a file for four-digit numbers, your regex
could repeat the <kbd>\d</kbd> four times or use
<a href="#R4.6-RegexBrace">curly braces</a> <kbd>{&nbsp;}</kbd>:
<kbd>\d\d\d\d</kbd> or <kbd>\d{4}</kbd>.</p>

<p class="nonbrk">Did you spot the problem with this example? Yes, either of
those extended regexes matches lines containing four-digit numbers.
But it also matches lines containing five-digit numbers, since a
five-digit number contains four consecutive digits. One way to
match numbers of exactly four digits is to mark them as being preceded
by start or line or a non-digit, and followed by end of line or a
non-digit:</p>

<pre class="secondhalf">
        (^|\D)\d{4}($|\D) </pre>

<p class="secondhalf">Of course, if you know something about the files you&#8217;re scanning
you may not need to get so elaborate.</p>

<p class="brk">Example: To scan for four hexadecimal digits,
use the extended regex</p>

<pre class="secondhalf">
        [\da-fA-F]{4} </pre>

<p class="secondhalf">(This one has the same problem as the previous example: it also
matches five or more hex digits. Fixing it is left as an exercise for
the reader!)</p>

<h4 id="R4.11.3-RegexBackslashAssert">4.11.3&nbsp; Backslash for Assertions (extended regex)</h4>

<p class="brk">The <strong class="key">assertions</strong> in this section look like the above
<a href="#R4.11.2-RegexBackslashType">character types</a>, but there&#8217;s an
important difference. The difference is that while a character type
matches a character of specified type, an assertion matches a position
in the line and doesn&#8217;t &#8220;consume&#8221; a character. (You already know two
examples of assertions, namely the anchors
<a href="#R4.8-RegexAnchor"><kbd>^</kbd> and <kbd>$</kbd></a>.)</p>

<div class="acchild"><table class="mynbtight">
<tr><td class="tightl"><kbd>\b</kbd></td>
    <td>Word boundary, namely the transition between a word and a
    non-word character or vice versa, or the beginning or end of line
    if the adjacent character is a <a href="#R4.11.2-RegexBackslashType">word
    character</a>.</td></tr>
<tr><td class="tightl"><kbd>\B</kbd></td>
    <td>Not a word boundary.</td></tr>
<tr><td class="tightl"><kbd>\A</kbd></td>
    <td>Similar to <kbd>^</kbd> but matches start of
    buffer even in free-form binary mode
    (<a href="#R5x-OptR"><kbd>/R3</kbd> option</a>).</td></tr>
<tr><td class="tightl"><kbd>\Z</kbd></td>
    <td>Similar to <kbd>$</kbd> but matches end of
    buffer even in free-form binary mode
    (<a href="#R5x-OptR"><kbd>/R3</kbd> option</a>).</td></tr>
</table></div>

<p class="brk">These assertions are not valid inside <a href="#R4.7-RegexClass">square
brackets</a>, and in fact <kbd>\b</kbd> has a different meaning
inside a character class; see <a href="#R4.11.5-RegexBackslashEncode">Backslash
for Character Encoding</a>, below.</p>

<h4 id="R4.11.4-RegexBackslashBackref">4.11.4&nbsp; Backslash for Back References (extended regex)</h4>

<p class="brk">Outside <a href="#R4.7-RegexClass">square brackets</a>, a backslash
followed by a digit other than 0 is interpreted as a back reference to
a <a href="#R4.10-RegexSub">capturing subpattern</a> in the regex. For
example, <kbd>\6</kbd> refers to the sixth capturing subpattern in
the extended regex.</p>

<p class="nonbrk">Example (from the PCRE man page): the extended regex</p>
<pre class="secondhalf">
        (sens|respons)e and \1ibility </pre>
<p class="secondhalf">matches &#8220;sense and sensibility&#8221; or &#8220;response and
responsibility&#8221; but
not &#8220;sense and responsibility&#8221;. A back reference always refers to the
actual matching subpattern in this particular instance, not to just
any alternative.</p>

<p class="brk">Example: U.S. toll-free area codes are 800, 888, 877, 866 (and soon
855). The regex 8[08765]{2} would be wrong because it matches
strings like &#8220;867&#8221; and &#8220;808&#8221;. You need a back reference to ensure that
the third digit is the same as the second:
<pre class="secondhalf">
        8([08765])\1</pre>
<p class="secondhalf">is your regex. That says you must have an 8, followed by 0, 8, 7, 6,
or 5, followed by a second occurrence of the same digit.</p>

<p class="brk">A &#8220;back reference&#8221; can actually be a forward reference: any of
<kbd>\1</kbd> through <kbd>\9</kbd> refers to the first through
ninth capturing subpattern in the extended regex, even if that
subpattern comes after the &#8220;back reference&#8221; in the regex. But
<kbd>\10</kbd> and greater can refer only to subpatterns that
precede the back reference. If something looks like a back reference
but the number is greater than 9 and greater than the number of
capturing subexpressions to the left of it, it is read as
<a href="#R4.11.5-RegexBackslashEncode">an encoded character</a> in octal.</p>

<h4 id="R4.11.5-RegexBackslashEncode">4.11.5&nbsp; Backslash for Character Encoding (extended regex)</h4>

<p class="brk">The last use of backslash in extended regexes is also
the ugliest. You can use a backslash to
encode certain characters, either non-printing characters or those
that DOS or Windows doesn&#8217;t allow in command arguments.</p>

<p class="nonbrk">But be aware that you may not need these rules&nbsp;&#8212;
if you use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> to enter
a regex from the keyboard or in a file, you can include any character
in it except NUL (ASCII 0), CR (ASCII 13), LF (ASCII 10), and Control-Z
(ASCII 26)..</p>

<p class="nonbrk">Also note that these rules for extended regexes are quite
different from the <a href="#R4.12-RegexCmdLine">Special Rules for the
Command Line</a>. It&#8217;s an unfortunate
incompatibility, but neither can be changed because PCRE is a supplied
library for extended regexes and users rely on existing behavior of
basic regexes.</p>

<p class="brk">Except as noted, each of these sequences has the indicated meaning
anywhere in an extended regex:</p>

<table class="mynb">
<tr><td><kbd>\a</kbd></td>
    <td>&#8220;Alarm&#8221;, the BEL character, ASCII 7.</td></tr>
<tr><td><kbd>\b</kbd></td>
    <td>Backspace character, ASCII 8, but only inside
    <a href="#R4.7-RegexClass">square brackets</a>. Outside square brackets
    it is an <a href="#R4.11.3-RegexBackslashAssert">assertion</a>..</td></tr>
<tr><td><kbd>\c</kbd><var>x</var></td>
    <td>A control character. If <var>x</var> is a letter, it&#8217;s straightforward:
    <kbd>\cb</kbd> and <kbd>\cB</kbd> are both Control-B, ASCII 2.
    If <var>x</var> is not a letter, it is XORed with 64 (hex 40)..</td></tr>
<tr><td><kbd>\e</kbd></td>
    <td>Escape, ASCII 27.</td></tr>
<tr><td><kbd>\f</kbd></td>
    <td>Form feed, ASCII 12.</td></tr>
<tr><td><kbd>\n</kbd></td>
    <td>&#8220;Newline&#8221;, line feed, ASCII 10.
    This character is never seen in a text file, since it marks a
    line break, but it can occur in a <a href="#R2.4-InputsBinary">binary
    file</a>.</td></tr>
<tr><td><kbd>\r</kbd></td>
    <td>Carriage return, ASCII 13.
    This character is never seen in a text file, since it marks a
    line break, but it can occur in a <a href="#R2.4-InputsBinary">binary
    file.</a>.</td></tr>
<tr><td><kbd>\t</kbd></td>
    <td>Tab, ASCII 9.</td></tr>
<tr><td><kbd>\x</kbd><var>hh</var></td>
    <td>The character with the given hex code <var>hh</var> (zero, one, or two
    digits).
    Examples: <kbd>\x7c</kbd> or <kbd>\x7C</kbd> is hex 7C (ASCII 124), the
    <kbd>|</kbd> character. <kbd>\x</kbd> or <kbd>\x0</kbd> or
    <kbd>\x00</kbd> is the NUL character, ASCII 0.</td></tr>
<tr><td><kbd>\0</kbd><var>dd</var></td>
    <td>The character whose code is an octal number of one to three digits. <kbd>\032</kbd> is
    Control-Z, ASCII 26.</td></tr>
<tr><td><kbd>\</kbd><var>ddd</var></td>
    <td>This sequence, a backslash followed by one to three digits where the first one is not zero,
    is complicated. Outside <a href="#R4.7-RegexClass">square brackets</a>,
    it&#8217;s read as a decimal number and is interpreted as a
    <a href="#R4.11.4-RegexBackslashBackref">back reference</a> (above) if
    possible. Otherwise, or always inside square brackets, it&#8217;s read as an
    octal number and the least significant 8 bits are taken as its
    value. Examples: <kbd>\7</kbd> is a back reference.
    <kbd>\11</kbd> is a back reference if there have already been eleven
    capturing subpatterns; otherwise it&#8217;s octal 11, ASCII 9, the tab
    character.</td></tr>
</table>


<h3 id="R4.12-RegexCmdLine">4.12&nbsp; Special Rules for the Command Line</h3>

<p class="brk">GREP defines some special sequences starting with a
backslash <kbd>\</kbd> to let you get problem characters into your
regex.</p>

<p class="nonbrk">These rules date back to a much earlier release of GREP.
Better ways are available now (see the <a href="#R5x-OptF"><kbd>/F</kbd> option</a>),
but the special rules are maintained for upward
compatibility.</p>

<p class="nonbrk">When the special rules are in effect, you can find out how GREP
applied them by using the <a href="#R5x-OptD"><kbd>/D</kbd> option</a>
and looking for the &#8220;massaged&#8221; string or regex.</p>

<p class="brk">The special rules are in effect by default, but you can turn
them on or off with the <a href="#R5x-OptE"><kbd>/E</kbd> option</a>. The special rules never apply
when regexes are read from file or keyboard (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>).</p>


<h4 id="R4.12.1-RegexCmdLineWhen">4.12.1&nbsp; When Do You Need the Special Rules?</h4>

<p class="brk">You need them only when you enter a regex or search
string on the command line (no <a href="#R5x-OptF"><kbd>/F</kbd> option</a>),
and either of these is true:</p>

<ul>

<li><p>Your regex or search string contains characters like
<kbd>&lt;</kbd>, <kbd>|</kbd>, <kbd>&gt;</kbd>, space, and
semicolon that are reserved by the command prompt, or</p></li>

<li><p>your regex contains 8-bit characters (ASCII 128 and above) and
you&#8217;re running GREP32.</p></li>

</ul>

<p class="brk">When you select extended regexes (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>),
you probably don&#8217;t want the special rules given
<a href="#R4.12.2-RegexCmdLineWhat">below</a>. Extended regexes come with
their own ways of using a <a href="#R4.11.5-RegexBackslashEncode">backslash
for character encoding</a>, and therefore the
<a href="#R5x-OptE"><kbd>/E2</kbd> option</a> turns off the special rules automatically.</p>


<h4 id="R4.12.2-RegexCmdLineWhat">4.12.2&nbsp; What Exactly Are the Special Rules?</h4>

<p class="brk">Special &#8220;escape sequences&#8221; give you a way to enter
special characters in a regex on the command line, as follows:</p>

<div class="acchild"><table class="mynbtight">
<tr><th class="al">instead of</th>
    <th class="al">you can use any of</th></tr>
<tr><td><kbd>&lt;</kbd> (less)</td>
    <td><kbd>\l \60&nbsp; \0x3C \074</kbd></td></tr>
<tr><td><kbd>&gt;</kbd> (greater)</td>
    <td><kbd>\g \62&nbsp; \0x3E \076</kbd></td></tr>
<tr><td><kbd>|</kbd> (vertical bar)</td>
    <td><kbd>\v \124 \0x7C \0174</kbd></td></tr>
<tr><td><kbd>"</kbd> (double quote)</td>
    <td><kbd>\" \34&nbsp; \0x22 \042</kbd></td></tr>
<tr><td><kbd>,</kbd> (comma)</td>
    <td><kbd>\c \44&nbsp; \0x2C \054</kbd></td></tr>
<tr><td><kbd>;</kbd> (semicolon)</td>
    <td><kbd>\i \59&nbsp; \0x3B \073</kbd></td></tr>
<tr><td><kbd>=</kbd> (equal)</td>
    <td><kbd>\q \61&nbsp; \0x3D \075</kbd></td></tr>
<tr><td>(the space character)</td>
    <td><kbd>\s \32&nbsp; \0x20 \040</kbd></td></tr>
<tr><td>(tab)</td>
    <td><kbd>\t \9&nbsp;&nbsp; \0x09 \011</kbd></td></tr>
<tr><td>(escape)</td>
    <td><kbd>\e \27&nbsp; \0x1B \033</kbd></td></tr>
</table></div>

<p class="brk">You can enter any character as a numeric sequence, not just the
special characters in the above list. Use
decimal, hex (leading <kbd>0x</kbd>), or
octal (leading zero). Example: capital A would be
<kbd>\65</kbd>, <kbd>\0x41</kbd>, or <kbd>\0101</kbd>.
<kbd>\0</kbd> is not allowed; either code something like
<kbd>[^\1-\255]</kbd> (&#8220;any character except ASCII 1 to 255&#8221;) in
your basic regex, or use an
<a href="#R4.11.5-RegexBackslashEncode">extended regex</a>.</p>

<p class="brk">There are additional problems with
<a href="#R4.1.3-RegexQuotes">quotes in a regex</a>, because the
command line
interprets them differently from GREP, strips them out, or even welds
command-line arguments together in ways that can surprise you.
Please see <a href="#R4.1.3-RegexQuotes">Quotes in a Regex</a> for
discussion and some strategies for coping.</p>


<h2 id="R5-Options">5. Options</h2>

<p class="brk">The first section tells you
<a href="#R5.1-OptSpecify">how to specify options</a>, and the last four
describe the options in detail by functional groups:
<a href="#R5.2-OptInFile">input file options</a>,
<a href="#R5.3-OptPattern">pattern-matching options</a>,
<a href="#R5.4-OptOutput">output options</a>, and
<a href="#R5.5-OptGeneral">general options</a>.
</p>

<div class="Summary" id="TOC5"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R5.1-OptSpecify">5.1&nbsp; Specifying Options</a>
<ul>
<li><a href="#R5.1.1-OptCmdLine">5.1.1&nbsp; On the Command Line</a></li>
<li><a href="#R5.1.2-Envvar">5.1.2&nbsp; In an Environment Variable (ORS_GREP)</a>
<ul>
<li><a href="#R5.1.2-EnvvarSetting">Setting the Environment Variable</a></li>
<li><a href="#R5.1.2-EnvvarOverride">Overriding Environment Variable Options on the Command Line</a></li>
</ul></li>
</ul></li>
<li><a href="#R5.2-OptInFile">5.2&nbsp; Input File Options</a>
<ul>
<li><a href="#R5x-OptAt"><kbd>/@-</kbd> or <kbd>/@</kbd><var>file</var>&nbsp; Take Input Filespecs from Standard Input or File</a></li>
<li><a href="#R5x-OptA"><kbd>/A</kbd>&nbsp; Include Hidden and System Files</a></li>
<li><a href="#R5x-OptG"><kbd>/G</kbd><var>n</var>&nbsp; Read Variable-Length Text Lines or Paragraphs</a>
<ul>
<li><a href="#R5-G2mode">More about Paragraph Mode (<kbd>/G2</kbd>)</a></li>
</ul></li>
<li><a href="#R5x-OptR"><kbd>/R</kbd><var>n</var>&nbsp; Read Input Files as Binary or Text</a></li>
<li><a href="#R5x-OptS"><kbd>/S</kbd>&nbsp; Scan Subdirectories</a></li>
<li><a href="#R5x-OptW"><kbd>/W</kbd><var>width</var> or <kbd>/W</kbd><var>txwid,bnwid</var>&nbsp; Specify Line Width or Binary Block Length</a>
<ul>
<li><a href="#R5-R0mode">Text Mode (<kbd>/W</kbd> Option without <kbd>/R</kbd> or with <kbd>/R0</kbd>)</a></li>
<li><a href="#R5-R2mode">Record-oriented Binary Mode (<kbd>/W</kbd> Option with <kbd>/R2</kbd>)</a></li>
<li><a href="#R5-R3mode">Free-form Binary Mode (<kbd>/W</kbd> Option with <kbd>/R3</kbd>)</a></li>
<li><a href="#R5-R-1mode">When GREP Chooses File Mode (<kbd>/W</kbd> Option with <kbd>/R-1</kbd> or <kbd>/R-2</kbd>)</a></li>
</ul></li>
<li><a href="#R5x-OptX"><kbd>/X</kbd><var>pattern</var>&nbsp; Exclude Matching Files from Scan</a></li>
</ul></li>
<li><a href="#R5.3-OptPattern">5.3&nbsp; Pattern-Matching Options</a>
<ul>
<li><a href="#R5x-OptE"><kbd>/E</kbd><var>regex_level</var>&nbsp; Select Extended Regexes or Strings</a></li>
<li><a href="#R5x-OptF"><kbd>/F-</kbd> or <kbd>/F</kbd><var>file</var>&nbsp; Read Regexes from Keyboard or File</a></li>
<li><a href="#R5x-OptI"><kbd>/I</kbd>&nbsp; Ignore Case in Matching</a></li>
<li><a href="#R5x-OptM"><kbd>/M</kbd><var>loc</var> or <kbd>/M</kbd><var>loc,word</var>&nbsp; Specify Character Mapping and Define &#8220;Word&#8221;</a></li>
<li><a href="#R5x-OptV"><kbd>/V</kbd>&nbsp; Display Lines That Don&#8217;t Contain a Match</a></li>
<li><a href="#R5x-OptY"><kbd>/Y</kbd>&nbsp; Multiple Regexes Must All Match</a></li>
</ul></li>
<li><a href="#R5.4-OptOutput">5.4&nbsp; Output Options</a>
<ul>
<li><a href="#R5x-OptB"><kbd>/B</kbd>&nbsp; Display a Header for Every File Scanned</a></li>
<li><a href="#R5x-OptC"><kbd>/C</kbd>&nbsp; Display the Hit Count, Not the Actual Hits</a></li>
<li><a href="#R5x-OptH"><kbd>/H</kbd>&nbsp; Don&#8217;t Display Filespecs in Output</a></li>
<li><a href="#R5x-OptJ"><kbd>/J</kbd><var>n</var>&nbsp; Display Just the Parts of Each Line That Match</a>
<ul>
<li><a href="#R5-Jevery">Displaying Every Match in a File with <kbd>/J2</kbd> or <kbd>/J3</kbd></a></li>
</ul></li>
<li><a href="#R5x-OptK"><kbd>/K</kbd><var>count</var>&nbsp; Report Only the First Few Hits Per File</a></li>
<li><a href="#R5x-OptL"><kbd>/L</kbd>&nbsp; List Files That Contain Hits, Not the Actual Hits</a>
<ul>
<li><a href="#R5x-Lmultregex">Finding Files That Match a List of Regexes</a></li>
</ul></li>
<li><a href="#R5x-OptN"><kbd>/N</kbd>&nbsp; Show Line Numbers with Hits</a></li>
<li><a href="#R5x-OptO"><kbd>/O</kbd>&nbsp; Set Output Format</a></li>
<li><a href="#R5x-OptP"><kbd>/P</kbd><var>before,after</var>&nbsp; Show Context Lines around Matching Lines</a></li>
<li><a href="#R5x-OptU"><kbd>/U</kbd>&nbsp; UNIX-style Output: Show Filespec with Each Hit</a></li>
</ul></li>
<li><a href="#R5.5-OptGeneral">5.5&nbsp; General Options</a>
<ul>
<li><a href="#R5x-OptD"><kbd>/D</kbd><var>file</var> or <kbd>/D-</kbd> or <kbd>/D</kbd>&nbsp; Display Debugging Output</a></li>
<li><a href="#R5x-OptQ"><kbd>/Q</kbd><var>level</var>&nbsp; Suppress the Logo and Unwanted Warnings</a></li>
<li><a href="#R5x-OptZ"><kbd>/Z</kbd>&nbsp; Reset All Options</a></li>
<li><a href="#R5x-Opt0"><kbd>/0</kbd> or <kbd>/1</kbd>&nbsp; Set ERRORLEVEL to Show Whether Matches Were Found</a></li>
<li><a href="#R5x-Opt3"><kbd>/3</kbd>&nbsp; Set ERRORLEVEL to 3 for Warnings</a></li>
<li><a href="#R5x-OptHelp"><kbd>/?</kbd>&nbsp; Display Help</a></li>
</ul></li>
</ul>
</div>
<h3 id="R5.1-OptSpecify">5.1&nbsp; Specifying Options</h3>

<h4 id="R5.1.1-OptCmdLine" class="secondheader">5.1.1&nbsp; On the Command Line</h4>

<p class="brk">On the <a href="#R1-CmdLine">command line</a>, options can
appear anywhere, before or after the <a href="#R4-Regex">regex</a> and
the <a href="#R2-Inputs">input files</a>. All options are processed
before any files are read.</p>

<p class="brk">You have a lot of freedom about how you enter options: use
a leading hyphen or slash, use upper- or lower-case
letters, leave spaces between options or combine them. For
instance, the following are just some of the different ways of turning
on the <a href="#R5x-OptP"><kbd>/P3</kbd> option</a> and
<a href="#R5x-OptB"><kbd>/B</kbd> option</a>:</p>
<pre class="secondhalf">
        /p3 -b    /b/P3    /p3B    -B/P3    -P3 -b </pre>

<p class="brk">For clarity, you should always use a hyphen or slash before the numeric
<a href="#R5x-Opt0"><kbd>/0</kbd> option</a> and
<a href="#R5x-Opt1"><kbd>/1</kbd> option</a>.
Example: <kbd>/E0</kbd> means the
<a href="#R5x-OptE"><kbd>/E</kbd> option</a> with a value of 0, but
<kbd>/E/0</kbd> means the <kbd>/E</kbd> option with no value
specified, followed by the <kbd>/0</kbd> option.</p>

<p class="brk">When you set up GREP commands in a
<strong class="key">batch file or script or a makefile</strong>,
I strongly recommend you begin each GREP call with the <a href="#R5x-OptZ"><kbd>/Z</kbd> option</a>.
This will neutralize any options that may be stored in the
<a href="#R5.1.2-Envvar">environment variable</a>.</p>



<h4 id="R5.1.2-Envvar">5.1.2&nbsp; In an Environment Variable (ORS_GREP)</h4>

<p class="brk"><a href="grep101.htm#License">Registered users</a> who
use certain <a href="#R5-Options">options</a> frequently can put them in
the ORS_GREP environment variable. You have the same
freedom as on the command line: leading slashes or hyphens, space
separation or options run together, caps or lower case.</p>

<p class="nonbrk">Example:
If you prefer to have GREP sense the type of each file
(<a href="#R5x-OptR"><kbd>/R-1</kbd> option</a>) and you prefer
UNIX-style output (<a href="#R5x-OptU"><kbd>/U</kbd> option</a>)
with line numbers (<a href="#R5x-OptN"><kbd>/N</kbd> option</a>),
then you want to set the environment variable as</p>
<pre class="secondhalf">
        /R-1UN </pre>
<p class="secondhalf">or</p>
<pre class="secondhalf">
        /R-1 /U /N </pre>
<p class="secondhalf">or similar.</p>

<p class="brk">Only options can be put in the environment variable. If you want to
store a regex, put it in a file and put
the <a href="#R5x-OptF"><kbd>/F<var>file</var></kbd> option</a>
in the environment variable; if you want to store a list of
<a href="#R2.1-InputsNamed">input filespecs</a>, put them in a file and
put the <a href="#R5x-OptAt"><kbd>/@<var>file</var></kbd> option</a> in the
environment variable.</p>

<h5 id="R5.1.2-EnvvarSetting">Setting the Environment Variable</h5>

<p class="brk">You can use a SET command on the command line to set the
environment variable <strong class="key">temporarily for that session</strong>. For example:</p>
<pre class="secondhalf">
        set ORS_GREP=/u /i </pre>

<p class="brk">In recent versions of Windows, to set an environment variable
<strong class="key">permanently</strong>, right-click <i>Computer</i> or <i>This PC</i> and select
<i>Properties</i>, then <i>Advanced system settings</i>, then
<i>Environment Variables</i>. Set the variable in the user list or the
system list. This will be effective in any command windows that you
open after setting the variable.</p>

<p class="nonbrk">In DOS and older versions of Windows, you can make a permanent
setting by including a SET command in your AUTOEXEC.BAT file.</p>


<h5 id="R5.1.2-EnvvarOverride">Overriding Environment Variable Options on the Command Line</h5>

<p class="brk">If you have some options in the ORS_GREP environment
variable but you don&#8217;t want one of them for a particular run of GREP,
you don&#8217;t have to edit the environment variable. You can make most
changes on the command line, like this:

<ul>

<li><p>The <a href="#R5x-OptZ"><kbd>/Z</kbd> option</a> on the
command line makes GREP disregard the environment variable (as well as
any preceding options on the command line).</p>
<p class="nonbrk">Always start any GREP command in a <strong class="key">batch file or script</strong>
with the <kbd>/Z</kbd> option, to neutralize any options in the
environment variable.</li>

<li><p>The numeric options
<a href="#R5x-Opt0"><kbd>/0</kbd></a> and <a href="#R5x-Opt1"><kbd>/1</kbd></a>,
which set return values from GREP, override each other. GREP honors
the latest one specified in the environment variable or on the command
line.</p></li>

<li><p><a href="#R5x-OptD"><kbd>/D</kbd></a>,
<a href="#R5x-OptE"><kbd>/E</kbd></a>,
<a href="#R5x-OptF"><kbd>/F</kbd></a>,
<a href="#R5x-OptG"><kbd>/G</kbd></a>,
<a href="#R5x-OptJ"><kbd>/J</kbd></a>,
<a href="#R5x-OptK"><kbd>/K</kbd></a>,
<a href="#R5x-OptM"><kbd>/M</kbd></a>,
<a href="#R5x-OptP"><kbd>/P</kbd></a>,
<a href="#R5x-OptQ"><kbd>/Q</kbd></a>,
<a href="#R5x-OptR"><kbd>/R</kbd></a>,
<a href="#R5x-OptW"><kbd>/W</kbd></a>, and
<a href="#R5x-OptAt"><kbd>/@</kbd></a>
in the environment variable can be overridden by
different settings on the command line. (If <kbd>/D</kbd> and
<kbd>/F</kbd> and <kbd>/@</kbd> are set in the environment
variable, you can specify different files for them [including
<kbd>-</kbd>] on the command line, but to clear them completely you
must use the <a href="#R5x-OptZ"><kbd>/Z</kbd> option</a> on the command
line.)</p></li>

<li><p>The <a href="#R5x-OptX"><kbd>/X</kbd> option</a>
can be used multiple times, and therefore if you
have <kbd>/X</kbd> in the environment variable and on the command
line, all listed groups of files are excluded. You can put
<kbd>/X*</kbd> on the command line to clear all previous
<kbd>/X</kbd> options, or of course <kbd>/Z</kbd> to clear all
previous options.</p></li>

<li><p>The other single-letter
options&nbsp;&#8212; namely,
<a href="#R5x-OptA"><kbd>/A</kbd></a>,
<a href="#R5x-OptB"><kbd>/B</kbd></a>,
<a href="#R5x-OptC"><kbd>/C</kbd></a>,
<a href="#R5x-OptH"><kbd>/H</kbd></a>,
<a href="#R5x-OptI"><kbd>/I</kbd></a>,
<a href="#R5x-OptL"><kbd>/L</kbd></a>,
<a href="#R5x-OptN"><kbd>/N</kbd></a>,
<a href="#R5x-OptS"><kbd>/S</kbd></a>,
<a href="#R5x-OptU"><kbd>/U</kbd></a>,
<a href="#R5x-OptV"><kbd>/V</kbd></a>, and
<a href="#R5x-OptY"><kbd>/Y</kbd></a>&nbsp;&#8212;
function as toggles, but a <kbd>+</kbd> suffix turns them
definitely on&nbsp;&#8212; <kbd>/I+</kbd> for example.</p></li>

</ul>

<p class="brk"><strong class="key">Extended example:</strong> Suppose you have set the environment variable as</p>
<pre class="secondhalf">
        set ORS_GREP=/UNI </pre>
<p class="secondhalf">because you usually run GREP
with UNIX-style output (<a href="#R5x-OptU"><kbd>/U</kbd> option</a>)
with line numbers (<a href="#R5x-OptN"><kbd>/N</kbd> option</a>),
ignoring case of letters (<a href="#R5x-OptI"><kbd>/I</kbd> option</a>).</p>

<p class="nonbrk">If you want to run case sensitive for one particular run of GREP,
simply put the <kbd>/I</kbd> option on the command line to reverse
the setting from the environment variable.</p>

<p class="nonbrk">If you don&#8217;t know what&#8217;s in
the environment variable (perhaps because you&#8217;re on an unfamiliar
machine), either put the <a href="#R5x-OptZ"><kbd>/Z</kbd> option</a>
on the command line followed by the options you want, or set them
positively by specifying for instance <kbd>/I+</kbd>.</p>

<p class="nonbrk">Finally, if you want to turn an option definitely off, without
regard to the environment variable, turn it on and then toggle it. To
turn off line numbers, <kbd>/N+N</kbd> always works, whether
<kbd>N</kbd> was set in the environment variable or not.
(<kbd>/N-</kbd> might be more logical, but for historical reasons
options with leading minus signs are allowed to run together, and such
a usage would conflict.)</p>

<p class="brk">If you&#8217;re ever in doubt about the interaction of options between
the command line and the environment variable, simply add
<kbd>/D-|more</kbd> to the end of your command line
and GREP tells you all the option settings in effect and how it
interprets your regex.</p>


<h3 id="R5.2-OptInFile">5.2&nbsp; Input File Options</h3>

<h4 class="secondheader" id="R5x-OptAt"><kbd>/@-</kbd> or <kbd>/@</kbd><var>file</var>&nbsp;&#8212; Take Input Filespecs from Standard Input or File</h4>

<p class="brk">If you have too many input <a href="#filespec">filespecs</a> to put on the
command line, you can put them in a list file for GREP to read. This
can also be useful when GREP or another program generates a list of files and you
want to have GREP examine every file in the list; see an example
below.</p>

<p class="nonbrk"><var>file</var> must follow the <kbd>@</kbd> with no intervening
space, and ends at the next space; it must not contain
<a href="#wildcard">wildcards</a>.
If you use a minus
sign for the file (the <kbd>/@-</kbd> option), GREP accepts
filespecs from <a href="#stdin">standard input</a>.
Standard input is the keyboard, unless you
<a href="#R2.2-InputStandard">redirect</a> it from a file with the
&lt; character or <a href="#R2.2-InputStandard">pipe</a> it from
another command with the | character.</p>

<p class="nonbrk">In the list file, filespecs must appear one per line.
They may contain <a href="#R2.1.1-InputsWildcards">wildcards</a>.
Spaces are legal within a filename; don&#8217;t put quotes around a filename
that contains spaces.
Leading and trailing spaces are automatically removed; if you
actually want a space at the start or end of the filespec you can
specify it as <kbd>[&nbsp;]</kbd> in square brackets.</p>

<p class="brk">Interactions:</p><ul>

<li>Regardless of the actual order on the
command line, GREP processes all other options first, then the list
file, and finally any filespecs listed on the command line.</li>

<li>If you set the
<a href="#R5x-OptS"><kbd>/S</kbd> option</a>, it applies to
filespecs in the list file as well as to filespecs on the command
line. GREP searches all subdirectories related to each line of the
list file before proceeding to the next line of the list file and
lastly to any input filespecs on the command line.</li>

<li>If an entry in the list file matches
an exclusion you specified with the <a href="#R5x-OptX"><kbd>/X</kbd> option</a>,
GREP ignores that file. For example, if you
specified <kbd>/X*.exe</kbd> to exclude all .EXE files, and your
list file contains <kbd>ABC*</kbd>, GREP processes all files
starting with ABC except for ABC*.EXE.</li>

</ul>

<p class="brk">Example: Suppose you want a list of files that contain both
&#8220;this&#8221;
and &#8220;that&#8221;, but not necessarily on the same line. You can GREP once
for &#8220;this&#8221; and produce a file list with the
<a href="#R5x-OptL"><kbd>/L</kbd> option</a>, then GREP a second time
for &#8220;that&#8221;, using just the files that contain
&#8220;this&#8221;:</p>

<pre class="secondhalf">
        grep this * /L | grep that /@- /L </pre>



<h4 id="R5x-OptA"><kbd>/A</kbd>&nbsp;&#8212; Include Hidden and System Files</h4>

<p class="brk">Ordinarily, GREP ignores hidden
and system files while searching for files that match a wildcard.
But with the <kbd>/A</kbd> option,
GREP includes hidden and system files when expanding
<a href="#R2.1.1-InputsWildcards">wildcards (*, ?, [)</a>
in filespecs.</p>

<p class="nonbrk">The <kbd>/A</kbd> option also modifies the action of the
<a href="#R5x-OptS"><kbd>/S</kbd> option</a> (if present),
determining whether subdirectories marked hidden or system are
searched.</p>

<p class="nonbrk">The <kbd>/A</kbd> option matters only when expanding
wildcards or searching subdirectories..
If you explicitly specify a file on the command line,
the <kbd>/A</kbd> option is irrelevant and GREP
always reads it even if it&#8217;s a hidden or system file.</p>

<p class="brk">The <kbd>/A</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/A+</kbd>.
</p>



<h4 id="R5x-OptG"><kbd>/G</kbd><var>n</var>&nbsp;&#8212; Read Variable-Length Text Lines or Paragraphs</h4>

<table class="mynb">
<tr><td><kbd>/G0</kbd><br></td>
    <td>When a line is longer than the <var>txwid</var> value in the
    <a href="#R5x-OptW"><kbd>/W</kbd> option</a>, <strong class="key">chop the line</strong> and treat the remainder as a new
    line. (GREP always did this before release 7.5, but now if you
    want this behavior you must specify it with <kbd>/G0</kbd>.)</td></tr>
<tr><td><kbd>/G1</kbd></td>
    <td>(default) Handle <strong class="key">text lines of any length</strong>.
    The <var>txwid</var> value in the <a href="#R5x-OptW"><kbd>/W</kbd> option</a> is simply an
    initial allocation; GREP quietly reallocates buffers as needed
    when it reads long lines.
    <p class="nonbrk">Since GREP32 can use Windows virtual memory, you&#8217;ll almost
    certainly have no problems with the default <kbd>/G1</kbd>. But
    GREP16 will run out of memory if</p>
    <p class="algebra">(actual line length) times (1 + <var>before</var> from the
            <a href="#R5x-OptP"><kbd>/P</kbd> option</a>)</p>
    <p class="secondhalf">totals around 60K. If this happens, run GREP again either
    with a lower <a href="#R5x-OptP"><kbd>/P<var>before</var></kbd> option</a> or with the
    <kbd>/G0</kbd> option.</p></td></tr>
<tr><td><kbd>/G2</kbd></td>
    <td><strong class="key">Search paragraphs rather than lines</strong>, to find
    matches that might begin and end on different lines.
    <kbd>GREP&nbsp;/G2</kbd> defines a <dfn>paragraph</dfn> to be any sequence of
    non-blank lines ended by one or more blank lines or by end of file.
    A <dfn>blank line</dfn> is one that contains no characters or
    contains only <a href="#whitespace">whitespace characters</a>.
    <p class="nonbrk">Please see <a href="#R5-G2mode">More about Paragraph
    Mode</a> below.</p>
    </td></tr>
</table>

<p class="brk">Interactions:


If you specify binary mode with the <a href="#R5x-OptR"><kbd>/R2</kbd> or <kbd>/R3</kbd> option</a>, GREP
ignores the <kbd>/G</kbd> option and displays a warning message.
If you specify the <kbd>/G</kbd> option with the <a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a>,
GREP applies the <kbd>/G</kbd> option only to the files that
are actually text but doesn&#8217;t display a warning message about the
binary files.</p>


<h5 id="R5-G2mode">More about Paragraph Mode (<kbd>/G2</kbd>)</h5>

<p class="brk">When GREP reads text files in paragraph mode (<kbd>/G2</kbd>),
it pastes together a set of lines with newlines (ASCII
10) as separators, and tests regexes against the whole paragraph. If there&#8217;s
a match, GREP normally displays the paragraph (followed by a blank
line); you may want to consider the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> to limit how much
text is displayed.</p>

<p class="nonbrk">You can&#8217;t use the <a href="#R5x-OptP"><kbd>/P</kbd> option</a> with <kbd>/G2</kbd>.</p>

<p class="brk"><strong class="key">Regexes:</strong>
When writing your regex, bear in mind that lines within a paragraph
are separated by a single ASCII 10 character (LF).
If you actually want to test for this character, code it as
<kbd>\012</kbd> either with extended regexes (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>),
or with basic regexes when the <a href="#R4.12.2-RegexCmdLineWhat">special
rules for the command line</a> are in effect (no <kbd>/E</kbd> option
and no <a href="#R5x-OptF"><kbd>/F</kbd> option</a>).
For example, <kbd>"Mozart&nbsp;or\012Beethoven"</kbd> matches &#8220;Mozart
or&#8221; at
the end of a line and &#8220;Beethoven&#8221; at the start of the next line.
If there might be trailing blanks after &#8220;Mozart or&#8221;, you want
<kbd>"Mozart&nbsp;or&nbsp;*\012Beethoven"</kbd>.</p>

<p class="brk">But probably you want to check for a phrase in a paragraph,
without worrying about exactly where the line break occurs. To do this,
there&#8217;s an easy way with extended regexes and a less easy way with
basic regexes.</p>
<p class="nonbrk">With an <strong class="key">extended regex</strong> (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>), use the
<a href="#R4.11.2-RegexBackslashType">character type</a>
<kbd>\s</kbd> as a shortcut. For instance,</p>
<p class="algebra"><kbd>grep /G2E2 Mozart\s+or\s+Beethoven </kbd> <var>filespecs</var></p>
<p class="secondhalf">will find &#8220;Mozart&#8221;, &#8220;or&#8221;,
&#8220;Beethoven&#8221; separated by one or more
<a href="#whitespace">whitespace characters</a>. In other
words, you don&#8217;t care whether &#8220;Mozart or Beethoven&#8221; is all on a line or
has a line break after the first or second word.</p>
<p class="nonbrk">In a <strong class="key">basic regex</strong>, you need a
<a href="#R4.7-RegexClass">character class</a> to accomplish the same
thing. Assuming the <a href="#R4.12.2-RegexCmdLineWhat">special rules
for the command line</a> are in effect:
<p class="algebra"><kbd>grep /G2 Mozart[\s\t\012]+or[\s\t\012]+Beethoven </kbd> <var>filespecs</var></p>
<p class="secondhalf">As you see, in a basic regex you need to specify the space,
tab, and newline (octal 012&nbsp;= ASCII 10) as a character class. (If
you want, add <kbd>\014</kbd> for a form feed.)</p>

<p class="brk">Two special notes: The <a href="#R4.3-RegexPeriod">period or
full stop</a> in a
regex matches any character; with <kbd>/G2</kbd>, that
includes the ASCII 10 that separates lines in a paragraph.
Also with <kbd>/G2</kbd>, the <a href="#R4.8-RegexAnchor">dollar
sign</a> matches the end of paragraph but not the ends of those
interior lines.</p>

<p class="brk"><strong class="key">Output:</strong> <a href="#hits">Hits</a> are displayed with the line breaks
and spacing from the original file; paragraphs in output are separated
by blank lines. If your paragraphs are long, you might consider the
<a href="#R5x-OptJ"><kbd>/J</kbd> option</a> to reduce the volume of output.</p>

<p class="brk"><strong class="key">Line numbers</strong> (<a href="#R5x-OptN"><kbd>/N</kbd> option</a>) are replaced by paragraph
numbers.</p>

<p class="brk"><strong class="key">Memory usage:</strong>
Since GREP32 can use Windows virtual memory, you most likely
won&#8217;t have memory problems even with long paragraphs. But
GREP16 could run out of memory if you have long paragraphs. If this
happens, one workaround is to use <a href="#R5x-OptR"><kbd>/R3</kbd> option</a> with a suitable
buffer size (<a href="#R5x-OptW"><kbd>/W</kbd> option</a>) instead of the <kbd>/G</kbd> option.</p>


<h4 id="R5x-OptR"><kbd>/R</kbd><var>n</var>&nbsp;&#8212; Read Input Files as Binary or Text</h4>

<p class="brk"> <a href="#R2.4-InputsBinary">Binary Files and Text
Files</a> gives detailed information about the
differences among text files, free-format binary, and
record-oriented binary.</p>

<p class="nonbrk">GREP normally matches the output format automatically to the
input file type. However, you can specify the output format yourself
by using the letter <a href="#R5x-OptO"><kbd>/o</kbd> option</a>.</p>

<p class="brk">You can choose from these file input modes:</p>

<table class="mynb">
<tr><td><kbd>/R0</kbd><br></td>
    <td>(default) Read all input files as text.</td></tr>
<tr><td><kbd>/R1</kbd></td>
    <td>(reserved for future use)</td></tr>
<tr><td><kbd>/R2</kbd></td>
    <td>Read all input files as record-oriented binary. The fixed
    record length is given by the
    <a href="#R5x-OptW"><kbd>/W</kbd> option</a>. (You&#8217;ll see <a href="#R6.4-MessagesWarning">warning
    message</a> if the last record is incomplete.)</td></tr>
<tr><td><kbd>/R3</kbd></td>
    <td>Read all input files as free-format binary, using the buffer
    size given in the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>.
    <p class="nonbrk">To find at least one match, make sure your buffer
    size is at least twice the longest string you expect to find;
    you&#8217;ll probably want to use the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> to restrict the
    size of output to something manageable.</p>
    <p class="nonbrk">To find all matches, use the <a href="#R5x-OptJ"><kbd>/J2</kbd> or <kbd>/J3</kbd> option</a>
    and the largest buffer you can; ideally the buffer would be large
    enough to hold the whole file.</p></td></tr>
<tr><td><kbd>/R-1</kbd><br><kbd>/R-2</kbd></td>
    <td>(<a href="grep101.htm#License">registered version</a> only)
    Examine each input file to decide whether to read
    it as  free-format binary (like <kbd>/R3</kbd>) or text (like
    <kbd>/R0</kbd>); display &#8220;binary&#8221; or &#8220;text&#8221; with the
    <a href="#filespec">filespec</a> in
    the header.
    <kbd>/R-1</kbd> reads only the first 256 bytes
    and <kbd>/R-2</kbd> reads the whole file or until it finds a binary
    character; otherwise the two are identical.
    <p class="nonbrk">If you gave two numbers with the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>,
    the first number is used as line width for text files
    and the second as buffer size for binary files.</p>
    <p class="brk">How does GREP infer the file type with the
    <kbd>/R-1</kbd> or <kbd>/R-2</kbd> option? GREP reads until it finds a
    binary character, namely any of the characters ASCII 0-6 or 14-26.
    The file is binary if it contains any of those characters;
    otherwise it&#8217;s treated as text.</p>
    <p class="nonbrk">Caution: After GREP decides whether the file is text or binary, it
    either rewinds the file (if it&#8217;s binary) or closes and reopens it
    (if it&#8217;s text).
    Ordinarily that&#8217;s not a problem, but if you specify a pseudo-file
    like COM1 or CON, GREP discards the bytes it used to sense
    the file format.
    Use <kbd>/R-1</kbd> or <kbd>/R-2</kbd>
    only with real files.</p>
    <p class="brk">Should you use <kbd>/R-1</kbd> or <kbd>/R-2</kbd>?
    Experiments show that 256 bytes is plenty for a correct decision
    for most file types, including picture files, executable programs,
    and MS Office files of all types. Adobe Acrobat PDF files are an
    exception, in that the first binary byte can show up well after byte
    256; but the displayed text is encrypted in those files so you
    can&#8217;t search for text in them anyway. (If anyone knows of another
    file type where binary bytes show up only after byte 256, I&#8217;d be
    grateful for information.)</p>
    <p class="nonbrk">Thus <kbd>/R-2</kbd> is theoretically safer than <kbd>/R-1</kbd>,
    but by the same
    token <kbd>/R-2</kbd> is slower on a big file that is
    actually text. The difference may or may not be noticeable,
    depending on how fast your disk and your CPU are and how your
    operating system buffers file reads.</p>
    <p class="nonbrk">So which one should you use? My own choice is to put
    <kbd>/R-1/X*.pdf</kbd> in the <a href="#R5.1.2-Envvar">environment
    variable</a>. That way I&#8217;m confident that GREP will correctly
    sense the type of non-PDF binary files, without taking a long time
    to decide that a big text file is actually text.</p></td></tr>
</table>

<p class="brk">Setting the <kbd>/R</kbd> option correctly lets
you search for <a href="#R4-Regex">regexes</a> in .EXE and .DLL files,
word-processing files, and so forth. <kbd>/R-1</kbd> or <kbd>/R-2</kbd> can be
particularly useful when you don&#8217;t know whether files are text or
binary. (For instance, Microsoft Word writes some .DOC files in
a binary format and some .DOC files in a text format. Or you might
have some source files and some object files and want to search them
all in one go.)</p>

<p class="brk">Only named input files can be read in binary mode&nbsp;&#8212;
GREP always scans the <a href="#R2.2-InputStandard">standard input</a>
in text mode.</p>

<p class="nonbrk">Also, when you use
the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a> to read a list of input files, or
the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> to read <a href="#R4-Regex">regexes</a> from a file,
GREP reads that file in normal text mode.</p>



<h4 id="R5x-OptS"><kbd>/S</kbd>&nbsp;&#8212; Scan Subdirectories</h4>

<p class="brk">With this option, GREP searches not only the files named on
the command line (and in any list file specified with <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>),
but files of the same names in subdirectories. For full details,
please see the section on <a href="#R2.3-InputsSubdirs">subdirectory
searches</a>.</p>

<p class="brk">The <kbd>/S</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/S+</kbd>.
</p>




<h4 id="R5x-OptW"><kbd>/W</kbd><var>width</var> or <kbd>/W</kbd><var>txwid,bnwid</var>&nbsp;&#8212; Specify Line Width or Binary Block Length</h4>

<p class="brk">With this option, you tell GREP to expect text lines up to
<var>txwid</var> characters long,
or process binary files in records or buffers of <var>bnwid</var> bytes.
(If you specify only one number, it&#8217;s used for both <var>txwid</var> and
<var>bnwid</var>.)</p>

<p class="nonbrk"><var>txwid</var> and <var>bnwid</var> default to 4096 in GREP32, and you can specify
anything from 2 to 2147483645; the default for GREP16 is 256
and you can specify 2 to 32765.
(The widths are also limited to available memory, which
depends on your system configuration, what other programs you have
running at the time, and what you specify with the
<a href="#R5x-OptP"><kbd>/P</kbd> option</a>. With GREP32, available memory
includes Windows virtual memory. GREP16 is limited to its 64&nbsp;KB
data segment.)</p>

<p class="nonbrk">For full details of binary and text file modes, please see
<a href="#R2.4-InputsBinary">Binary and Text Files</a>.</p>


<h5 id="R5-R0mode">Text Mode (<kbd>/W</kbd> Option without <kbd>/R</kbd> or with <kbd>/R0</kbd>)</h5>

<p class="brk">Starting with release 7.5, by default <var>txwid</var> is
simply an initial value and not an absolute limit on the width of a
text line. Therefore, by default this section no longer applies.</p>

<p class="brk">However, if you actually want input lines to be split every
<var>txwid</var> characters, specify the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a>.

The CR/LF (ASCII 13 or 10 or both) line terminator doesn&#8217;t count
against the specified <var>txwid</var>. Reading a long line from the
input, GREP breaks the line after <var>txwid</var> characters and
treats the remainder as a separate line. GREP scans the whole line and
finds any match within one of the fragments, but misses any
match that starts before the break and ends after the break.
Therefore, if possible you should set <var>txwid</var> large enough to
hold the longest line in the file (or simply don&#8217;t specify the
<a href="#R5x-OptG"><kbd>/G0</kbd> option</a>).

If GREP does find any lines longer than the specified or
default <var>txwid</var>, it displays a warning message at the end of
execution, telling you the length of the longest line.
(This warning is
suppressed by the <a href="#R5x-OptQ"><kbd>/Q3</kbd> option</a>.) GREP also
logs every such file in the
<a href="#R5x-OptD">debug output</a>; look for &#8220;exceeds your
specified length&#8221;.</p>


<h5 id="R5-R2mode">Record-oriented Binary Mode (<kbd>/W</kbd> Option with <kbd>/R2</kbd>)</h5>

<p class="brk">Files are read in records of <var>bnwid</var>
bytes. Make sure that you set <var>bnwid</var> to the exact length of
the records in the binary file.</p>


<h5 id="R5-R3mode">Free-form Binary Mode (<kbd>/W</kbd> Option with <kbd>/R3</kbd>)</h5>

<p class="brk">Files are read in buffers of <var>bnwid</var> bytes.
(If you specify an odd number, GREP will increase it by 1.)
The recommended value of <var>bnwid</var> depends on the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a>
value, as follows:</p><ul class="purelist">

<li><p>With <kbd>/J1</kbd> or with no <kbd>/J</kbd> option at all,
specify a buffer at least twice the longest
string you expect to find. For instance, if you&#8217;re searching for a
regex that might match up to 40 characters, you want to specify
<kbd>/R3&nbsp;/W80</kbd>, since 2&times;40=80.</p>
<p class="nonbrk">If you&#8217;re not sure just how long a string in the file will match your
regex, it&#8217;s better to overestimate a bit than to underestimate.
An internal procedure ensures that if a match exists in the file it is
found, provided the match is no longer than half the buffer. (As
always, if one buffer contains multiple matches only the first match
in that buffer is counted.)</p></li>

<li><p>With <kbd>/J2</kbd> or <kbd>/J3</kbd>, specify the largest
buffer you can&nbsp;&#8212; ideally a buffer large enough to hold
the largest file you expect to read. (Remember that GREP32 can use
Windows virtual memory.) GREP should find all matches that aren&#8217;t
longer than the buffer width; see the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> for details.</li>

</ul>


<h5 id="R5-R-1mode">When GREP Chooses File Mode (<kbd>/W</kbd> Option with <kbd>/R-1</kbd> or <kbd>/R-2</kbd>)</h5>

<p class="brk"><var>txwid</var> is used as a line width for any file that is treated
as a text file, and <var>bnwid</var> is used as buffer width for
any file that is treated as free-form binary.
<var>bnwid</var> must be an even number; if not, GREP will increase it
by 1.</p>

<p class="nonbrk">When you use the <kbd>/R-1</kbd> or <kbd>/R-2</kbd> option, I recommend
that you specify two numbers with the
<a href="#R5x-OptW"><kbd>/W</kbd> option</a>.
The first number, text line width, doesn&#8217;t much matter unless you
specify the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a>. If you do, you should specify a
largish text width so that every line is kept as a unit.
For the second number, binary buffer width, see the advice in
<a href="#R5-R3mode">Free-form binary mode</a>, just above.</p>




<h4 id="R5x-OptX"><kbd>/X</kbd><var>pattern</var>&nbsp;&#8212; Exclude Matching Files from Scan</h4>

<p class="brk">When expanding <a href="#R2.1.1-InputsWildcards">wildcards</a>
in the <a href="#R2.1-InputsNamed">named input
files</a>, GREP ignores any files that match the <var>pattern</var>.
The <var>pattern</var> may contain <kbd>*</kbd>, <kbd>?</kbd>, and
<kbd>[&nbsp;]</kbd> <a href="#R2.1.1-InputsWildcards">wildcards</a>,
but no drive or path information.
<var>pattern</var> must follow the <kbd>X</kbd> with no intervening
space, and ends at the next space.</p>

<p class="nonbrk">For example, if you specify <kbd>/X*.exe</kbd> to exclude
all .EXE files, and your list file contains <kbd>ABC*</kbd>, GREP
processes all files starting with ABC except for ABC*.EXE.</p>

<p class="brk">An input filespec without wildcards will be honored without
regard to any <kbd>/X</kbd> option exclusions. For instance, if you have
<kbd>/X*exe</kbd> in the <a href="#R5.1.2-Envvar">environment
variable</a>, and you type the command</p>

<pre class="secondhalf">
        grep /r3j2 warning prog.exe</pre>
<p class="secondhalf"> then GREP will read the file prog.exe even though it matches
the exclusion, on the theory that when you specify a particular file
you must want it read.
The same is true on the command line:</p>
<pre class="secondhalf">
        grep /r3j2 /*exe warning prog.exe</pre>
<p class="secondhalf">Here again, GREP will read the file prog.exe; it doesn&#8217;t
distinguish between options on the command line and options in the
<a href="#R5.1.2-Envvar">environment variable</a>. However, if you
specify a <a href="#wildcard">wildcard</a> in the input filespec, line
this:</p>
<pre class="secondhalf">
        grep /r3j2 /*exe warning prog*.exe</pre>
<p class="secondhalf">then GREP will search for files matching prog*.exe but will
exclude all of them because they match the exclusion *.exe.</p>

<p class="brk">To specify multiple  exclusion patterns, specify multiple
<kbd>/X</kbd> options. Example: To exclude MS-Word documents, Excel
spreadsheets, and ABC.DEF from the search, type something like this:</p>

<pre class="secondhalf">
        grep <var>regex</var> /x*.doc /x*.xls /xabc.def *</pre>
<p class="secondhalf">or</p>
<pre class="secondhalf">
        grep <var>regex</var> * /x*.doc /x*.xls /xabc.def </pre>

<p class="brk">Remember that GREP reads and interprets all options before it
looks at the input files. Therefore the exclusions that you specify
with <kbd>/X</kbd> will be applied to all input filespecs, even those
that come before the <kbd>/X</kbd> on the command line and those
specified in a list file (<a href="#R5x-OptAt"><kbd>/@</kbd> option</a>). For example, the two
commands shown just above this paragraph have exactly the same
effect.</p>

<p class="brk">You can store one or more <kbd>/X</kbd> options
permanently in the <a href="#R5.1.2-Envvar">environment variable</a>.
Any <kbd>/X</kbd> exclusions on the command line are equally
effective with those in the environment variable. The special case
<kbd>/X*</kbd> tells GREP to disregard all previous exclusions
specified with <kbd>/X</kbd>.</p>




<h3 id="R5.3-OptPattern">5.3&nbsp; Pattern-Matching Options</h3>


<h4 class="secondheader" id="R5x-OptE"><kbd>/E</kbd><var>regex_level</var>&nbsp;&#8212; Select Extended Regexes or Strings</h4>

<p class="brk">This option tells GREP how to interpret the regex(es) you enter
on the command line, <a href="#R5x-OptF">from keyboard</a>, or
<a href="#R5x-OptF">in a file</a>.</p>

<p class="nonbrk">Basic and extended regexes are fully explained under
<a href="#R4-Regex">Regular Expressions</a>, later. An extended
regex supports all the features of a basic regex plus the quantifiers
? and {&#133;}, alternatives |, subexpressions (&#133;), some special
constructs with the backslash \, and more.</p>

<table class="mynb">
<tr><td><kbd>/E0</kbd></td>
    <td>Don&#8217;t use regular expressions at all. Treat the
    regex(es) as simple literal strings and search files for exact
    match with no special treatment of any characters.</td></tr>
<tr><td><kbd>/E1</kbd></td>
    <td>(default) Treat regexes as basic regexes. (This is how GREP
    always worked before release 6.0.)</td></tr>
<tr><td><kbd>/E2</kbd></td>
    <td>(GREP32 only)
    Treat regexes as <a href="#R4.1.1-RegexTwoKinds">extended regexes</a>.</td></tr>
<tr><td><kbd>/E4</kbd></td>
    <td>(GREP32 only)
    Treat regexes as stand-alone words. For example, if you specify
    the regex <kbd>other</kbd>, GREP finds all occurrences of
    &#8220;other&#8221; but ignores it where it occurs as
    &#8220;others&#8221;, &#8220;mother&#8221;,
    &#8220;brothers&#8221;, and so on.
    <p class="nonbrk">By default, a &#8220;word&#8221; is any group of letters, digits, and
    underscores bounded by start or end of line and/or by any other
    characters.
    For instance, if you&#8217;re searching for <kbd>other</kbd> with the
    <kbd>/E4</kbd> option, then &#8220;other55&#8221; would not be found because
    the 5s are part of the &#8220;word&#8221;.
    If this is a problem, you can redefine a &#8220;word&#8221; to be any sequence
    of non-blanks, or any sequence of letters. Please see the
    <a href="#R5x-OptM"><kbd>/M</kbd> option</a> for details.</p>
    <p class="nonbrk">When you use <kbd>/E4</kbd> you probably won&#8217;t put special
    characters in your search regex. But if you do, it&#8217;s treated
    as an <a href="#R4.1.1-RegexTwoKinds">extended regex</a>. In fact, the
    <kbd>E4</kbd> option is the same as <kbd>/E2</kbd> except that
    GREP slaps a <kbd>\b</kbd> (assert word boundary) at the
    beginning and end of your regex.</p></td></tr>
</table>

<p class="brk"><kbd>/E0\ /E1\ /E2\ /E4\</kbd>
are the same as <kbd>/E0 /E1 /E2 /E4</kbd> except that they turn on
the (deprecated) <a href="#R4.12-RegexCmdLine">Special Rules for the Command
Line</a>, which are described later in this <cite>GREP Manual</cite>. The
Special Rules are the old way to have a regex contain characters like
<kbd>&lt;</kbd> and <kbd>|</kbd> that have special meanings on the
command line. The better way to bypass
command-line restrictions is to use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> and enter
your regex.</p>

<p class="brk">If you never specify the <kbd>/E</kbd> option at all, the effect is
the same as <kbd>/E1\</kbd>, which is basic regexes with the
<a href="#R4.12-RegexCmdLine">Special Rules for the Command Line</a>
enabled; this default was chosen to match GREP&#8217;s behavior before
release 6.0. <kbd>/E</kbd> with no number is the same as
<kbd>/E1</kbd>, which specifies basic regexes without the
<a href="#R4.12-RegexCmdLine">Special Rules</a>.</p>




<h4 id="R5x-OptF"><kbd>/F-</kbd> or <kbd>/F</kbd><var>file</var>&nbsp;&#8212; Read Regexes from Keyboard or File</h4>

<p class="brk">GREP reads one or more <a href="#R4-Regex">regexes</a> from <var>file</var>
instead of taking a single regex from the command line, and reports
lines from the input file(s) that match any of the regexes read from
<var>file</var>. You must enter
the regexes one per line in the file; don&#8217;t put quotes around them.</p>

<p class="nonbrk"><var>file</var> must follow the <kbd>F</kbd> with no intervening
space, and ends at the next space; it must not contain
<a href="#wildcard">wildcards</a>.</p>

<p class="nonbrk">If you use a minus sign for the file (<kbd>/F-</kbd> option),
GREP accepts regexes from <a href="#stdin">standard input</a>.
Standard input is the keyboard, unless you
<a href="#R2.2-InputStandard">redirect</a> it from a file with the
<kbd>&lt;</kbd> character or <a href="#R2.2-InputStandard">pipe</a> it from
another command with the <kbd>|</kbd> character.</p>

<p class="brk">When you supply two or more regexes, GREP normally reports each line
from the input file that matches <strong class="key">one or more of the regexes</strong>.
If you set the  <a href="#R5x-OptV"><kbd>/V</kbd> option</a> or
<a href="#R5x-OptY"><kbd>/Y</kbd> option</a> or both, you
modify that behavior according to the rules of logic.
Specifically:</p>

<div class="acchild"><table class="mystd" border="2">
<thead><tr><td></td><th>no <kbd>/Y</kbd> option</th><th><kbd>/Y</kbd> option set</th></tr></thead>
<tbody>
<tr><th class="al">no <kbd>/V</kbd> option</th>
    <td>(no <kbd>/V</kbd>, no <kbd>/Y</kbd>)
        GREP reports every line that matches
        <strong class="key">one or more of the regexes</strong>.</td>
    <td>(<kbd>/Y</kbd>, no <kbd>/V</kbd>)
        GREP reports a line only if that line matches
        <strong class="key">all of the regexes</strong> in any order.</td></tr>
<tr><th class="al"><kbd>/V</kbd> option set</th>
    <td>(<kbd>/V</kbd>, no <kbd>/Y</kbd>)
        GREP reports only the lines that match <strong class="key">none of the regexes</strong>.
        (If the input line matches one or more of the regexes, GREP doesn&#8217;t
        report it.)</td>
    <td>(<kbd>/V&nbsp;/Y</kbd>)
        GREP reports every line that matches
        <strong class="key">less than all of the regexes</strong>, i.e. every line that
        matches 0 to N-1 of your N regexes in any order.
        (If the input line matches all the regexes, GREP doesn&#8217;t
        report it; if it matches some of the regexes but not all, or
        none of the regexes, GREP reports it.)</td></tr>
</tbody>
</table></div>

<p class="brk"><a name="N20041115">When</a> using multiple regexes, you can
<strong class="key">speed up GREP&#8217;s searching slightly.</strong>
With the <a href="#R5x-OptY"><kbd>/Y</kbd> option</a>, put the regex first that you expect to
match the fewest input lines; without the <a href="#R5x-OptY"><kbd>/Y</kbd> option</a>, put the
regex first that you expect to match the most input lines. If you&#8217;re
not sure, don&#8217;t worry about it: unless the regexes are very complex,
most of the time is spent reading lines from disk, not matching them against
the regexes.</p>

<p class="brk">(The <kbd>/F<var>file</var></kbd> option is active only in the
<a href="grep101.htm#License">registered version</a>.
<kbd>/F-</kbd> works in all versions.)</p>



<h4 id="R5x-OptI"><kbd>/I</kbd>&nbsp;&#8212; Ignore Case in Matching</h4>

<p class="brk">GREP ignores case, treating capitals and lower case as matching each
other.</p>

<p class="brk">Caution: By default, the <kbd>/I</kbd> option does not apply to 8-bit
characters (characters 128-255). You can turn on 8-bit character
support in GREP32 with the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.</p>

<p class="nonbrk">In GREP16, the <kbd>/I</kbd> option does not apply to 8-bit
characters (characters 128-255) because Microsoft C 16-bit code does
not support setting the locale.
Therefore, if you want case-blind comparisons in GREP16, you must explicitly
code any 8-bit upper and lower case in your <a href="#R4-Regex">regex</a>.
For instance, to search for the French word &#8220;th&eacute;&#8221; in upper or
lower case, code it as <kbd>th[&eacute;&Eacute;E]</kbd> since
&eacute; can be upper-cased as &Eacute; or as plain E. The
&#8220;th&#8221;, being
7-bit ASCII characters, will be found as upper or lower case by the
<kbd>/I</kbd> option. (You may need to code 8-bit characters like
<kbd>&eacute;&Eacute;</kbd> in a special way if you enter them on
the command line; either use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a>
or see <a href="#R4.12-RegexCmdLine">Special Rules for the
Command Line</a> below.)</p>

<p class="brk">The <kbd>/I</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/I+</kbd>.
</p>




<h4 id="R5x-OptM"><kbd>/M</kbd><var>loc</var> or
<kbd>/M</kbd><var>loc,word</var>&nbsp;&#8212; Specify Character
Mapping and Define &#8220;Word&#8221;</h4>

<p class="brk">This option is available only
in GREP32, because Microsoft 16-bit C does not support setting the
locale.
There are four issues with locale: binary output, case-blind
matching, the definition of a &#8220;word&#8221;, and character classes in general.
Details about all four are given below, after the list of mappings.</p>

<p class="brk">While many locales (character mappings) are supported in GREP32,
most are duplicates. The six unique locales are:</p>

<table class="mynb">
<tr><td><kbd>/Mc</kbd></td>
    <td>(default) The C locale, in which none of the characters
    128&#8211;255 are considered letters, digits, punctuation,
    space, or printing characters.</td></tr>
<tr><td><kbd>/Mfr</kbd></td>
    <td>Code page 1252, valid for  most European
    languages including Danish, Dutch, English, Finnish, French, German,
    Icelandic, Italian, Norwegian (both), Portuguese, Spanish, and Swedish;
    this also matches the MS-Windows U.S.A. character set.</td></tr>
<tr><td><kbd>/Mcsy</kbd></td>
    <td>Code page 1250, valid for Czech, Hungarian, Polish,
    and Slovak.</td></tr>
<tr><td><kbd>/Mell</kbd></td>
    <td>Code page 1253, valid for Greek.</td></tr>
<tr><td><kbd>/Mrus</kbd></td>
    <td>Code page 1251, valid for Russian.</td></tr>
<tr><td><kbd>/Mtrk</kbd></td>
    <td>Code page 1254, valid for Turkish.</td></tr>
</table>

<p class="brk">I suggest you put an <kbd>/M</kbd> option
in your <a href="#R5.1.2-Envvar">environment variable</a> with the
appropriate locale and then forget about it. The locale affects the
following issues:</p><ul>

<li><p>Displaying <a href="#hits">hits</a> in
<a href="#R2.4-InputsBinary">binary mode</a>&nbsp;&#8212; GREP displays
each non-printing character as the four-byte sequence
<samp>&lt;<var>nn</var>&gt;</samp>, where <var>nn</var> is the hexadecimal value of the
character. GREP32 uses the current <kbd>/M</kbd> mapping to decide
what is and is not a printing character.</p>

<li><p>Case-blind matching
(<a href="#R5x-OptI"><kbd>/I</kbd> option</a>)&nbsp;&#8212;
The default C locale knows only the English alphabet A-Z and
a-z, with no accent marks.
If you&#8217;re doing case-blind matching and your input files may contain
accented characters like &eacute; (character 233) or &Eacute; (201),
or non-English letters like &Aring; (197) or &aring; (229), you should
use the <kbd>/M</kbd> option with the appropriate mapping from the
above list.</p>

<li><p>Definition of a &#8220;word&#8221;&nbsp;&#8212;
This matters in extended regexes that use
<a href="#R4.11.2-RegexBackslashType"><kbd>\w</kbd> and <kbd>\W</kbd></a>
as character types,
<a href="#R4.11.3-RegexBackslashAssert"><kbd>\b</kbd> and
<kbd>\B</kbd></a> as word-boundary sentinels, or
<a href="#R4.7.4-RegexClassName"><kbd>[:word:]</kbd></a> for a
&#8220;word&#8221;
character in a <a href="#R4.7-RegexClass">character class</a>.</p>

<p class="nonbrk">A &#8220;word&#8221; is any group of &#8220;word&#8221; characters
bounded by non-&#8220;word&#8221; characters
and/or start and end of line.
By default, a &#8220;word&#8221; character is any letter, any digit, or the
underscore character (_). But you might prefer to define a
&#8220;word&#8221; as a sequence
of letters, or a sequence of non-blank characters.</p>

<p class="nonbrk">The optional second argument, <var>word</var>, is used to
redefine what are &#8220;word&#8221; characters in the input files.
That second argument, if present, must be one of
the three special symbols <kbd>alpha</kbd>,
<kbd>alnum</kbd>, or <kbd>graph</kbd> to define a &#8220;word&#8221;
character as any letter, any letter or digit, or any printing
character. What is a &#8220;letter&#8221; or a &#8220;digit&#8221; or a
&#8220;printing character&#8221;
depends on the locale selected with the <kbd>/M</kbd> option; see
the next bullet for details.</p>

<p class="nonbrk">For example, specify <kbd>/Mfr,graph</kbd> to use the
ISO-8859-1 character set and define any non-blank character as a
&#8220;word&#8221; character, or <kbd>/MC,alpha</kbd> to use the default
locale and define only letters as &#8220;word&#8221; characters.</p>

<p class="nonbrk">You can use the supplied TEST255 file to check the
definition of &#8220;word&#8221; characters in any locale, like this:</p>

<pre class="secondhalf">
        grep /e2r2w21 ^[[:word:]] test255 </pre>

<p class="secondhalf">If you specify a locale with <kbd>/M</kbd> and omit the second argument, a
&#8220;word&#8221; means any sequence of letters, digits, and underscores.</p>

<li><p><a href="#R4.11.2-RegexBackslashType">Character
types</a> and <a href="#R4.7.4-RegexClassName">character class names</a>
in extended regular expressions (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>)&nbsp;&#8212;
The definitions of a letter, a punctuation mark, and a word boundary
vary from one locale to another. If you use
extended regexes with character types or named character classes, and
your input files might contain accented letters or non-English letters,
you need the <kbd>/M</kbd> option.</p>

<p class="nonbrk">You can use the supplied TEST255 file to check the
definition of any character class or type. For instance, either of
these commands will list all the digit characters in your locale:</p>

<pre class="secondhalf">
        grep /e2r2w21 ^[[:digit:]] test255
        grep /e2r2w21 ^\d test255 </pre>

</ul>

<p class="brk">The <kbd>/M</kbd> mapping affects how GREP interprets each
character. But it does not affect the appearance of characters on your
screen; that&#8217;s controlled by Windows language settings, or by DOS commands like CHCP.</p>



<h4 id="R5x-OptV"><kbd>/V</kbd>&nbsp;&#8212; Display Lines That
Don&#8217;t Contain a Match</h4>

<p class="brk">GREP shows or counts the lines that don&#8217;t match the regex
instead of those that do.</p>

<p class="brk">Interactions:</p><ul>
<li>To find <em>files</em> that don&#8217;t contain a match, please see the
<a href="#R5x-OptL"><kbd>/L</kbd> option</a>.</li>
<li>Please see the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> for interactions between
<kbd>/V</kbd> and <kbd>/Y</kbd>. Different combinations
require a line to match all regexes, or some, or none.</li>
<li>The <kbd>/V</kbd> option is not allowed with the
<a href="#R5x-OptJ"><kbd>/J</kbd> option</a>&nbsp;&#8212; it doesn&#8217;t make any sense
to display only non-matches but display the part of each line that was
a match.</li>
</ul>

<p class="brk">The <kbd>/V</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/V+</kbd>.
</p>




<h4 id="R5x-OptY"><kbd>/Y</kbd>&nbsp;&#8212; Multiple Regexes Must All Match</h4>

<p class="brk">When multiple regexes are given
(<a href="#R5x-OptF"><kbd>/F</kbd> option</a>), GREP normally reports a
hit if the line, record, or buffer contains a match for any of the
regexes. If you also set the <kbd>/Y</kbd> option, GREP reports a
hit only if the line, record, or buffer matches every regex, though
not necessarily in order. The normal test is an OR; the test with the
<kbd>/Y</kbd> option is an AND.</p>

<p class="brk">For example, if you use the <kbd>/F</kbd> option and enter the two
regexes <kbd>brown</kbd> and <kbd>fox</kbd>, then all of these
lines match:
<pre class="secondhalf">
        The quick brown fox
        I see a brown smudge
        Crazy like a fox
        The foxtail is brown </pre>

<p class="secondhalf">But if you also use the <kbd>/Y</kbd> option, then GREP matches
only lines that contain both the regular expressions, namely the first
and fourth lines in the example.</p>

<p class="nonbrk">As you see from the example, with the <kbd>/Y</kbd> option, input
lines must match all the regexes, but in any order. If you want to
match all regexes in a specific order, specify them as a single regex
connected with period and asterisk. For instance, to match lines that
contain &#8220;brown&#8221;
somewhere before &#8220;fox&#8221;, use the regex <kbd>brown.*fox</kbd>.</p>

<p class="brk">Interactions:</p><ul>

<li>For the effect of the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>
together with <kbd>/Y</kbd> and <kbd>/F</kbd>, please see the
<a href="#R5x-OptF"><kbd>/F</kbd> option</a>.</li>

<li>While not actually forbidden, the <kbd>/Y</kbd> option usually
doesn&#8217;t give useful results with the
<a href="#R5x-OptR"><kbd>/R3</kbd> option</a>.</li>

<li>The <kbd>/Y</kbd> option is not allowed with the
<a href="#R5x-OptJ"><kbd>/J</kbd> option</a>: <kbd>/Y</kbd> matches all regexes anywhere
on the line and it&#8217;s not likely any particular part will match all of
them.</li>
</ul>

<p class="brk">The <kbd>/Y</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/Y+</kbd>.
</p>




<h3 id="R5.4-OptOutput">5.4&nbsp; Output Options</h3>

<p class="brk"> Before reading about output options, you might like to glance
over the standard forms of <a href="#R3.1-OutputHits">GREP output</a>.</p>



<h4 id="R5x-OptB"><kbd>/B</kbd>&nbsp;&#8212; Display a Header for Every File Scanned</h4>

<p class="brk">Ordinarily, GREP displays a file header for each file that
contains matches, but with the <kbd>/B</kbd> option GREP displays a
file header for every file examined, even if the
file contains no matches.</p>

<p class="nonbrk">This option is meaningful only with
FIND-style output, when the <a href="#R5x-OptU"><kbd>/U</kbd> option</a> is not set.</p>

<p class="brk">The <kbd>/B</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/B+</kbd>.
</p>




<h4 id="R5x-OptC"><kbd>/C</kbd>&nbsp;&#8212; Display the Hit Count, Not the Actual Hits</h4>

<p class="brk">Use the <kbd>/C</kbd> option when you don&#8217;t want to display
the matches, only count them. (You can use the <a href="#R5x-OptK"><kbd>/K</kbd> option</a> with
<kbd>/C</kbd> to stop reading a particular file after a
certain number of matches are found.)</p>

<p class="nonbrk">GREP can count as high as 2<sup>32</sup>&#8722;1,
4,294,967,295.</p>

<p class="brk">Ordinarily, the <kbd>/C</kbd> option will count the lines,
records, or buffers that contain matches; in other words, even if a
line contains five matches it will count only as one. However, if you
use the <a href="#R5x-OptJ"><kbd>/J2</kbd> or <kbd>/J3</kbd> option</a> with <kbd>/C</kbd>,
GREP will count the actual matches rather than the lines containing
them. </p>

<p class="nonbrk">For free-form binary (the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a>), I recommend the
<a href="#R5x-OptJ"><kbd>/J2</kbd> or <kbd>/J3</kbd> option</a> since otherwise the buffer size
may affect the number of matches found.</p>

<p class="brk">The <kbd>/C</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/C+</kbd>.
</p>



<h4 id="R5x-OptH"><kbd>/H</kbd>&nbsp;&#8212; Don&#8217;t Display Filespecs in Output</h4>

<p class="brk">The <kbd>/H</kbd> option is most appropriate when you&#8217;re using
GREP as a filter to extract lines from one or more named file for
processing by another program, like this:</p>
<pre class="secondhalf">
        grep /H "Directory" <var>inputfiles</var> | <var>other program</var> </pre>

<p class="brk">The <kbd>/H</kbd> option is not needed and has no effect with
redirected input, such as</p>
<pre class="secondhalf">
        grep /H "Directory" &lt;<var>inputfile</var></pre>
<p class="secondhalf">or
<pre class="secondhalf">
        <var>other program</var> | grep /H "Directory" </pre>
<p class="secondhalf">GREP never displays a filespec header for redirected input.</p>

<p class="brk">If you want to keep the filename with each extracted line, use the
<a href="#R5x-OptU"><kbd>/U</kbd> option</a> instead of the
<kbd>/H</kbd> option.</p>

<p class="brk">The <kbd>/H</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/H+</kbd>.
</p>




<h4 id="R5x-OptJ"><kbd>/J</kbd><var>n</var>&nbsp;&#8212; Display Just the Parts of Each Line That Match</h4>

<p class="brk">Normally, GREP displays the whole line (or binary record or
buffer) that contains a match.
But with the <kbd>/J</kbd> option, you can display only the part(s) of the
line that match the regex(es):</p>

<table class="mynb">
<tr><td><kbd>/J0</kbd></td>
    <td>(default) Display the <strong class="key">entire line</strong> that contains a
    match.</td></tr>
<tr><td><kbd>/J1</kbd></td>
    <td>Display the <strong class="key">first part of the line that matches</strong> the
    regex.
    <p class="nonbrk">When there are multiple regexes (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>), GREP
    matches the regexes in order against the line, displays the
    first part of the line that matches the first matching regex,
    and doesn&#8217;t try to match that line against any later regexes.</p>
    <p class="nonbrk">Historical note: The behavior of <kbd>/J</kbd> with no
    number hasn&#8217;t changed from previous releases, and it&#8217;s the same as
    the new <kbd>/J1</kbd>. But it was a
    half measure, and chances are good that you want to use
    <kbd>/J2</kbd> or <kbd>/J3</kbd> now that they&#8217;re available.</p>
    </td></tr>
<tr><td><kbd>/J2</kbd></td>
    <td>Display
    <strong class="key">every non-overlapping part of the line that matches</strong>.
    (After displaying a match GREP continues from
    the <em>first character after the end</em> of the match, looking for
    further matches against any regex.)
    <p class="nonbrk">For details and examples, please see
    <a href="#R5-Jevery">Displaying every match in a file with
    <kbd>/J2</kbd> or <kbd>/J3</kbd></a>,
    below.</p></td></tr>
<tr><td><kbd>/J3</kbd></td>
    <td>Display <strong class="key">every part of the line that matches every
 regex, allowing all overlapping matches</strong>.
    (After displaying a match GREP continues from
    the <em>first character after the start</em> of the match, looking for
    further matches against any regex.)
    <p class="nonbrk">For details and examples, please see
    <a href="#R5-Jevery">Displaying every match in a file with
    <kbd>/J2</kbd> or <kbd>/J3</kbd></a>,
    below.</p></td></tr>
</table>

<p class="brk">With <kbd>/J0</kbd> (default) or <kbd>/J1</kbd> there&#8217;s
always exactly one output line for each input line that contains a
match, but <kbd>/J2</kbd> and <kbd>/J3</kbd> can produce multiple
lines of output from one input line. In fact, by allowing overlaps
<kbd>/J3</kbd> can report more matches than <kbd>/J2</kbd>.</p>

<p class="brk">The <kbd>/J</kbd> option is not allowed with the
<a href="#R5x-OptV"><kbd>/V</kbd> option</a>, because it doesn&#8217;t make any sense
to display only non-matches but display the part of each line that was
a match. <kbd>/J</kbd> is also forbidden with the
<a href="#R5x-OptY"><kbd>/Y</kbd> option</a>: <kbd>/Y</kbd> matches all regexes anywhere
on the line and it&#8217;s not likely any particular part will match all of
them.</p>

<h5 id="R5-Jevery">Displaying Every Match in a File with <kbd>/J2</kbd> or <kbd>/J3</kbd></h5>

<p class="brk">The <kbd>/J2</kbd> and <kbd>/J3</kbd> options were added in
release 7.4 to let you display every match in the file.
There&#8217;s only one difference between them: <kbd>GREP&nbsp;/J3</kbd>
reports all matches including overlapping matches, and
<kbd>GREP&nbsp;/J2</kbd> reports all non-overlapping matches.</p>

<p class="nonbrk"><strong class="key">Example (one variable-length regex):</strong>
Suppose your regex is <kbd>str[ab]*str</kbd> and
the line or buffer is <kbd>straaastrbbbstr</kbd>.&nbsp;
<kbd>GREP&nbsp;/J2</kbd> reports the match <samp>straaastr</samp>,
continues scanning at character 10, and doesn&#8217;t find another match.
But <kbd>GREP&nbsp;/J3</kbd> reports the match
<samp>straaastr</samp>, scans again from character 2, and reports
<samp>strbbbstr</samp> as a second match.</p>

<p class="nonbrk"><strong class="key">Example (one fixed-length regex):</strong>
Even with a fixed-length regex, <kbd>/J2</kbd> and
<kbd>/J3</kbd> can give you different results. Suppose your regex is
<kbd>abcabc</kbd> and the line is <kbd>abcabcabc</kbd>.&nbsp;
<kbd>GREP&nbsp;/J2</kbd> reports <samp>abcabc</samp>, then
GREP continues scanning at character 7 and doesn&#8217;t find another
match. But <kbd>GREP&nbsp;/J3</kbd> reports <samp>abcabc</samp>
(characters 1&#8211;6), then continues scanning at character 2 and
reports a second match <samp>abcabc</samp> (characters
4&#8211;9).</p>

<p class="brk">With <strong class="key">multiple regexes</strong> (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>), both
<kbd>/J2</kbd> and <kbd>/J3</kbd> display all matches in the order
they occur in the input file. For instance, if you specified the
regexes <kbd>[A-Z]+</kbd> and <kbd>[a-z]+</kbd> in that order, and
Grep reads an
input line
<kbd>wonderful Copenhagen</kbd>,
then GREP displays the three results <samp>wonderful</samp>,
<samp>C</samp>, and <samp>openhagen</samp> in that order.</p>

<p class="nonbrk">(This represents a change from release 7.4 to release 7.5.
Release 7.4 of GREP displayed multiple matches in regex
order&nbsp;&#8212; that would be <samp>C</samp>,
<samp>wonderful</samp>, and <samp>openhagen</samp> for the same
example.)</p>

<p class="brk">Things work as you expect and
<strong class="key">GREP always reports all matches when scanning text files or
record-oriented binary files</strong> (<a href="#R5x-OptR"><kbd>/R0</kbd> or <kbd>/R2</kbd> option</a>).
But there can be some surprises with free-format binary
(<a href="#R5x-OptR"><kbd>/R3</kbd> option</a>) if your regex is variable length or if you have
multiple regexes.</p>

<p class="nonbrk">The rest of this section goes into some detail about the
<strong class="key">interaction between free-form binary and <kbd>/J2</kbd> or
<kbd>/J3</kbd></strong>. Since the only potential problems have to do with a match
that straddles a buffer boundary, you can avoid them all
by setting the buffer size (<a href="#R5x-OptW"><kbd>/W</kbd> option</a>) at least as large as the
file size, if you have enough memory (including Windows virtual
memory) on your machine.</p>

<p class="brk"><strong class="key">With free-format binary files</strong> (<a href="#R5x-OptR"><kbd>/R3</kbd> option</a>
with <kbd>/J2</kbd> or <kbd>/J3</kbd>),
<strong class="key">GREP adopts a flexible read length.</strong> That means that
<kbd>GREP&nbsp;/J2</kbd> reports all matches in a
buffer, then discards everything up through the end of the last match
and reads additional characters to make a full buffer again;&nbsp;
<kbd>GREP&nbsp;/J3</kbd> is similar but discards everything up to and including
the start of the last match. This flexible read length guarantees that
<strong class="key">GREP finds every match for a fixed-length regex, even in
free-format binary files.</strong></p>

<p class="brk"><strong class="key">If your regex is variable length</strong>&nbsp;&#8212; if it contains
<a href="#R4.4-RegexStarPlus">quantifiers</a>
like <kbd>*&nbsp;?&nbsp;+</kbd> or <kbd>{,}</kbd>&nbsp;&#8212;
<strong class="key">and a match happens to cross a buffer boundary,</strong> every match will
be reported but
<strong class="key">GREP may or may not report the longest possible match.</strong></p>

<p class="nonbrk"><strong class="key">Example (variable-length regex with buffer boundary):</strong>
Your regex is <kbd>aa[a-z]*</kbd> and the
string <kbd>aabbccddeeff</kbd> happens to occur in the file, but
<kbd>aabbccdd</kbd> is at the end of one buffer and
<kbd>eeff</kbd> is at the start of the next. In this case
GREP reports <samp>aabbccdd</samp> as the match.</p>

<p class="nonbrk">This situation
arises only with (a)&nbsp;a variable-length regex
in (b)&nbsp;a free-format binary file where (c)&nbsp;the end of the
buffer matches the regex but (d)&nbsp;if you added some characters from
the start of the next buffer you would have a longer match for the
regex&nbsp;&#8212; and that&#8217;s a rare combination. If the match straddles a
boundary but the part at the end of the buffer isn&#8217;t a match, GREP
will keep reading and will report the whole match as long as it fits
in a buffer.</p>

<p class="brk">Finally,
<strong class="key">in a free-format binary file when you have multiple regexes</strong>
(<a href="#R5x-OptF"><kbd>/F</kbd> option</a>), <strong class="key">a match can be missed</strong> if it straddles
a record boundary under a combination of other circumstances (below).
Though I don&#8217;t recommend doing multiple regexes with the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a>
and <kbd>/J2</kbd> or <kbd>/J3</kbd>, GREP allows it and
matches the regexes in order against the buffer. It displays all the
matches for the first regex, then all the matches for the next regex,
and so on. But when
(a)&nbsp;there are multiple regexes being matched against (b)&nbsp;a
free-format binary file, and (c)&nbsp;a particular buffer matches more
than one regex, and (d)&nbsp;the later regex&#8217;s match
straddles a buffer boundary, then that later match may be missed.</p>

<p class="nonbrk"><strong class="key">Example (multiple regexes with buffer boundary):</strong>
Suppose your regexes are <kbd>somestr</kbd> and <kbd>string</kbd>,
and the file contains <kbd>somestring</kbd>.&nbsp; Normally
<kbd>GREP&nbsp;/J2</kbd> or <kbd>GREP&nbsp;/J3</kbd>
would report <samp>somestr</samp> and <samp>string</samp> as matches.
(They overlap, but they match separate regexes.)
But suppose the buffer boundary
happens to fall between the <kbd>somestrin</kbd> and the
<kbd>g</kbd>.&nbsp;
<kbd>GREP&nbsp;/J2</kbd> finds and reports <samp>somestr</samp>, then
starts scanning from the end of the match, which is the letter
<kbd>i</kbd>.
Coming to the end of the buffer without a match, GREP reads enough
characters after <kbd>in</kbd> to make up a full buffer. Since that buffer
begins with <kbd>ing</kbd>, GREP doesn&#8217;t find a match; thus the
match <kbd>string</kbd> is missed.</p>

<p class="nonbrk">In that example, <kbd>GREP&nbsp;/J3</kbd> does the right
thing: after reporting <samp>somestr</samp>
it resumes scanning from the <kbd>o</kbd>, then reads
additional characters and reports the <samp>string</samp> match.
But it&#8217;s possible to construct other scenarios where <kbd>/J3</kbd>
would miss a straddling match: for instance, regexes of
<kbd>456abcdefg</kbd> and <kbd>[a-z]+</kbd> where the string
<kbd>456abcdefg</kbd> actually exists in the file but there&#8217;s a
buffer boundary between <kbd>d</kbd> and <kbd>e</kbd>.
I don&#8217;t know of any way logically
to guarantee that <kbd>/J2</kbd> or <kbd>/J3</kbd> will find all
matches that straddle a buffer boundary when there are multiple
regexes and the buffer matches more than one.</p>

<p class="brk">This discussion has focused on the bad cases. Don&#8217;t lose
perspective:
<strong class="key">for most practical uses <kbd>/J2</kbd> or <kbd>/J3</kbd>
will work exactly as you expect.</strong> In particular, there are never any
worries for text files or record-oriented binary; and even for
free-format binary there are no worries with a fixed-length regex.</p>

<p class="nonbrk"><strong class="key">Recommendation:</strong> With <kbd>/J2</kbd> or <kbd>/J3</kbd>,
with multiple regexes or a variable-length regex,
make the <a href="#R5x-OptW"><kbd>/W</kbd> option</a> buffer width at least as large as the
file. If you can&#8217;t do this, search for multiple regexes one at a time.</p>



<h4 id="R5x-OptK"><kbd>/K</kbd><var>count</var>&nbsp;&#8212; Report Only the First Few Hits Per File</h4>

<p class="brk">GREP stops reading each file and moves on to the next after
reporting the first <var>count</var> <a href="#hits">hits</a>.
<var>count</var> may be any number from 0 to 9999. <kbd>/K0</kbd>
means to report all matches, and it is the default.</p>

<p class="nonbrk">No special message is displayed in the output when GREP stops
reading a file early because of the <kbd>/K</kbd> option. However,
the event is noted in the debug output (<a href="#R5x-OptD"><kbd>/D</kbd> option</a>).</p>

<p class="nonbrk">The <kbd>/K</kbd> option displays up to the indicated
number of matches per file. There is no option in GREP to stop
after displaying a certain number of matches total. But you can always
redirect GREP output (<kbd>&gt;</kbd><var>reportfile</var> or <kbd>|more</kbd>) and
then just look at the beginning of the output.</p>

<p class="brk">If you also use the <a href="#R5x-OptP"><kbd>/P</kbd> option</a> to
report context lines before and after matches, you may see more
matches than requested. For example, suppose you specify
<kbd>/K2P5,5</kbd> to get the first two hits per file, with five
lines of context before and after each one. Five lines are
reported after the second and last requested hit, naturally. Those
five context lines might contain additional hits, which are
shown, but the context doesn&#8217;t extend past the five lines that
follow the second hit, the last one you actually requested.</p>

<p class="brk">Interactions:</p><ul>

<li>With the <a href="#R5x-OptJ"><kbd>/J2 or /J3</kbd> option</a>, GREP
stops after the first <var>count</var> matches, not the first <var>count</var>
lines or buffers that contain matches.</li>

<li>The <kbd>/K</kbd> option and <a href="#R5x-OptV"><kbd>/V</kbd> option</a>
together report the first <var>count</var> lines that
<em>don&#8217;t</em> contain a match.</li>

<li>The <a href="#R5x-OptC"><kbd>/C</kbd> option</a> with the <kbd>/K<var>count</var></kbd> option counts matches
but stops reading any particular file after it finds <var>count</var>
matches in that file. The matches aren&#8217;t displayed, only the number of
matches (up to the value of <var>count</var>).</li>

<li>The <kbd>/K</kbd> option is ignored when you
also specify the
<a href="#R5x-OptL"><kbd>/L</kbd> option</a>.</li>

</ul>




<h4 id="R5x-OptL"><kbd>/L</kbd>&nbsp;&#8212; List Files That Contain Hits, Not the Actual Hits</h4>

<p class="brk">This option lets you get a bare list of files, usually for
further processing.</p>

<p class="brk">The <kbd>/L</kbd> option and
<a href="#R5x-OptV"><kbd>/V</kbd> option</a> together
list the files that don&#8217;t contain any matches.
When you bring in multiple regexes with the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> and
possibly the <a href="#R5x-OptY"><kbd>/Y</kbd> option</a>, things get a bit trickier:</p>

<div class="acchild"><table class="mystd" border="2">
<thead><tr><td rowspan=2></td><th colspan=2>with the <kbd>/L</kbd> option</th></tr>
       <tr><th>no <kbd>/Y</kbd> option</th><th><kbd>/Y</kbd> option set</th></tr></thead>
<tbody>
<tr><th class="al">no <kbd>/V</kbd> option</th>
    <td>(no <kbd>/V</kbd>, no <kbd>/Y</kbd>)
        GREP reports every file that contains a match for
        <strong class="key">one or more of the regexes</strong>.</td>
    <td>(<kbd>/Y</kbd>, no <kbd>/V</kbd>)
        GREP reports a file only if at least one of its lines matches
        <strong class="key">all of the regexes</strong> in any order.</td></tr>
<tr><th class="al"><kbd>/V</kbd> option set</th>
    <td>(<kbd>/V</kbd>, no <kbd>/Y</kbd>)
        GREP reports only the files that match <strong class="key">none of the regexes</strong>.
        (If any line of the input file matches even one of the
        regexes, GREP doesn&#8217;t report the file.)</td>
    <td>(<kbd>/V&nbsp;/Y</kbd>)
        GREP reports only files that <strong class="key">don&#8217;t contain any single 
 line matching all of the regexes</strong>.
        (If the file contains even one line that matches all the
        regexes in any order, GREP doesn&#8217;t report the file.)</td></tr>
</tbody>
</table></div>

<p class="brk">The <kbd>/L</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/L+</kbd>.
</p>

<h5 id="R5x-Lmultregex">Finding Files That Match a List of Regexes</h5>

<p class="brk">It might not be obvious how to list files that contain every
one of a set of regexes, not necessarily on the same line. This can&#8217;t
be done in one pass, but you can get the same effect by chaining calls
to GREP:</p>

<pre class="secondhalf">
        grep /L this * | grep /@- /L that | grep /@- /L tother</pre>

<p class="secondhalf">The first call to GREP identifies the files that contain
&#8220;this&#8221;;
the second call reads only those files and identifies those that also
contain &#8220;that&#8221;; the third call reads only that smaller group of files
and identifies the ones that also contain &#8220;tother&#8221;.</p>

<p class="nonbrk">This sort of chain runs faster if you search first for the
string you expect in the fewest files, thus minimizing the number
of files that have to be read multiple times.</p>

<p class="brk">If you want the actual <em>lines</em> that contain all three
regexes, use the <a href="#R5x-OptY"><kbd>/Y</kbd> option</a> instead of the <kbd>/L</kbd> option:</p>

<pre class="secondhalf">
        grep /F- /Y *</pre>
<p class="secondhalf"> and when prompted enter the three regexes in succession.</p>





<h4 id="R5x-OptN"><kbd>/N</kbd>&nbsp;&#8212; Show Line Numbers with Hits</h4>

<p class="brk">FIND-style output with the <kbd>/N</kbd> option looks like
this:</p>
<pre class="secondhalf">
    ---------- GREP.C
    [ 144]        op_showhead = ShowNoHeads;
    [ 178]        else if (op_showhead == ShowNoHeads)
    [ 366]        op_showhead = ShowNoHeads;

    ---------- GREP_MAT.C
    [  98]        op_showhead == ShowNoHeads) </pre>

<p class="brk">With <kbd>/N</kbd> and
the <a href="#R5x-OptU"><kbd>/U</kbd> option</a>
used together, the UNIX-style output looks like this:</p>
<pre class="secondhalf">
    GREP.C:144:        op_showhead = ShowNoHeads;
    GREP.C:178:        else if (op_showhead == ShowNoHeads)
    GREP.C:366:        op_showhead = ShowNoHeads;
    GREP_MAT.C:98:        op_showhead == ShowNoHeads) </pre>

<p class="secondhalf">UNIX-style output is suitable for use with the excellent freeware
editor <a href="http://www.vim.org">Vim</a>.</p>

<p class="brk">When is a &#8220;line number&#8221; not a line number? The
identifying number depends on the file read options:</p>
<ul class="loose">

<li>For a line from a text file (no <kbd>/G</kbd> option or
the <a href="#R5x-OptG"><kbd>/G0</kbd> or <kbd>/G1</kbd> option</a>), GREP displays a line number.

<p class="nonbrk">However, if you specify the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a>
and a text file contains lines longer than the limit given with the
<a href="#R5x-OptW"><kbd>/W</kbd> option</a>, each chunk of the line counts
separately. For example, if you specified <kbd>/G0&nbsp;/W256</kbd> but the file
contains a line of 612 characters, it counts as three lines and
subsequent line numbers are increased by 2. If this happens, GREP
warns you at the end of execution and suggests a <kbd>/W</kbd> value
to remedy this problem.</p></li>

<li>For a paragraph (<a href="#R5x-OptG"><kbd>/G2</kbd> option</a>), GREP displays the
line number followed by the paragraph number in parentheses, like
this:
<samp>8192(P1234)</samp>.</li>

<li>For a record from a record-oriented binary file (<a href="#R5x-OptR"><kbd>/R2</kbd> option</a>),
GREP displays the record number.</li>

<li>For a buffer from a <a href="#R2.4-InputsBinary">free-format
binary file</a>, the line number is replaced by
a file byte number in hex, like this: <samp>B00245120</samp>; the first
byte in the file is numbered 0.
This happens either under the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a> or because you
specified the <a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a> and GREP sensed that the file
was binary.</li>
</ul>

<p class="brk">The <kbd>/N</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/N+</kbd>.
</p>





<h4 id="R5x-OptO"><kbd>/O</kbd>&nbsp;&#8212; Set Output Format</h4>

<p class="brk">By default, GREP uses an output format that&#8217;s associated with
the type of the input file, as shown below.
But you can override that, if you wish, by using the letter <kbd>/o</kbd> option
and one of the following modes.
(Don&#8217;t confuse letter <kbd>/o</kbd> with the numeric <a href="#R5x-Opt0"><kbd>/0</kbd> option</a>.)</p>

<table class="mynb">
<tr><td><kbd>/o0</kbd></td>
    <td>(default for binary files)
    <br>That&#8217;s letter oh followed by digit zero.
    Use raw binary output, in the form of a hex dump side by side
    with any printable characters (see <a href="#R5x-Printable">Note
    1</a>). Here&#8217;s a sample:
    <pre class="secondhalf">
        [  11]0A202863 6F646520 706F696E 74202031  &gt;. (code point  1&lt;
              30292020 20                          &gt;0)              &lt;
        [  12]0B202863 6F646520 706F696E 74202031  &gt;. (code point  1&lt;
              31292020 20                          &gt;1)              &lt;
        [  13]0C202863 6F646520 706F696E 74202031  &gt;. (code point  1&lt;
              32292020 20                          &gt;2)              &lt;
        [  14]0D202863 6F646520 706F696E 74202031  &gt;. (code point  1&lt;
              33292020 20                          &gt;3)              &lt;
        [  15]0E202863 6F646520 706F696E 74202031  &gt;. (code point  1&lt;
              34292020 20                          &gt;4)              &lt;</pre>
    <p class="secondhalf">For another sample, see
    <a href="#R2.4.3-BinaryHits">How Does GREP Display Hits?</a>
    </p></td></tr>
<tr><td><kbd>/o1</kbd></td>
    <td>(default for text files read as paragraphs, <a href="#R5x-OptG"><kbd>/G2</kbd> option</a>)
    <br>Display text output na&iuml;vely&nbsp;&#8212; similar to the
    output of the <kbd>type</kbd> command on the Windows command line. If the file contains only
    printable characters and line breaks, this is the best mode. If it
    contains control characters like backspace (ASCII 8), tab (9),
    Control-Z (26), or NUL (0), it may not display properly.
    <p class="nonbrk">Before GREP release 8.0, this was the output mode for all
    text files, and it&#8217;s still the default output for
    <strong class="key">paragraph input</strong>.
    I suggest you select this output mode for all
    <strong class="key">plain text input files</strong>. Here&#8217;s what the output shown
    above would look like with <kbd>/o1</kbd>:</p>
    <p class="algebra"><img width="193" height="84" src="grepman1.gif"
    alt="program output, with funny characters and formatting"></p>
    <p class="secondhalf">You may have different funny characters at code points 11,
    12, and 14, depending on your country and code page among other
    things. Regardless, <kbd>/o1</kbd> isn&#8217;t a good choice for text
    files that contain control characters.</p>
    <p class="brk">One interesting side effect of <kbd>/o1</kbd> mode is that it&#8217;s
    perfect for converting UNIX or Macintosh-format text files to
    Windows format:</p>
    <p class="algebra"><kbd>grep /o1 .* &lt;unixfile &gt;dosfile</kbd></p>
    <p class="secondhalf">Implementation note:
    The other output modes all format one character at a time,
    but this mode just dumps the whole line&nbsp;&#8212; that&#8217;s
    <kbd>puts(&nbsp;)</kbd>, for C programmers.</p>
    </td></tr>
<tr><td><kbd>/o2</kbd></td>
    <td>(default for text files read as lines)
    <br>Display text output with this &#8220;safety filter&#8221;:
    control characters (ASCII 0&#8211;27) in
    <samp>^X</samp> format, printable characters (<a href="#R5x-Printable">see Note 1</a>) as themselves, and
    other characters as the sequence
    <samp>&lt;<var>NN</var>&gt;</samp> where <var>NN</var> is the
    two-digit hexadecimal code for the character. The same output
    looks like this under <kbd>/o2</kbd>:
    <pre class="secondhalf">
        [  11]^J (code point  10)
        [  12]^K (code point  11)
        [  13]^L (code point  12)
        [  14]^M (code point  13)
        [  15]^N (code point  14)</pre>
    <p class="secondhalf">This filter is recommended when you have
    <strong class="key">text that may contain a sprinkling of control characters</strong>,
    and it&#8217;s the default for <strong class="key">text files read as lines</strong> rather
    than paragraphs.</p></td></tr>
<tr><td><kbd>/o3</kbd></td>
    <td>Display text output with this &#8220;control filter&#8221;:
    Start a new line after any CR+LF or LF+CR pair or any single CR or LF.
    With this filter, CR (^M)
    and LF (^J) are displayed but also have the control function of
    &#8220;new line&#8221;; all other characters are treated the same as for
    <kbd>/o2</kbd>. Here&#8217;s the above output once more, this time with
    <kbd>/o3</kbd>:
    <pre class="secondhalf">
        [  11]^J
               (code point  10)
        [  12]^K (code point  11)
        [  13]^L (code point  12)
        [  14]^M
               (code point  13)
        [  15]^N (code point  14)</pre></td></tr>
<tr><td><kbd>/o&#8722;1</kbd></td>
    <td>Select an output format to match the input; this is GREP&#8217;s
    default. The normal selections, unless you override them, are that
    binary input is displayed with <kbd>/o0</kbd>, paragraph input is
    displayed with <kbd>/o1</kbd>, and line-oriented text input is displayed
    with <kbd>/o2</kbd>.</td></tr>
</table>

<p class="brk">Note 1: <dfn id="R5x-Printable">Printable characters</dfn> in GREP16
are ASCII 32&#8211;126. In GREP32, the definition of a printable
character depends on your locale, which you can set with the
<a href="#R5x-OptM"><kbd>/M</kbd> option</a>.</p>

<p class="brk">Note 2: With the <a href="#R5x-OptR"><kbd>/R&#8722;1</kbd> or <kbd>/R&#8722;2</kbd> option</a> you can
specify two output formats. For instance,
<kbd>grep&nbsp;/R&#8722;1&nbsp;/o3,0</kbd> says that you want text files
displayed in mode 3 and binary files in mode 0 (zero).</p>




<h4 id="R5x-OptP"><kbd>/P</kbd><var>before,after</var>&nbsp;&#8212; Show Context Lines around Matching Lines</h4>

<p class="brk">GREP shows matches in context by displaying
<var>before</var> input lines before each
match and <var>after</var> input lines after each match. If you omit
<var>after</var>, GREP shows <var>before</var> lines before and
another <var>before</var> lines after each match.
Plain <kbd>/P</kbd> is the same as <kbd>/P2,2</kbd>.</p>

<p class="nonbrk">Either number can be 0. For instance, use <kbd>/P0,4</kbd> if you
want to show every match and the four lines that follow it.
<kbd>/P0</kbd> or <kbd>/P0,0</kbd> tells GREP to show only the
matching lines with no context lines, and is the default.</p>

<p class="nonbrk">An alternative way to show context is provided by the
<a href="#R5x-OptG"><kbd>/G2</kbd> option</a>.</p>

<p class="brk">If you use the <kbd>/P</kbd> option, you probably want to use the
<a href="#R5x-OptN"><kbd>/N</kbd> option</a> as well,
to display line numbers. In that case,
the punctuation of the line numbers distinguishes which lines are
actual matches and which are displayed for context. Here is some
FIND-style output from a run with the options <kbd>/P1,1N</kbd>
set:</p>
<pre class="secondhalf">
        ---------- GREP.C
          143     if (opcount &gt;= argc)
        [ 144]        op_showhead = ShowNoHeads;
          145
          177             PRTDBG "with each matching line");
        [ 178]        else if (op_showhead == ShowNoHeads)
          179             PRTDBG "NO");
          365     if (myToggle('L') || myToggle('U'))
        [ 366]        op_showhead = ShowNoHeads;
          367     else if (myToggle('B'))

        ---------- GREP_MAT.C
           97         op_showwhat == ShowMatchCount ||
        [  98]        op_showhead == ShowNoHeads)
           99         headered = TRUE; </pre>

<p class="secondhalf">You can see that the actual matches have square brackets around the
line numbers, and the context lines do not.</p>

<p class="nonbrk">In UNIX format, with the <a href="#R5x-OptU"><kbd>/U</kbd> option</a> in addition to
<kbd>/N&nbsp;/P</kbd>, GREP displays colons around the
numbers of matching lines and spaces around the numbers of context
lines:</p>

<pre class="secondhalf">
        GREP.C 143     if (opcount &gt;= argc)
        GREP.C:144:        op_showhead = ShowNoHeads;
        GREP.C 145
        GREP.C 177             PRTDBG "with each matching line");
        GREP.C:178:        else if (op_showhead == ShowNoHeads)
        GREP.C 179             PRTDBG "NO");
        GREP.C 365     if (myToggle('L') || myToggle('U'))
        GREP.C:366:        op_showhead = ShowNoHeads;
        GREP.C 367     else if (myToggle('B'))
        GREP_MAT.C 97         op_showwhat == ShowMatchCount ||
        GREP_MAT.C:98:        op_showhead == ShowNoHeads)
        GREP_MAT.C 99         headered = TRUE; </pre>

<p class="brk">Interactions between the <kbd>/P</kbd> option and the
<a href="#R5x-OptR"><kbd>/R</kbd> option</a>:</p><ul>

<li>With the <a href="#R5x-OptR"><kbd>/R2</kbd> option</a>, GREP
displays the indicated numbers of binary records before and after any
record that contains a match.</li>

<li>With the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a>,
the <kbd>/P</kbd> option provides context in bytes
rather than lines. The <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> is required in this case;
otherwise the whole buffer is displayed and context bytes wouldn&#8217;t
make any sense.</li>

<li>With the <a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a>,
GREP honors the <kbd>/P</kbd> option when reading
text files but ignores it when reading binary files.</li>

<li>The <kbd>/P</kbd> option is not allowed with the <a href="#R5x-OptG"><kbd>/G2</kbd> option</a>.</li>

<li>The <kbd>P</kbd> is ignored when you also specify the
<a href="#R5x-OptC"><kbd>/C</kbd> option</a>, the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a>, or the <a href="#R5x-OptL"><kbd>/L</kbd> option</a>.</li>
</ul>

<p class="brk">GREP16 has to allocate space for the preview lines within the
same 64&nbsp;KB data segment as all other data. Consequently, if you
specify a moderately large value, particularly with a large line
width (<a href="#R5x-OptW"><kbd>/W</kbd> option</a>), you may get a
message that GREP can&#8217;t allocate space for the lines. To resolve this,
use GREP32 if possible; otherwise either reduce either the line width
or the first number after <kbd>/P</kbd> (the <var>before</var> number);
the second number, <var>after</var>, has no effect on memory use.</p>



<h4 id="R5x-OptU"><kbd>/U</kbd>&nbsp;&#8212; UNIX-style Output: Show Filespec with Each Hit</h4>

<p class="brk">GREP shows the <a href="#filespec">filespec</a> on the line
with each hit, instead of
just once in a separate header. This UNIX-style output is useful with
editors like <a href="http://www.vim.org">Vim</a> that can
automatically jump to the file that contains a match. Some examples of
UNIX-style output were given in <a href="#R3.1-OutputHits">List of
Hits</a> and with the <a href="#R5x-OptN"><kbd>/N</kbd> option</a> and the <a href="#R5x-OptP"><kbd>/P</kbd> option</a>.</p>

<p class="brk">There&#8217;s one small difference from UNIX grep output: UNIX grep
suppresses the filespec when there&#8217;s only one input file, but GREP
assumes that if you didn&#8217;t want the filespec you wouldn&#8217;t have
specified the <kbd>/U</kbd> option. Neither GREP nor UNIX grep
displays a filespec if input comes from a file via <kbd>&lt;</kbd>
redirection.</p>

<p class="brk">The <kbd>/U</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/U+</kbd>.
</p>




<h3 id="R5.5-OptGeneral">5.5&nbsp; General Options</h3>


<h4 class="secondheader" id="R5x-OptD"><kbd>/D</kbd><var>file</var> or <kbd>/D-</kbd> or <kbd>/D</kbd>&nbsp;&#8212; Display Debugging Output</h4>

<p class="brk">Debugging information includes
whether you&#8217;re running GREP16 or GREP32,
whether the program is <a href="grep101.htm#License">registered</a>,
the contents of the <a href="#R5.1.2-Envvar">environment variable</a>,
the values of all options specified or implied,
the input files specified,
the raw and interpreted values of the
<a href="#R4-Regex">regex(es)</a>,
details of every file scanned,
execution timings, and more.
This information is normally suppressed, but you may find it
helpful if GREP seems to behave in a way you don&#8217;t expect or if you
have a bug report.</p>

<p class="nonbrk">Since the debugging information can be voluminous, if you want to
see it at all you&#8217;ll usually want to
specify an output file: </p>

<table class="mynb">
<tr><td><kbd>/D</kbd><var>file</var></td>
    <td>Write all debug information to the given
    <a href="#filespec">filespec</a>.
    <var>file</var> must follow the <kbd>D</kbd> with no
    intervening space, and ends at the next space; it must not
    contain <a href="#wildcard">wildcards</a>.
    GREP appends to the file if it already exists.</td></tr>
<tr><td><kbd>/D-</kbd></td>
    <td>Send debugging information to the <a href="#stdout">standard
    output</a>, which you can redirect (&gt;) or pipe (|). This
    intersperses debug information with the normal output of
    GREP.</td></tr>
<tr><td><kbd>/D</kbd></td>
    <td>Send debugging information to the <a href="#stderr">standard
    error</a> stream (normally the screen). Be careful not to specify
    any other options between <kbd>/D</kbd> and the next space, or
    they&#8217;ll be taken as a filespec.</td></tr>
</table>

<p class="brk">You can weed through the debugging output to some extent. GREP
writes the following unique strings on most lines of debugging output,
so that you can send debug output to a file and then grep the file for
the bits that interest you:</p>
<ul>
<li><samp>grep GA:</samp> allocating <a href="#R6.2-MessagesMemory">memory</a>
<li><samp>grep GC:</samp> parsing the <a href="#R1-CmdLine">command line</a>
<li><samp>grep GM:</samp> reading files and matching
<a href="#R4-Regex">regexes</a> against <a href="#R2-Inputs">inputs</a>
<li><samp>grep GR:</samp> parsing and interpreting the
<a href="#R4-Regex">regexes</a>
<li><samp>grep GX:</samp> expanding
<a href="#R2.1-InputsNamed">input filespecs</a>, including subdirectories
</ul>





<h4 id="R5x-OptQ"><kbd>/Q</kbd><var>level</var>&nbsp;&#8212; Suppress the Logo and Unwanted Warnings</h4>

<p class="brk"><a href="grep101.htm#License">Registered users</a> can
set the quietness level to suppress messages you may not want to
see:</p>

<table class="mynb">
<tr><td><kbd>/Q0</kbd></td>
    <td>(default) Show all messages.</td></tr>
<tr><td><kbd>/Q1</kbd></td>
    <td>Suppress the program logo; all warnings still appear.</td></tr>
<tr><td><kbd>/Q2</kbd></td>
    <td>Suppress the program logo, as well as warnings about invalid
    combinations of options. Warnings about missing files still
    appear, and so does the warning about lines that were broken in the
    middle, possibly missing matches (see the
    <a href="#R5x-OptW"><kbd>/W</kbd> option</a>).</td></tr>
<tr><td><kbd>/Q3</kbd></td>
    <td>Suppress the program logo and all warnings. This level is not
    recommended unless you definitely know what you&#8217;re doing, because
    you might miss important error messages about your input files.</td></tr>
</table>

<p class="brk">Messages that force GREP to stop execution
are always displayed. The <kbd>/Q</kbd> option also has no effect
on debug output (<a href="#R5x-OptD"><kbd>/D</kbd> option</a>).</p>

<p class="nonbrk">All messages are listed <a href="#R6-Messages">later</a> in this
<cite>GREP Manual</cite>.</p>

<p class="brk">For compatibility with earlier releases of GREP, if you
specify a plain <kbd>/Q</kbd> option with no level number, it means
<kbd>/Q3</kbd> (suppress all warnings). After any <kbd>/Q</kbd> option
with or without a number, a plain <kbd>/Q</kbd> acts like
<kbd>/Q0</kbd> to re-enable all messages.</p>




<h4 id="R5x-OptZ"><kbd>/Z</kbd>&nbsp;&#8212; Reset All Options</h4>

<p class="brk">If you use the <kbd>/Z</kbd> option on the command line, any
options in the <a href="#R5.1.2-Envvar">environment variable</a> are
disregarded, and so are any preceding options on the command line.
I recommend putting <kbd>/Z</kbd> as the first option on every GREP
command in a batch file. This makes sure that GREP behaves as
expected, uninfluenced by any settings in the environment
variable.</p>

<p class="brk">The <kbd>/Z</kbd> option is the only single-letter option whose
effect can&#8217;t be reversed. If you use <kbd>/Z</kbd> more than once,
GREP disregards the environment variable and all command-line options
up through the last <kbd>/Z</kbd>.</p>





<h4 id="R5x-Opt0"><kbd>/0</kbd> or <kbd>/1</kbd>&nbsp;&#8212; Set ERRORLEVEL to Show Whether Matches Were Found</h4>

<p class="brk"><a name="R5x-Opt1"></a>These options control the values that
GREP returns to the command shell.
<kbd>/0</kbd> returns 0 if there are
matches or 1 if there are no matches; <kbd>/1</kbd> returns
1 for matches or 0 for no matches. For more details and interactions
with the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>, see
<a href="#R3.3-ERRORLEVEL">Return Values (ERRORLEVEL)</a>.</p>

<p class="brk">Be careful to distinguish the zero <kbd>/0</kbd> option from
the letter <a href="#R5x-OptO"><kbd>/o</kbd> option</a>.</p>





<h4 id="R5x-Opt3"><kbd>/3</kbd>&nbsp;&#8212; Set ERRORLEVEL to 3 for Warnings</h4>

<p class="brk">By default, GREP considers a run &#8220;successful&#8221; if there were
no error messages, whether or not there were any warnings. In other
words, the value of <a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a> doesn&#8217;t
reflect any warning messages.</p>

<p class="nonbrk">If you&#8217;d like to test for a &#8220;partially
successful&#8221; run of
GREP, meaning one where there were warnings but no errors, specify the
<kbd>/3</kbd> option. If you do this, then if there were warnings GREP
will set ERRORLEVEL to 3 rather than the usual 0 or 1 that would indicate
success.</p>

<p class="brk">The <kbd>/3</kbd> option is a toggle. If you specify it twice
(counting any uses in the <a href="#R5.1.2-Envvar">environment
variable</a> and on the command line), the second occurrence
cancels the first. If you don't know what's in the environment variable
and definitely want to turn this option on, use <kbd>/3+</kbd>.
</p>







<h4 id="R5x-OptHelp"><kbd>/?</kbd>&nbsp;&#8212; Display Help</h4>

<p class="brk">GREP displays a help message and summary of
<a href="#R2.1-InputsNamed">input filespecs</a>,
<a href="#R5-Options">options</a>, and <a href="#R4-Regex">regex forms</a>,
then exits with no further processing.</p>

<p class="nonbrk">Since the help message is more than 100 lines long, you
probably want to pipe it through <kbd>more</kbd> or a similar
filter, like this:</p>
<pre class="secondhalf">
        grep /? | more </pre>
<p class="secondhalf">You can also redirect this information. For instance,</p>
<pre class="secondhalf">
        grep /? &gt;grephelp.txt </pre>
<p class="secondhalf">sends the help text to a text file so that you can print it or
view it in an editor window.</p>



<h2 id="R6-Messages">6. Messages</h2>

<p class="brk">This section lists the error, warning, and information messages and
prompts produced by GREP, with explanations for most of them. Only
debug messages (<a href="#R5x-OptD"><kbd>/D</kbd> option</a>) are omitted.</p>

<p class="nonbrk">All messages listed here are written to the
<a href="#stderr">standard error</a> stream. If you
<a href="#R3.1.2-OutputRedirect">redirect GREP's output</a>, the
redirected output will
contain only the <a href="#hits">hits</a> found by GREP (or the counts per file, if you
used the <a href="#R5x-OptC"><kbd>/C</kbd> option</a>).</p>

<div class="Summary" id="TOC6"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R6.1-MessagesFailure">6.1&nbsp; Failure Messages</a></li>
<li><a href="#R6.2-MessagesMemory">6.2&nbsp; Insufficient Memory</a></li>
<li><a href="#R6.3-MessagesAlert">6.3&nbsp; User Alert Messages</a></li>
<li><a href="#R6.4-MessagesWarning">6.4&nbsp; Warning Messages</a></li>
<li><a href="#R6.5-MessagesInfo">6.5&nbsp; Information Messages</a></li>
<li><a href="#R6.6-MessagesPrompts">6.6&nbsp; Prompts</a></li>
</ul>
</div>
<h3 id="R6.1-MessagesFailure">6.1&nbsp; Failure Messages</h3>

<p class="brk">Any message that begins &#8220;GREP failure&#8221; indicates that GREP failed.
While this might be a problem in your operating system, it could also
be a problem in the code of GREP itself.
If you suspect the latter, please send full details to
&lt;<a href="mailto:support%40oakroadsystems.com">support&nbsp;at&nbsp;oakroadsystems.com</a>&gt;.
If possible, first re-run the program with the
<a href="#R5x-OptD"><kbd>/D-</kbd> option</a> and redirect output with
&gt;<var>file</var>; then send that output file with your trouble
report.</p>

<p class="nonbrk">With most of these errors, GREP returns 128 in
<a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>. Exceptions
are noted in the description.</p>

<dl>

<dt><samp>grep failure: expression length &gt; <var>n</var> in
expand_char_class</samp></dt>

    <dd><p class="secondhalf">Your <kbd>[&nbsp;]</kbd> <a href="#R4.7-RegexClass">character
    class</a> expands into too many characters for a basic regex. You
    can probably complete your task by using the
    <a href="#R5x-OptE"><kbd>/E2</kbd> option</a> to specify an extended
    regex. Please consult the description of
    <a href="#R4.1.1-RegexTwoKinds">differences between basic and extended
    regexes</a>.
    </dd>

<dt><samp>grep failure: expression too complex in expand_char_class</samp></dt>

    <dd><p class="secondhalf">See the following explanation.
    </dd>

<dt><samp>grep failure: expression too complex in makepat</samp></dt>

    <dd><p class="secondhalf">GREP could not parse your basic regex because it was too
    complicated. You may be able to complete your task by using the
    <a href="#R5x-OptE"><kbd>/E2</kbd> option</a> to specify an extended
    regex. Please consult the description of
    <a href="#R4.1.1-RegexTwoKinds">differences between basic and extended
    regexes</a>.
    </dd>

<dt><samp>grep failure: internal error in expand_char_class</samp></dt>

    <dd><p class="secondhalf">GREP got into a fugue state over your
    <a href="#R4.7-RegexClass">character class</a> <kbd>[&nbsp;]</kbd> in a
    basic regex. Please report this problem to the address
    <a href="#R6.1-MessagesFailure">above</a>.
    <p class="nonbrk">You can probably complete your task
    by using the <a href="#R5x-OptE"><kbd>/E2</kbd> option</a> to
    specify an extended regex. Please consult the description of
    <a href="#R4.1.1-RegexTwoKinds">differences between basic and extended
    regexes</a>.
    </dd>

<dt><samp>grep failure: internal error (<var>pattern</var>) in skip_match</samp></dt>

    <dd><p class="secondhalf">Two lists in GREP of the constructs allowed in a basic regex
    are out of sync. Please report this to the address indicated
    <a href="#R6.1-MessagesFailure">above</a>.
    </dd>

<dt><samp>grep failure: internal error (<var>pattern</var>) in skip_pat</samp></dt>

    <dd><p class="secondhalf">Two lists in GREP of the constructs allowed in a basic regex
    are out of sync. Please report this to the address indicated
    <a href="#R6.1-MessagesFailure">above</a>.
    </dd>

<dt><samp>grep failure: no read function in do_stream</samp></dt>

    <dd><p class="secondhalf">Two lists in GREP of the file read modes are out of sync.
    Please report this error to the address indicated
    <a href="#R6.1-MessagesFailure">above</a>.
    </dd>

</dl>



<h3 id="R6.2-MessagesMemory">6.2&nbsp; Insufficient Memory</h3>

<dl>

<dt><samp>grep: insufficient memory&nbsp;... </samp></dt>

    <dd><p class="secondhalf">GREP couldn&#8217;t allocate enough memory from the heap, and
    returns 253 in ERRORLEVEL.
    You might try one or more of these general suggestions:</p>
    <ul class="purelist">

    <li><p>Run GREP32 instead of GREP16, if you can. If
    you&#8217;re already running GREP32, try closing some memory-hungry
    Windows or programs.</p></li>

    <li><p>If you&#8217;re running GREP16 and the input has very long lines
    (thousands of characters), add the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a> to your
    command line.</p></li>

    <li><p>Reduce the values given with the
    <a href="#R5x-OptP"><kbd>/P</kbd> option</a> and the
    <a href="#R5x-OptW"><kbd>/W</kbd> option</a>.
    GREP needs about this many bytes for the context buffer:
    (9 plus the <kbd>/W</kbd> value) times (1 plus the <var>before</var>
    value from <kbd>/P</kbd>).</p></li>

    <li><p>If your extended regex
    (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>) is very complex, try
    to simplify it.</p></li>

    <li><p>If you set the
    <a href="#R5x-OptS"><kbd>/S</kbd> option</a> and you have many, many
    levels of subdirectories, try running GREP in stages at different
    levels. (The number of subdirectories at each level doesn&#8217;t
    matter, it&#8217;s the number of levels.) Alternatively, use the
    <kbd>dir&nbsp;/s/b</kbd> command to create a file list, and pass
    that list to GREP with the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>
    but without the <kbd>/S</kbd> option.</p></li>

    <li><p>If you have many, many regexes
    (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>), try running GREP
    successively with fewer regexes at a time.</p></li>

    <li><p>If you&#8217;re running with the <a href="#R5x-OptG"><kbd>/G2</kbd> option</a>, try
    switching to binary mode (<a href="#R5x-OptR"><kbd>/R3</kbd> option</a>) with a suitable buffer
    width in the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>.</p></li>

    </ul>
    </dd>

</dl>

<h3 id="R6.3-MessagesAlert">6.3&nbsp; User Alert Messages</h3>

<p class="brk">These messages all indicate something you did that
prevents GREP from finishing its task. (Most programs would call them
&#8220;fatal errors.&#8221;) Except as noted, GREP returns 255 in
<a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a> after any of
these.</p>

<dl>

<dt><samp>grep user alert: bad chars or no value in /<var>x</var> option</samp></dt>

    <dd><p class="secondhalf">The option requires a following number, but either you didn&#8217;t
    give one or you included forbidden characters. (For instance, some
    options allow negative numbers and others don&#8217;t.) Please consult
    the description of the <a href="#R5-Options">option</a>.
    </dd>

<dt><samp>grep user alert: bad token '<var>token</var>' in environment variable
ORS_GREP&nbsp;-- options must start with&nbsp;- or&nbsp;/</samp></dt>

    <dd><p class="secondhalf">You can&#8217;t store a regular expression or input
    <a href="#filespec">filespecs</a> in the
    <a href="#R5.1.2-Envvar">environment variable</a>, only
    <a href="#R5-Options">options</a>.
    Type
    <pre class="secondhalf">
            echo %ORS_GREP%</pre>
    <p class="secondhalf">to see the contents of the variable.
    (You can store a regex or input filespecs in a file
    and reference them in the environment variable with the
    <a href="#R5x-OptF"><kbd>/F</kbd> option</a> or
    <a href="#R5x-OptAt"><kbd>/@</kbd> option</a> respectively.)
    </dd>

<dt><samp>grep user alert: can't open debug file <var>file</var> for append</samp></dt>

    <dd><p class="secondhalf">You specified a file with the <a href="#R5x-OptD"><kbd>/D</kbd> option</a>,
    but it can&#8217;t be opened for output. Check whether your
    disk is full or write protected, or the file is in use by another
    process. GREP returns 254 in
    <a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>.
    </dd>

<dt><samp>grep user alert: can't open file <var>file</var> to read input
filespecs</samp></dt>

    <dd><p class="secondhalf">The file you specified with the
    <a href="#R5x-OptAt"><kbd>/@</kbd> option</a> either doesn&#8217;t exist or
    can&#8217;t be opened for reading. GREP returns 254 in
    <a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>.
    </dd>

<dt><samp>grep user alert: can't open file <var>file</var> to read regular
expressions</samp></dt>

    <dd><p class="secondhalf">The file you specified with the
    <a href="#R5x-OptF"><kbd>/F</kbd> option</a> either doesn&#8217;t exist or
    can&#8217;t be opened for reading. GREP returns 254 in
    <a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>.
    </dd>

<dt><samp>grep user alert: characters out of order in regex</samp></dt>

    <dd><p class="secondhalf">You used a <a href="#R4.7.1-RegexClassMinus">character range</a> (-
    between square brackets), but the characters were out of order.
    For instance, <kbd>[a-Z]</kbd> is an error because Z (ASCII 90)
    precedes a (ASCII 97) in the collating sequence.
    </dd>

<dt><samp>grep user alert: character class '<var>class</var>' never ended</samp></dt>

    <dd><p class="secondhalf">Your regex specified a [ to begin a
    <a href="#R4.7-RegexClass">character class</a>, but there was no ]
    or the only ] character immediately
    followed the [ or [^.
    <p class="nonbrk">To search for an actual left square
    bracket character, you need to precede it with a backslash
    <kbd>\[</kbd> or else use <kbd>[[]</kbd> to make it a class all its own.
    </dd>

<dt><samp>grep user alert: empty character class</samp></dt>

    <dd><p class="secondhalf">This error message is obsolete since [] now means a
    <a href="#R4.7-RegexClass">character class</a> including a ]
    character, not an empty class.
    If it occurs, please report this error to the address indicated
    <a href="#R6.1-MessagesFailure">above</a>.
    </dd>

<dt><samp>grep user alert: error at offset <var>n</var> of extended regex:
<var>details</var></samp></dt>

    <dd><p class="secondhalf">Offset 0 is the first character of the extended regex.
    </dd>

<dt><samp>grep user alert: /F- is available, but /Ffile is only in the
registered version</samp></dt>

    <dd><p class="secondhalf">The <a href="grep101.htm#License">unregistered version</a> of GREP lets you enter regexes from keyboard
    (<a href="#R5x-OptF"><kbd>/F-</kbd> option</a>), but if you want to
    read regexes from a named file <kbd>/F<var>file</var></kbd> option
    you need the registered version.
    </dd>

<dt><samp>grep user alert: for /E2 to /E4 you need 32-bit GREP</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptE"><kbd>/E2</kbd> option</a> specifies
    <a href="#R4.1.1-RegexTwoKinds">extended regexes</a>, but these are not
    supported in GREP16. Either remove the <kbd>/E2</kbd> or
    <kbd>E3</kbd> option, or use GREP32.
    </dd>

<dt><samp>grep user alert: invalid option '<var>x</var>'</samp></dt>

    <dd><p class="secondhalf">For a quick list of options, please type <kbd>grep&nbsp;|&nbsp;more</kbd>
    or look at the <cite>GREP Quick Reference Card</cite> (GREPQRC.DOC) or the
    <a href="grep101.htm#Options"><cite>GREP Quick Start</cite></a>.
    You&#8217;ll find
    the <a href="#R5-Options">full descriptions</a> in this
    <cite>GREP Manual</cite>.
    </dd>

<dt><samp>grep user alert: line <var>n</var> of listfile <var>file</var>
exceeds <var>limit</var> chars</samp></dt>

    <dd><p class="secondhalf">Each input <a href="#filespec">filespec</a> read from file
    (<a href="#R5x-OptAt"><kbd>/@</kbd> option</a>) is limited to
    the longest path and filename allowed by the Microsoft run-time code. The
    <var>limit</var> is 128 characters in GREP16 and 260 in GREP32.
    </dd>

<dt><samp>grep user alert: line <var>n</var> of regex file <var>file</var> exceeds 127 chars</samp></dt>

    <dd><p class="secondhalf">Each regex read from file (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>)
    is limited to 127 characters, even if you are reading extended regexes.
    This limit could be increased in a future release if it&#8217;s too
    restrictive.
    </dd>

<dt><samp>grep user alert: malformed filespec</samp></dt>

    <dd><p class="secondhalf">You specified an improper character class [&#133;] in
    <a href="#R2.1.1-InputsWildcards">filename globbing</a> (wildcard
    expansion).

<dt><samp>grep user alert: malformed /X pattern</samp></dt>

    <dd><p class="secondhalf">Your exclusion pattern was not valid. The error message gives details
    of the problem, or you can consult the description of the
    <a href="#R5x-OptX"><kbd>/X</kbd> option</a>.
    </dd>

<dt><samp>grep user alert: no input filespecs found in file</samp></dt>

    <dd><p class="secondhalf">You specified the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a> to submit a list of
    input <a href="#filespec">filespecs</a> in a file, but that file was empty.
    </dd>

<dt><samp>grep user alert: no more than one @ option is allowed
    </samp></dt>

<dt><samp>grep user alert: no more than one F option is allowed
    </samp></dt>

<dt><samp>grep user alert: no regex was specified</samp></dt>

    <dd><p class="secondhalf">You didn&#8217;t specify a regex on the command line, and either<p>
    <ul class="purelist">

    <li>you didn&#8217;t use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a> at all, or

    <li>you used the <kbd>/F-</kbd> option but pressed Control-Z
    before entering any regexes, or

    <li>you used the <kbd>/F<var>file</var></kbd> option but the file
    was empty or contained only blank lines.
    </ul>
    </dd>

<dt><samp>grep user alert: nothing on command line</samp></dt>

    <dd><p class="secondhalf">You didn&#8217;t specify options, a regex, or any files. If you were
    trying to generate the help message, use
    <pre class="secondhalf">
            grep&nbsp;/?&nbsp;|&nbsp;more</pre>
    </dd>

<dt><samp>grep user alert: pattern exceeds the limit of 127 characters</samp></dt>

    <dd><p class="secondhalf">A basic regex can&#8217;t be longer than 127 characters. If this
    limit is truly a problem, it could be increased in a future
    release. In the meantime, you may be able to complete your task by
    using the <a href="#R5x-OptE"><kbd>/E2</kbd> option</a> to specify
    an extended regex. Please consult the description of
    <a href="#R4.1.1-RegexTwoKinds">differences between basic and extended
    regexes</a>.
    </dd>

<dt><samp>grep user alert: /R1 is reserved for future use.
    </samp></dt>

<dt><samp>grep user alert: /R-1 is available only in the registered version.</samp></dt>

<dt><samp>grep user alert: /R-2 is available only in the registered version.</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a> tells
    GREP to sense the type of each file
    automatically. This is an added benefit in the
    <a href="grep101.htm#License">registered version</a>.
    </dd>

<dt><samp>grep user alert: read error in <var>filespec</var></samp></dt>

    <dd><p class="secondhalf">After initially opening the named input file for reading, GREP
    received an error from the operating system when it tried to read
    another line. Perhaps some other process deleted the file while
    GREP had it open, or the disk drive became unavailable. GREP
    returns 254 in
    <a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>.
    </dd>

<dt><samp>grep user alert: regex can't contain \0; use [^\1-\255]</samp></dt>

    <dd><p class="secondhalf">While the NUL character (ASCII 0) causes no problem in an
    input file, it signals the end of a basic regex.
    Either use the workaround suggested by the message,
    or use an extended regex
    (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>).
    </dd>

<dt><samp>grep user alert: search string too long in makestr</samp></dt>

    <dd><p class="secondhalf">With the <a href="#R5x-OptE"><kbd>/E0</kbd> option</a>, your
    search string must be 511 characters or less. You may be able to
    complete your task by using the <a href="#R5x-OptE"><kbd>/E2</kbd> option</a>
    to specify an extended regex, but you may need to put
    backslashes before <a href="#R4.1-RegexOverview">certain characters</a>.
    Please consult the
    description of <a href="#R4.1.1-RegexTwoKinds">extended regexes</a>.
    </dd>

<dt><samp>grep user alert: second argument to M option was not recognized</samp></dt>

    <dd><p class="secondhalf">The second argument to the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>
    allows only specified strings.
    </dd>

<dt><samp>grep user alert: the @ option requires a filespec or a
hyphen</samp></dt>

    <dd><p class="secondhalf">Please see the description of the
    <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>.
    </dd>

<dt><samp>grep user alert: the F option requires a filespec or a
hyphen</samp></dt>

    <dd><p class="secondhalf">Please see the description of the
    <a href="#R5x-OptF"><kbd>/F</kbd> option</a>.
    </dd>

<dt><samp>grep user alert: the V option is incompatible with J</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> displays only
    matches, not the full line, record, or buffer containing them. The
    <a href="#R5x-OptV"><kbd>/V</kbd> option</a> displays lines,
    records, or buffers that <em>don&#8217;t</em> contain a match. Remove
    one of the options and run GREP again.
    </dd>

<dt><samp>grep user alert: the X option requires a pattern</samp></dt>

    <dd><p class="secondhalf">Please see the description of the
    <a href="#R5x-OptX"><kbd>/X</kbd> option</a>.
    </dd>

<dt><samp>grep user alert: the X option pattern must not include a path</samp></dt>

    <dd><p class="secondhalf">Exclusion patterns are tested only against the filename and
    extension, not the path. Please see the description of the
    <a href="#R5x-OptX"><kbd>/X</kbd> option</a>.
    </dd>

<dt><samp>grep user alert: the Y option is incompatible with J</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> displays only
    matches, not the full line, record, or buffer containing them. The
    <a href="#R5x-OptY"><kbd>/Y</kbd> option</a> displays lines,
    records, or buffers that match every one of multiple regexes. Remove
    one of the options and run GREP again.
    </dd>

<dt><samp>grep user alert: unsupported locale <var>x</var> in M option</samp></dt>

    <dd><p class="secondhalf">See the description of the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>
    for the supported locales. Some additional locales are
    supported, but if you look at Microsoft&#8217;s documentation you&#8217;ll see
    some locales listed that are not actually supported in the
    run-time library.
    </dd>

<dt><samp>grep user alert: value out of range (must be <var>min</var> to <var>max</var>) for <var>option</var></samp></dt>

    <dd><p class="secondhalf">You specified a numeric value that is not allowed for the
    option. Please check the <a href="#R5-Options">option
    description</a> in this <cite>GREP Manual</cite>. Note that GREP16 and GREP32 have
    different valid ranges for some options.
    </dd>

</dl>


<h3 id="R6.4-MessagesWarning">6.4&nbsp; Warning Messages</h3>

<p class="brk"><a href="grep101.htm#License">Registered users</a> can
suppress most of these warnings with the <a href="#R5x-OptQ"><kbd>/Q</kbd> option</a> as indicated.</p>

<dl>

<dt><samp>grep warning: binary buffer width was increased to <var>bnwid</var> bytes</samp></dt>

    <dd><p class="secondhalf">If you specify the <a href="#R5x-OptR"><kbd>/R3</kbd> or <kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a>,
    GREP needs the binary buffer to be an even number of bytes. If you
    specify an odd number of bytes in the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>, GREP
    adjusts it to the next higher even number.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>


<dt><samp>grep warning: In the registered version, the S option
travels all the way down the directory tree. But in this evaluation
version, GREP works its way down only one level below the starting
point. GREP gives warning messages for lower-level directories that
were skipped.</samp></dt>

    <dd><p class="secondhalf">If you specify the <a href="#R5x-OptS"><kbd>/S</kbd> option</a>
    (search subdirectories) in the
    <a href="grep101.htm#License">unregistered version</a>, this
    warning appears before GREP starts reading directories and files.
    </dd>


<dt><samp>grep warning: line <var>n</var> of listfile <var>file</var> is
empty&nbsp;-- ignored</samp></dt>

    <dd><p class="secondhalf">Blank lines are ignored when reading input
    <a href="#filespec">filespecs</a> from file
    (<a href="#R5x-OptAt"><kbd>/@</kbd> option</a>).

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: line <var>n</var> of regex file <var>file</var> is
empty&nbsp;-- ignored.</samp></dt>

    <dd><p class="secondhalf">Blank lines are ignored when reading regexes from file
    (<a href="#R5x-OptF"><kbd>/F</kbd> option</a>).

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: no files exist like <var>filespec</var></samp></dt>

    <dd><p class="secondhalf">At the end of execution, GREP checks whether it opened at
    least one file for each <a href="#filespec">filespec</a> on the
    command line. It displays this warning for each filespec that
    didn&#8217;t match any actual files.
    If you have the <a href="#R5x-OptS"><kbd>/S</kbd> option</a> in
    effect for subdirectory searches, this warning appears for each
    filespec when not even one directory contains a file that matches
    the filespec.</p>

    <p class="nonbrk">(GREP performs a similar diagnosis for each filespec
    while reading a list file; see the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>.)</p>

    <p class="nonbrk">If you used the <a href="#R5x-OptX"><kbd>/X</kbd> option</a>,
    GREP adds the reminder &#8220;Maybe your /X exclusions
    ruled out matching files?&#8221; See <a href="#R2.1.3-InputsMissing">Missing
    Files</a>.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

<dt><samp>grep warning: no files were found for any of your input filespecs</samp></dt>

    <dd><p class="secondhalf">GREP displays this warning for <em>each</em> input
    <a href="#filespec">filespec</a>
    that doesn&#8217;t lead to opening any files.
    (No warning is displayed for files that exist but contain no
    <a href="#hits">hits</a>.)
    If you have multiple filespecs on the command line or you used
    the <a href="#R5x-OptQ"><kbd>/@</kbd> option</a>, and if
    <em>none</em> on your input filespecs actually led to opening any
    files, GREP displays this additional warning.</p>

    <p class="nonbrk">If no files are found for any of your input
    filespecs, and there are no more serious problems, GREP
    returns 4 in <a href="#R3.3-ERRORLEVEL">ERRORLEVEL</a>
    whether or not this warning is displayed.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: redirected input (&lt;file) is ignored with named
input files</samp></dt>

    <dd><p class="secondhalf">You specified some input files on the command line, but you
    also redirected input and you weren&#8217;t using the redirected input
    for a list of regexes with the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a>
    or a list of input files with the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>.

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

<dt><samp>grep warning: short record in file <var>file</var>&nbsp;--
expected <var>bnwid</var> bytes, got <var>n</var>. Did you specify the
/W option correctly?</samp></dt>

    <dd><p class="secondhalf">With fixed-length binary records (<a href="#R5x-OptR"><kbd>/R2</kbd> option</a>), the
    file size should be an exact multiple of the record size that you
    specify with the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>. A partial record at the end
    means either that you specified the record size incorrectly, or
    that you meant to use the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a> to read
    free-form binary.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

<dt><samp>grep warning: Some matches in the middle of long lines may have
been missed. You might want to try the /W<var>n</var> option, or drop
the /G0 option.</samp></dt>

    <dd><p class="secondhalf">When reading text files, GREP release 7.5 and later
    automatically expand the read buffer to accommodate the longest
    line in the input. You&#8217;ll never see the above message unless you
    use the <a href="#R5x-OptG"><kbd>/G0</kbd> option</a> and have long lines in your input.</p>

    <p class="nonbrk">With the <kbd>/G0</kbd> option, GREP uses a fixed-size
    buffer for text files and breaks long lines in the middle.
    (See the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>.)
    In this case, GREP keeps track of every
    line that is longer than your stated maximum. At the end of the run,
    it gives you this warning and suggests the value needed with
    <kbd>/W</kbd> to solve the problem.
    <p class="nonbrk">You should either re-run GREP with the
    suggested <kbd>/W</kbd> option value, or drop the <kbd>/G0</kbd> option,
    to make sure you don&#8217;t
    miss any matches. If you want to know which files have the
    oversize lines, use the <a href="#R5x-OptD"><kbd>/D</kbd> option</a>.</p>

    <p class="nonbrk">If the <kbd>/G0</kbd> option is in your
    <a href="#R5.1.2-Envvar">environment variable</a>, you can
    override it by putting the <a href="#R5x-OptG"><kbd>/G1</kbd> option</a> on the command
    line.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

<dt><samp>grep warning: Special Rules for the Command Line don't apply with F option</samp></dt>

    <dd><p class="secondhalf">The <a href="#R4.12-RegexCmdLine">Special Rules</a> are a set of
    hacks to let you get various special characters, which have
    special meaning to the command prompt,
    into a regex. (The Special Rules, turned on by default, can be
    turned on or off with the <a href="#R5x-OptE"><kbd>/E</kbd> option</a>.) When you use the
    <a href="#R5x-OptF"><kbd>/F</kbd> option</a> to enter regexes from file
    or keyboard, there is no need for those hacks and they are not
    applied.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: second argument to M option requires E2 or greater</samp></dt>

    <dd><p class="secondhalf">The long form of the <a href="#R5x-OptM"><kbd>/M</kbd> option</a> lets
    you redefine a <a href="#R4.7.4-RegexClassName">&#8220;word&#8221; character</a> for purposes
    of extended regexes (<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>).
    That has no effect with simple searches or basic regexes
    (<a href="#R5x-OptE"><kbd>/E0</kbd> or <kbd>/E1</kbd> option</a>).</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: subdirectory skipped: <var>subdir</var></samp></dt>

    <dd><p class="secondhalf">In the <a href="grep101.htm#License">unregistered version</a>
    of GREP, the <a href="#R5x-OptS"><kbd>/S</kbd> option</a> searches
    down only two levels of subdirectories. GREP then displays this
    warning for each subdirectory further down the tree.

    <p class="nonbrk">This message never appears in the
    <a href="grep101.htm#License">registered version</a> of GREP.
    </dd>

<dt><samp>grep warning: the A option is ignored when scanning only standard input</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptA"><kbd>/A</kbd> option</a> says to include
    hidden and system files when expanding
    <a href="#R2.1.1-InputsWildcards">wildcard filespecs</a>, but that
    doesn&#8217;t make any sense when no input files were named. If you
    didn&#8217;t specify any input files on the command line or via the
    <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>, the <kbd>/A</kbd> option is ignored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the B option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptB"><kbd>/B</kbd> option</a> shows the name of every file read,
    whether or not it contains any <a href="#hits">hits</a>. But the
    <a href="#R5x-OptL"><kbd>/L</kbd> option</a> shows only the names of
    files that contain hits. If you specify both options, the
    <kbd>/L</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the B option is ignored when U is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptB"><kbd>/B</kbd> option</a> shows the
    <a href="#filespec">filespec</a> of every file read, whether or
    not it contains any <a href="#hits">hits</a>, on a
    separate header line. But the <a href="#R5x-OptU"><kbd>/U</kbd> option</a>
    shows hits in UNIX style, with the filespec on every line. If you
    specify both options, the <kbd>/U</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the E3 option is treated as E2 plus J1</samp></dt>

    <dd><p class="secondhalf">GREP release 6.0 added the ability to display matches without
    the lines, records, or buffers that contained them (like the present
    <a href="#R5x-OptJ"><kbd>/J1</kbd> option</a>), but only when you
    specified extended regexes (like the present
    <a href="#R5x-OptE"><kbd>/E2</kbd> option</a>). That combination was
    specified by <kbd>/E3</kbd>. In the next release the
    <kbd>/J</kbd> option was added, independent of your choice of
    basic or extended regex, and <kbd>/E3</kbd> became obsolete;
    then in release 7.4 <kbd>/J</kbd> became <kbd>/J1</kbd>.
    <kbd>/E3</kbd>
    is still honored for users who may have embedded it in batch files
    or their <a href="#R5.1.2-Envvar">environment variable</a>.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the G option is ignored with /R2 or /R3</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptR"><kbd>/R2</kbd> or <kbd>/R3</kbd> option</a> tells GREP to read all
    files as binary. With that setting, the <a href="#R5x-OptG"><kbd>/G</kbd> option</a>,
    which tells GREP how to handle text lines, is useless.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the H option is ignored when B is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptB"><kbd>/B</kbd> option</a> shows a file
    header for every file examined, whether or not it contains any
    <a href="#hits">hits</a>. The <a href="#R5x-OptH"><kbd>/H</kbd> option</a> suppresses
    all file headers. If you specify both options, the <kbd>/B</kbd> option
    is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the H option is ignored when C is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptC"><kbd>/C</kbd> option</a> shows the
    count of <a href="#hits">hits</a> with every file header (and
    doesn&#8217;t show the actual hits), but the <a href="#R5x-OptH"><kbd>/H</kbd> option</a>
    suppresses all <a href="#filespec">filespec</a> headers. If you
    specify both options, the <kbd>/C</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the H option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptL"><kbd>/L</kbd> option</a> shows the names
    of files that contain <a href="#hits">hits</a> (and doesn&#8217;t show the actual
    hits), but the <a href="#R5x-OptH"><kbd>/H</kbd> option</a>
    suppresses all <a href="#filespec">filespec</a> headers.
    If you specify both options, the <kbd>/L</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the H option is ignored when U is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptU"><kbd>/U</kbd> option</a> shows matches
    in UNIX style, putting the filename on every line instead of
    displaying filename headers. The <a href="#R5x-OptH"><kbd>/H</kbd> option</a>
    suppresses filename headers, and therefore it is
    included in the action of the <kbd>/U</kbd> option.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the J option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptL"><kbd>/L</kbd> option</a> shows only the
    <a href="#filespec">filespecs</a> of files that contain matches, but the
    <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> shows actual matches. If
    you specify both options, the <kbd>/L</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the J1 option is ignored when C is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptC"><kbd>/C</kbd> option</a> shows the
    count of <a href="#hits">hits</a> with every file header (and doesn&#8217;t show the
    actual hits). The <a href="#R5x-OptJ"><kbd>/J1</kbd> option</a>
    shows actual matches (though not the lines, records, or buffers
    that contain them). If you specify both options, the
    <kbd>/C</kbd> option is honored.</p>

    <p class="nonbrk">Notice that this message mentions the <kbd>J1</kbd> option specifically.
    You can use <kbd>/J2&nbsp;/C</kbd> or <kbd>/J3&nbsp;/C</kbd>
    to count individual matches
    rather than the number of lines that contain matches.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the K option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptK"><kbd>/K</kbd> option</a> displays a set maximum number of
    <a href="#hits">hits</a>
    per file. The <a href="#R5x-OptL"><kbd>/L</kbd> option</a> stops and reports the file name as
    soon as it finds one hit. If you specify <kbd>/L</kbd>, that
    option is honored and <kbd>/K</kbd> is ignored.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the L option is ignored when C is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptC"><kbd>/C</kbd> option</a> shows the
    <a href="#filespec">filespecs</a> of files that contain
    <a href="#hits">hits</a>, with the count of hits in
    each file, but the <a href="#R5x-OptL"><kbd>/L</kbd> option</a>
    shows only the filespecs without the count of hits. If you specify
    both options, the <kbd>/C</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the M option is available only in 32-bit GREP</samp></dt>

    <dd><p class="secondhalf">Microsoft&#8217;s 16-bit run-time code doesn&#8217;t support locale
    settings, which are required to implement the
    <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

<dt><samp>grep warning: the N option is ignored when C is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptC"><kbd>/C</kbd> option</a> shows the
    count of <a href="#hits">hits</a> with every file header (and
    doesn&#8217;t show the actual hits), but the <a href="#R5x-OptN"><kbd>/N</kbd> option</a>
    shows line numbers with the hits. If you specify
    both options, the <kbd>/C</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the N option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptL"><kbd>/L</kbd> option</a> shows the
    <a href="#filespec">filespecs</a> of files that contain
    <a href="#hits">hits</a> (not the actual hits), but the
    <a href="#R5x-OptN"><kbd>/N</kbd> option</a> shows line numbers with
    the hits. If you specify both options, the <kbd>/L</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the O option is ignored when C is set</samp>
<br><samp>grep warning: the O option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptC"><kbd>/C</kbd> option</a> shows the
    <a href="#filespec">filespecs</a> of files that contain
    <a href="#hits">hits</a>, with the count of hits in
    each file, and the <a href="#R5x-OptL"><kbd>/L</kbd> option</a>
    shows only the filespecs without the count of hits. The
    letter <a href="#R5x-OptO"><kbd>/o</kbd> option</a> specifies the format of output lines, but
    with the <kbd>/C</kbd> option or <kbd>/L</kbd> option there aren&#8217;t any
    output lines.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the P option is ignored when C, J, or L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptP"><kbd>/P</kbd> option</a> displays
    context lines or records around every line or record that contains
    a match. The <a href="#R5x-OptC"><kbd>/C</kbd> option</a>,
    <a href="#R5x-OptJ"><kbd>/J</kbd> option</a>, and
    <a href="#R5x-OptL"><kbd>/L</kbd> option</a> all display abbreviated
    information instead of the actual lines or records that contain
    matches. If you specify the <kbd>/P</kbd> option with any of the
    others, the other option is honored.</p>

    <p class="nonbrk">Exception: When the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a> and the
    <a href="#R5x-OptP"><kbd>/P</kbd> option</a> are both set, then the <kbd>/P</kbd> option specifies context
    bytes rather than lines, and the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a> is not
    ignored but required.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the P option is ignored when /R3 is set but /J isn't</samp></dt>

    <dd><p class="secondhalf">When you specify free-form binary (the <a href="#R5x-OptR"><kbd>/R3</kbd> option</a>),
    the <a href="#R5x-OptP"><kbd>/P</kbd> option</a> refers to context bytes rather than context
    lines. But without the <a href="#R5x-OptJ"><kbd>/J</kbd> option</a>, you get the whole buffer
    anyway. The <kbd>/P</kbd> option doesn&#8217;t make any sense in this case, and
    it&#8217;s ignored. Probably you want to run GREP again and specify a
    <kbd>/J</kbd> option.</p>

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the P option is ignored with /G<var>mode</var></samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptG"><kbd>/G2</kbd> option</a> tells GREP to read and
    search paragraphs rather than lines. This is a more flexible way
    to provide context, and therefore the <a href="#R5x-OptP"><kbd>/P</kbd> option</a> (display
    context lines or records) isn&#8217;t needed with <kbd>/G2</kbd>.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the Q option works in the registered version
only</samp></dt>

    <dd><p class="secondhalf">You&#8217;re running the <a href="grep101.htm#License">unregistered version</a>,
    and you specified the <a href="#R5x-OptQ"><kbd>/Q</kbd> option</a>. Only
    registered users have the benefit of the Q option.
    </dd>

<dt><samp>grep warning: the R option applies only to named files, not
standard input</samp></dt>

    <dd><p class="secondhalf">You didn&#8217;t specify any <a href="#filespec">filespecs</a> on the command line or via
    the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>, but you used the
    <a href="#R5x-OptR"><kbd>/R</kbd> option</a> to specify some file
    format other than text. GREP always reads redirected input files
    (<kbd>&lt;</kbd><var>file</var>) and keyboard input as text.

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

<dt><samp>grep warning: the S option is ignored when scanning only standard input</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptS"><kbd>/S</kbd> option</a> says to search
    subdirectories for the named files, but that can&#8217;t be done when
    GREP is reading only <a href="#stdin">standard input</a> because no input files were
    named on the command line or via the
    <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the U option is ignored when L is set</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptL"><kbd>/L</kbd> option</a> shows the names
    of files that contain <a href="#hits">hits</a> (not the actual
    hits), but the <a href="#R5x-OptU"><kbd>/U</kbd> option</a> shows hits in UNIX
    format (with the <a href="#filespec">filespec</a> on each line). If you specify both
    options, the <kbd>/L</kbd> option is honored.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the X option is ignored when reading only
standard input</samp></dt>

    <dd><p class="secondhalf">You didn&#8217;t specify any <a href="#filespec">filespecs</a> on the command line or via
    the <a href="#R5x-OptAt"><kbd>/@</kbd> option</a>, but you used the
    <a href="#R5x-OptX"><kbd>/X</kbd> option</a> on the command line
    to exclude certain filespecs. When input is from <a href="#stdin">standard
    input</a>, the <kbd>/X</kbd> option is ignored. It is ignored
    <em>silently</em> if the <kbd>/X</kbd> options are in the
    <a href="#R5.1.2-Envvar">environment variable</a> but not on the command line.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the Y option is ignored unless you read regexes from file</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptY"><kbd>/Y</kbd> option</a> says that a
    hit must match all of the (multiple) regexes. But you can specify
    only one regex on the command line.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: the Y option means nothing when there's only one
regex</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptY"><kbd>/Y</kbd> option</a> says that a
    hit must match
    <em>all</em> of the regexes. It has no effect if you enter only
    one regex via the keyboard or regex file.

    <p class="nonbrk">(warning suppressed by <kbd>/Q2</kbd> or higher)</p>
    </dd>

<dt><samp>grep warning: unregistered version ignores environment variable
ORS_GREP</samp></dt>

    <dd><p class="secondhalf">You&#8217;re running the <a href="grep101.htm#License">unregistered version</a>,
    and you have something in
    the <a href="#R5.1.2-Envvar">environment variable</a>.
    </dd>

<dt><samp>grep warning: /V /R3 will probably produce useless results without /L</samp></dt>

    <dd><p class="secondhalf">The <a href="#R5x-OptR"><kbd>/R3</kbd> option</a> reads files as
    free-form binary, and the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>
    displays buffers that don&#8217;t contain matches. Probably
    what you want to know is which <em>files</em>
    don&#8217;t contain matches. To do this, run GREP again and add the
    <a href="#R5x-OptL"><kbd>/L</kbd> option</a> on the command line.

    <p class="nonbrk">(warning suppressed by <kbd>/Q3</kbd>)</p>
    </dd>

</dl>

<h3 id="R6.5-MessagesInfo">6.5&nbsp; Information Messages</h3>

<dl>

<dt><samp>grep16 8.0&nbsp;  Copyright 1986-2005&nbsp; Oak Road Systems
http://oakroadsystems.com

<br>grep32 8.0&nbsp;  Copyright 1986-2005&nbsp; Oak Road Systems
http://oakroadsystems.com</samp></dt>

    <dd><p class="secondhalf">This is the program logo for GREP16 or GREP32.</p>

    <p class="nonbrk">(logo suppressed by <kbd>/Q1</kbd> or higher)</p>
    </dd>

<dt><samp>grep: found <var>count</var> matches in <var>count</var> files of
<var>count</var> examined</samp></dt>

    <dd><p class="secondhalf">GREP displays this summary information at the end of a run,
    after examining all files. The number of files examined
    does not include any files excluded by the <a href="#R5x-OptX"><kbd>/X</kbd> option</a>.</p>

    <p class="nonbrk">If you specified the <a href="#R5x-OptL"><kbd>/L</kbd> option</a>, GREP omits
    the number of matches and displays only the file counts.</p>

    <p class="nonbrk">(message suppressed by <kbd>/Q1</kbd> or higher)</p>
    </dd>

<dt><samp>grep: This is the unregistered evaluation version. To
register and get more features, please see file REGISTER.TXT or visit
<a href="http://oakroadsystems.com/sharware/">http://oakroadsystems.com/sharware/</a>&nbsp;.</samp></dt>

    <dd><p class="secondhalf">If you haven&#8217;t <a href="grep101.htm#License">registered</a>,
    please do. If you have registered, you need to delete the
    unregistered copy and unzip the executables from the
    <var>something</var>RG.ZIP file that you downloaded.
    </dd>

</dl>

<h3 id="R6.6-MessagesPrompts">6.6&nbsp; Prompts</h3>

<p class="brk">If you see any of these messages, GREP is waiting for you to
provide input.</p>

<dl>

<dt><samp>filespec (<var>n</var> chars max):</samp></dt>

    <dd><p class="secondhalf">You specified the <a href="#R5x-OptAt"><kbd>/@-</kbd> option</a>
    (without redirection)
    to read input <a href="#filespec">filespecs</a> from the keyboard. GREP is ready for you
    to type the next one. If you have no more filespecs to enter,
    press Control-Z immediately after this prompt. (With GREP16, you
    need to press Enter after Control-Z.)</p>
    <p class="nonbrk">The longest allowed filespec is 128 characters in GREP16,
    260 characters in GREP32.</p>
    </dd>

<dt><samp>line to test (<var>n</var> chars max):</samp></dt>

    <dd><p class="secondhalf">You didn&#8217;t specify any <a href="#R2.1-InputsNamed">input
    filespecs</a>, and you didn&#8217;t redirect input from a file
    (<kbd>&lt;</kbd><var>file</var>) or pipe it from another command
    (<var>other-command</var><kbd>|grep</kbd>). This can be a good
    way to explore the effects of certain regexes. After parsing the
    command line, GREP takes input lines from the keyboard and tests
    them against the regex(es). Lines are limited to the width
    specified with the <a href="#R5x-OptW"><kbd>/W</kbd> option</a>.</p>

    <p class="nonbrk">Only lines that contain a match are echoed to the output.
    (If you set the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>, only lines that <em>don&#8217;t</em>
    contain a match are echoed.)</p>

    <p class="nonbrk">Press Control-Z immediately after this prompt to end the GREP
    run. (With GREP16, you need to press Enter after Control-Z.)</p>
    </dd>

<dt><samp>Press the lower-case '<var>letter</var>' key to continue...</samp></dt>

    <dd>In the <a href="grep101.htm#License">evaluation version</a> of GREP, about one time
    in a hundred the program requires a particular keystroke from the
    user at the start of execution.
    </dd>

<dt><samp>regex (127 chars max):</samp></dt>

    <dd><p class="secondhalf">You specified the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a>
    (without redirection)
    to read regular expressions from the keyboard. GREP
    is ready for you to type the next one.
    If you have no more regexes to enter, press Control-Z
    immediately after this prompt.
    (With GREP16, you need to press Enter after Control-Z.)
    </dd>

<dt><samp>type filespecs for GREP to scan, one per line. When finished, type
Control-Z alone on a line.</samp></dt>

    <dd><p class="secondhalf">You specified the <a href="#R5x-OptAt"><kbd>/@-</kbd> option</a>
    (without redirection)
    to read input <a href="#filespec">filespecs</a> from the keyboard. GREP has finished
    parsing the command line and is ready for you to type them in.
    </dd>

<dt><samp>type lines to be tested. When finished, type
Control-Z alone on a line. GREP will echo lines that contain a match.</samp></dt>

    <dd><p class="secondhalf">If you simply forgot to specify inputs
    or redirection, type Control-Z right away. Otherwise please see
    &#8220;line to test:&#8221; above.</p>

    <p class="nonbrk">With the <a href="#R5x-OptV"><kbd>/V</kbd> option</a>,
    the prompt changes to &#8220;&#133;&nbsp;lines that don&#8217;t contain a
    match.&#8221;</p>
    </dd>

<dt><samp>type regular expressions, one per line. When finished, type
Control-Z alone on a line.</samp></dt>

    <dd><p class="secondhalf">You specified the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a>
    (without redirection)
    to read regular expressions from the keyboard. GREP has finished
    parsing the command line and is ready for you to type them in.
    </dd>

</dl>



<h2 id="R7-QandA">7. Troubleshooting and How-to</h2>

<p class="brk">Please share any questions that had you scratching your head.
They'll be added to a future version of this <cite>GREP Manual</cite>, space
permitting.</p>

<div class="Summary" id="TOC7"><span class="SummaryH"><strong class="key">Contents:</strong></span>

<ul class="TOC">
<li><a href="#R7.1-QandARegex">7.1&nbsp; Regex Matching Problems</a>
<ul>
<li><a href="#R7.1-missmatch01">GREP is missing matches in my Word or Word Perfect files, even though I know they&#8217;re in there!</a></li>
<li><a href="#R7.1-showallmatch02">How do I show all matches, not just all lines that contain a match?</a></li>
<li><a href="#R7.1-searchword03">How do I search for a word? For example, how do I get &#8220;plain&#8221; without also getting lines with &#8220;explain&#8221;, &#8220;plains&#8221;, etc.?</a></li>
<li><a href="#R7.1-onlyoneoftwo04">How do I find all lines that contain &#8220;this&#8221; but not &#8220;that&#8221;?</a></li>
<li><a href="#R7.1-bothmatch05">How do I find all files that contain &#8220;this&#8221; and &#8220;that&#8221;?</a></li>
<li><a href="#R7.1-quotes06">I put quotes in my regex, but GREP isn&#8217;t matching correctly on them.</a></li>
<li><a href="#R7.1-debugbackslash07">I&#8217;ve got a bunch of backslashes in my regex, and I don&#8217;t think GREP is interpreting it the way I want.</a></li>
<li><a href="#R7.1-extchar08">I&#8217;m trying to GREP for a character like <kbd>(</kbd>, <kbd>?</kbd>, or <kbd>{</kbd>, but it doesn&#8217;t work.</a></li>
<li><a href="#R7.1-wordbound09">GREPping on a word boundary with <kbd>\&lt;</kbd> and <kbd>\&gt;</kbd> doesn&#8217;t work.</a></li>
<li><a href="#R7.1-subpattern10">My subpattern with <kbd>\(</kbd> doesn&#8217;t work!</a></li>
<li><a href="#R7.1-alternative11"><kbd>\|</kbd> doesn&#8217;t work for alternatives!</a></li>
<li><a href="#R7.1-charclass12"><kbd>\w</kbd>, <kbd>[:alpha:]</kbd>, and similar only take account of English letters. I need to work with 8-bit letters.</a></li>
<li><a href="#R7.1-findword13">I used the <kbd>-w</kbd> option to find a word, but it didn&#8217;t work.</a></li>
<li><a href="#R7.1-nationalchar14">When I enter a character like &eacute; in my regex, the search doesn&#8217;t seem to work.</a></li>
</ul></li>
<li><a href="#R7.2-QandAMisc">7.2&nbsp; General Problems</a>
<ul>
<li><a href="#R7.2-registeragain01">I registered GREP, but it&#8217;s still prompting me to register.</a></li>
<li><a href="#R7.2-messages02">What does this error or warning message mean?</a></li>
<li><a href="#R7.2-insuffmemory03">I got the message &#8220;insufficient memory&#8221;.</a></li>
<li><a href="#R7.2-starglobbing04">I put <kbd>*</kbd> on the command line, but 16-bit GREP searched every file.</a></li>
<li><a href="#R7.2-redirectoutput05">Redirecting output with &gt;<var>outputfile</var> makes GREP hang up!</a></li>
<li><a href="#R7.2-justsatthere06">I typed my GREP command and hit the Enter key, and it just sat there.</a></li>
<li><a href="#R7.2-subdirs07">I used the <kbd>-r</kbd> option, but GREP won&#8217;t scan files in subdirectories.</a></li>
</ul></li>
</ul>
</div>
<h3 id="R7.1-QandARegex">7.1&nbsp; Regex Matching Problems</h3>


<h4 id="R7.1-missmatch01">GREP is missing matches in my Word or Word
Perfect files, even though I know they&#8217;re in there!</h4>

<p class="brk">Binary files, including most word-processing files, may contain ASCII
26 (Control-Z) characters. These have no special meaning in a binary
file but signal the end of a file being read as text.
To read such files, use the <kbd>/R3</kbd> option.
Better yet, if you register GREP you can use the
<a href="#R5x-OptR"><kbd>/R-1</kbd> or <kbd>/R-2</kbd> option</a>
and let GREP figure out the type of each file
automatically.</p>



<h4 id="R7.1-showallmatch02">How do I show all matches, not just all lines that contain a match?</h4>

<p class="brk">Use the <a href="#R5x-OptJ"><kbd>/J2</kbd> option</a>.</p>



<h4 id="R7.1-searchword03">How do I search for a word? For example,
how do I get &#8220;plain&#8221; without also getting lines with
&#8220;explain&#8221;, &#8220;plains&#8221;, etc.?</h4>

<p class="brk">GREP searches for lines that contain the string of characters
represented by your regex. If you want that string of characters only
when it&#8217;s a whole word, you have to tell GREP.</p>

<p class="brk">With GREP32, the <a href="#R5x-OptE"><kbd>/E4</kbd> option</a>
makes this task easy. For example,</p>

<pre class="secondhalf">
        grep plain /e4 file1 file2 </pre>

<p class="secondhalf">finds &#8220;plain&#8221; as a word. Note that the definition of
&#8220;word&#8221; includes letters, digits, and the underscore.
For searching most text that doesn&#8217;t matter, but if your input contains
something like &#8220;plain55&#8221; you might want to
define &#8220;word&#8221; to be just letters, or to be any printing
character. See the <a href="#R5x-OptM"><kbd>/M</kbd> option</a>.</p>

<p class="brk">With GREP16, the task can still
be done but it&#8217;s less convenient. For techniques to find a single
word with basic regexes, please see
<a href="#R4.8.1-LengthyExample">Finding a Word</a>.</p>



<h4 id="R7.1-onlyoneoftwo04">How do I find all lines that contain
&#8220;this&#8221; but not &#8220;that&#8221;?</h4>

<p class="brk">Use GREP as a filter and execute it twice, the first time to find
all lines that contain &#8220;this&#8221; and the second time with the <kbd>/V</kbd> option
to filter out any lines that contain &#8220;that&#8221;:</p>

<pre class="secondhalf">
        grep this files&nbsp;&#133; | grep /v that </pre>



<h4 id="R7.1-bothmatch05">How do I find all files that contain
&#8220;this&#8221; and &#8220;that&#8221;?</h4>

<p class="brk">Do you want &#8220;this&#8221; and &#8220;that&#8221; on the same line and in
that order? Use the regex <kbd>this.*that</kbd> on the command line.</p>

<p class="brk">Do you want files that contain &#8220;this&#8221; and
&#8220;that&#8221; on the same line
in either order? use the <a href="#R5x-OptF"><kbd>/F</kbd> option</a>
to enter the two regexes and the
<a href="#R5x-OptY"><kbd>/Y</kbd> option</a> to make the AND condition:</p>
<pre class="secondhalf">
        grep /F- /Y <var>files</var></pre>
<p class="secondhalf">and then when prompted enter these two lines:</p>
<pre class="secondhalf">
        this
        that</pre>
<p class="secondhalf">and Control-Z at the third prompt.</p>

<p class="brk">Do you want files that contain &#8220;this&#8221; and
&#8220;that&#8221; anywhere in the same
file, not just on
the same line? Use two grep calls connected with the &#8220;|&#8221; pipe
character. You&#8217;ll find an example with the
<a href="#R5x-OptL"><kbd>/L</kbd> option</a>.</p>



<h4 id="R7.1-quotes06">I put quotes in my regex, but GREP isn&#8217;t matching correctly on them.</h4>

<p class="brk">Command-line processors like the Windows command prompt, and also the C run-time library,
treat quotes specially before GREP gets to see them. In most
cases, you can have GREP treat the quotes as you intended by putting
backslashes (\) in front of them. For example, if your command is</p>
<pre class="secondhalf">
        grep "this" files&nbsp;&#133;</pre>
<p class="secondhalf">then GREP searches for the four-character string
<kbd>this</kbd>. GREP never sees the quotes because
the operating system or the C run-time library has stripped them off.
In most operating systems, the command</p>
<pre class="secondhalf">
        grep \"this\" files&nbsp;&#133;</pre>
<p class="secondhalf">searches for the six-character string
<kbd>"this"</kbd>. For further information, please see
<a href="#R4.1.3-RegexQuotes">Quotes in a Regex</a>.</p>

<p class="nonbrk">Tip: when you&#8217;re not sure what&#8217;s going on, use GREP&#8217;s <a href="#R5x-OptD"><kbd>/D</kbd> option</a>
to display the regex as GREP sees and interprets it:</p>
<pre class="secondhalf">
        grep <var>regex</var> <var>inputfiles</var> /D- | grep "grep G[CR]:"</pre>



<h4 id="R7.1-debugbackslash07">I&#8217;ve got a bunch of backslashes
in my regex, and I don&#8217;t think GREP is interpreting it the way I want.</h4>

<p class="brk">Tip: use the <a href="#R5x-OptD"><kbd>/D</kbd> option</a> to
reveal what GREP is doing with your regex. The output can voluminous,
but you can cut it down to size. Repeat your command with this added
at the end:</p>
<pre class="secondhalf">
        /D-|grep /P0,5 "grep GR:" </pre>
<p class="secondhalf">You&#8217;ll see only the interpretation of the regex with most
irrelevant information suppressed.</p>

<p class="nonbrk">If the displayed original regex is different from what you typed,
then either Windows or the C startup code has altered some
of your characters.
Use the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a> and enter your
regex from the keyboard, or see <a href="#R4.12-RegexCmdLine">Special Rules
for the Command Line</a>.</p>

<p class="nonbrk">If you see a line about a &#8220;massaged&#8221; regex, you&#8217;re probably running
afoul of the <a href="#R4.12-RegexCmdLine">Special Rules for the Command
Line</a>. Try entering your regex from keyboard or file with the
<a href="#R5x-OptF"><kbd>/F</kbd> option</a>, or keep the regex on the command line but
use the <a href="#R5x-OptE"><kbd>/E</kbd> option</a> to turn off those special rules.</p>

<p class="nonbrk">Other possibilities: check whether you entered
<a href="#R4.1.1-RegexTwoKinds">extended regex characters</a> but didn&#8217;t
specify the <a href="#R5x-OptE"><kbd>/E2</kbd> option</a>
to tell GREP you&#8217;re using extended regexes.</p>



<h4 id="R7.1-extchar08">I&#8217;m trying to GREP for a character like
<kbd>(</kbd>, <kbd>?</kbd>, or <kbd>{</kbd>, but it doesn&#8217;t work.</h4>

<p class="brk">These have special meanings in extended regular expressions but
not in basic regexes. Make sure you haven&#8217;t turned on
<a href="#R5x-OptE">extended regexes</a>; or use a
<a href="#R4.11.1-RegexBackslashEscape">backslash \</a> to make GREP
match them as normal characters.</p>



<h4 id="R7.1-wordbound09">GREPping on a word boundary with
<kbd>\&lt;</kbd> and <kbd>\&gt;</kbd> doesn&#8217;t work.</h4>

<h4 id="R7.1-subpattern10">My subpattern with <kbd>\(</kbd>
doesn&#8217;t work!</h4>

<h4 id="R7.1-alternative11"><kbd>\|</kbd> doesn&#8217;t work for alternatives!</h4>

<p class="brk">With extended regular expressions
(<a href="#R5x-OptE"><kbd>/E2</kbd> option</a>),
GREP uses Perl-style regexes:
<kbd>\b</kbd> for a <a href="#R4.11.3-RegexBackslashAssert">word boundary</a>,
<kbd>(&nbsp;)</kbd> for <a href="#R4.10-RegexSub">subexpressions</a>, and
plain <kbd>|</kbd> for <a href="#R4.9-RegexBar">alternatives</a>.</p>

<p class="brk">With basic regular expressions
(<a href="#R5x-OptE"><kbd>/E1</kbd> option</a>, or no
<kbd>/E</kbd> option), a word boundary can&#8217;t be used directly.
However, you can still search for whole words; see
<a href="#R4.8.1-LengthyExample">Finding a Word</a>.</p>



<h4 id="R7.1-charclass12"><kbd>\w</kbd>, <kbd>[:alpha:]</kbd>, and similar only take account of English letters. I need to work with 8-bit letters.</h4>

<p class="brk">In GREP32, use the <a href="#R5x-OptM"><kbd>/M</kbd> option</a> to
select an appropriate character mapping.</p>

<p class="brk">In GREP16, your only choice is to code the
extra letters explicitly as shown in the
<a href="#R4.7.1-RegexClassMinus">character range example</a>.</p>

<p class="brk">(<a href="#R4.11.2-RegexBackslashType">Backslash for Character
Types (extended regex)</a> describes <kbd>/w</kbd> and similar
assertions.
<a href="#R4.7.4-RegexClassName">Character Class Names
(extended regex)</a> describes <kbd>[:alpha:]</kbd> and other
character class names.)</p>



<h4 id="R7.1-findword13">I used the <kbd>-w</kbd> option to find a
word, but it didn&#8217;t work.</h4>

<p class="brk">GREP32 uses the
<a href="#R5x-OptE"><kbd>/E4</kbd> option</a> to search for a
regex as a stand-alone word. GREP16 users need to use the techniques
shown in <a href="#R4.8.1-LengthyExample">Finding a Word</a>.</p>



<h4 id="R7.1-nationalchar14">When I enter a character like &eacute; in
my regex, the search doesn&#8217;t seem to work.</h4>

<p class="brk">This is a problem (in GREP32 only) with how Microsoft&#8217;s startup code
processes the command line.
Here are three ways to get around this problem:</p>

<ul>
<li>Use the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a> and enter the
regex from the keyboard;
<li>Use the <a href="#R4.12-RegexCmdLine">Special Rules for the Command
Line</a> and enter it as <kbd>\233</kbd> or <kbd>\0xE9</kbd>; or
<li>Use GREP16.</ul>




<h3 id="R7.2-QandAMisc">7.2&nbsp; General Problems</h3>


<h4 id="R7.2-registeragain01">I registered GREP, but it&#8217;s still prompting me to register.</h4>

<p class="brk">The <a href="grep101.htm#License">registered and unregistered versions</a>
are two separate executables. You need to delete the
unregistered executables and unzip the registered version that you
downloaded.</p>



<h4 id="R7.2-messages02">What does this error or warning message mean?</h4>

<p class="brk">Please <a href="#R6-Messages">find the message</a> in this
<cite>GREP Manual</cite>, where you should see a problem description and what you
can do about it. Please <a href="#R6.1-MessagesFailure">let me
know</a> if the explanation is inadequate or could be improved in
any way,</p>



<h4 id="R7.2-insuffmemory03">I got the message &#8220;insufficient
memory&#8221;.</h4>

<p class="brk">For what you can do if this occurs, see <a
href="#R6.2-MessagesMemory">grep: insufficient memory</a>.</p>



<h4 id="R7.2-starglobbing04">I put <kbd>*</kbd> on the command line, but 16-bit GREP searched every file.</h4>

<p class="brk">This is a change between releases 6.9 and 7.0. GREP16
and GREP32 now follow identical
<a href="#R2.1.1-InputsWildcards">wildcard rules</a>, and
<kbd>*</kbd> now means &#8220;all files&#8221; in GREP16 as it always has in
GREP32. If you want files with no extension,
<kbd>*.</kbd> does the trick.</p>



<h4 id="R7.2-redirectoutput05">Redirecting output with &gt;<var>outputfile</var> makes GREP hang up!</h4>

<p class="brk">You&#8217;re doing something like</p>
<pre class="secondhalf">
        grep abcde * &gt;myout</pre>
<p class="secondhalf">Typically, the file myout is opened before GREP finishes reading
the directory to expand that <kbd>*</kbd> input
<a href="#filespec">filespec</a>. If GREP
finds any matches, it writes them to file myout; but then when it
comes to file myout in the directory it starts reading it. Finding the
matches that it previously wrote, it adds them to the end of the file.
The read pointer never catches up with the write pointer, and
therefore GREP hangs.</p>

<p class="brk">The bad news is that there&#8217;s nothing in the C library to let
GREP detect this problem and automatically skip reading file myout.
The good news is that you can do something about it. Use the
<a href="#R5x-OptX"><kbd>/X</kbd> option</a> to exclude file myout from reading:</p>
<pre class="secondhalf">
        grep abcde * /Xmyout &gt;myout</pre>



<h4 id="R7.2-justsatthere06">I typed my GREP command and hit the Enter key, and it just sat there.</h4>

<p class="brk">Did GREP prompt you for keyboard input?
You can halt it by pressing Control-Z then Enter.</p>

<p class="brk">Are you piping GREP output (&nbsp;|&nbsp;) to MORE or another command?
No output appears until GREP has scanned all the files and the second
command has done its work.</p>

<p class="brk">Is the disk light on your computer flashing? GREP is reading
lots of input but not finding any <a href="#hits">hits</a>.</p>

<p class="brk">Did you enter an extended regex with the
<a href="#R4.9-RegexBar"><kbd>|</kbd> character</a>? Windows interprets that
character as a pipe, so it&#8217;s waiting for GREP to finish and then
Windows
will run GREP&#8217;s output through the second command. Press Control-Z
to end GREP. Some systems, like 4DOS and
<a href="http://jpsoft.com">TCC</a>, accept the <kbd>|</kbd>
if you enclose the whole regex in double quotes "&#133;". Otherwise,
use the <a href="#R5x-OptF"><kbd>/F-</kbd> option</a> and enter your
regex from the keyboard; or see
<a href="#R4.11.5-RegexBackslashEncode">Backslash for Character Encoding
(extended regex)</a> or <a href="#R4.12-RegexCmdLine">Special Rules for the
Command Line</a>.</p>



<h4 id="R7.2-subdirs07">I used the <kbd>-r</kbd> option, but GREP
won&#8217;t scan files in subdirectories.</h4>

<p class="brk">You need the <a href="#R5x-OptS"><kbd>-s</kbd> option</a> for
subdirectories, not the <a href="#R5x-OptR"><kbd>-r</kbd> option</a>.
GREP diverges from UNIX in this respect.</p>



<h2 id="R8-Future">8. Wish List</h2>
<p class="brk">Release 8.0 will be the last one for new features in this code
base of GREP. Since years have passed since its release, it&#8217;s
unlikely that even a bug-fix version will ever be needed.</p>

<p class="brk">One day, if I can ever find the time, I&#8217;ll rewrite GREP 
as a Windows program, with support for <strong class="key">Unicode</strong> and 
<strong class="key">ZIP files</strong>.
You&#8217;d also be able
to put options, regexes, and input filespecs together in a 
<strong class="key">job file</strong>.</p>

<p class="brk">In addition, the new GREP should probably offer at least some
of these enhancements, which users have requested:</p>

<ul class="loose">

<li>Some way to specify <strong class="key">multiple regexes on the command line</strong> and
require all of them to match a given input line.</li>

<li>More control over the <strong class="key">order of processing multiple filespecs</strong>
with the <a href="#R5x-OptS"><kbd>/S</kbd> option</a>,  and an <kbd>/S<var>n</var></kbd> option to
<strong class="key">go down only <var>n</var> levels of subdirectories</strong>.</li>

<li><strong class="key">File selection by date</strong> or other criteria in addition to name.</li>

<li>Some way to <strong class="key">scan hidden files without hidden subdirectories</strong>
or vice versa.</li>

<li>A warning message when a text file (<a href="#R5x-OptR"><kbd>/R0</kbd> or <kbd>/R-1</kbd> option</a>) turns
out to be binary.</li>

<li>Add number of columns or other <strong class="key">formatting</strong> to the <a href="#R5x-OptN"><kbd>/N</kbd> option</a>;
display the number of the column where the match starts.</li>

<li>Display selected <strong class="key">subexpressions</strong> within a match.</li>

<li><strong class="key">Color-highlight</strong> the match within the line that contains it.</li>

<li>A <strong class="key">Linux version</strong>.</li>

</ul>

<p>Your comments and questions are welcome.</p>




<h2 id="FULLTOC">Full Table of Contents</h2>
<div id="TOCinFull">
<ul class="TOC">
<li><a href="#R1-CmdLine">1. Command Line</a></li>
<li><a href="#R2-Inputs">2. Input Files</a>
<ul>
<li><a href="#R2.1-InputsNamed">2.1&nbsp; Named Input Files</a>
<ul>
<li><a href="#R2.1.1-InputsWildcards">2.1.1&nbsp; Wildcard Expansion (Globbing)</a></li>
<li><a href="#R2.1.2-InputsHidden">2.1.2&nbsp; Hidden and System Files</a></li>
<li><a href="#R2.1.3-InputsMissing">2.1.3&nbsp; Missing Files</a></li>
</ul></li>
<li><a href="#R2.2-InputStandard">2.2&nbsp; Standard Input and Redirection</a></li>
<li><a href="#R2.3-InputsSubdirs">2.3&nbsp; Subdirectory Searches</a>
<ul>
<li><a href="#R2.3.1-InputsSubdirsOrder">2.3.1&nbsp; Search Order</a></li>
</ul></li>
<li><a href="#R2.4-InputsBinary">2.4&nbsp; Binary Files and Text Files</a>
<ul>
<li><a href="#R2.4.3-InputsBinaryGuess">2.4.1&nbsp; Differences between Text and Binary Files</a>
<ul>
<li><a href="#R2.4-InputsBinaryText">Text Files</a></li>
<li><a href="#R2.4-InputsBinaryBinary">Binary Files</a></li>
<li><a href="#R2.4-InputsBinaryDecide">How Does GREP Know?</a></li>
</ul></li>
<li><a href="#R2.4.2-BinaryRead">2.4.2&nbsp; How Does GREP Read Binary and Text Files?</a></li>
<li><a href="#R2.4.3-BinaryHits">2.4.3&nbsp; How Does GREP Display Hits?</a></li>
</ul></li>
</ul></li>
<li><a href="#R3-Outputs">3. Outputs</a>
<ul>
<li><a href="#R3.1-OutputHits">3.1&nbsp; List of Hits</a>
<ul>
<li><a href="#R3.1.1-Hits">3.1.1&nbsp; Variations on the Hit List</a></li>
<li><a href="#R3.1.2-OutputRedirect">3.1.2&nbsp; Redirected Output</a></li>
<li><a href="#R3.1.3-StderrRedirect">3.1.3&nbsp; Redirected Error Output</a></li>
</ul></li>
<li><a href="#R3.2-OutputDebug">3.2&nbsp; Debugging Output</a></li>
<li><a href="#R3.3-ERRORLEVEL">3.3&nbsp; Return Values (ERRORLEVEL)</a></li>
</ul></li>
<li><a href="#R4-Regex">4. Regular Expressions (Regexes)</a>
<ul>
<li><a href="#R4.1-RegexOverview">4.1&nbsp; Overview</a>
<ul>
<li><a href="#R4.1.1-RegexTwoKinds">4.1.1&nbsp; Basic and Extended Regexes</a></li>
<li><a href="#R4.1.2-RegexCompatibility">4.1.2&nbsp; Compatibility Note</a></li>
<li><a href="#R4.1.3-RegexQuotes">4.1.3&nbsp; Quotes in a Regex</a></li>
<li><a href="#R4.1.4-RegexConfuse">4.1.4&nbsp; Regex Starting with <kbd>-</kbd> or /</a></li>
<li><a href="#R4.1.5-RegexLimits">4.1.5&nbsp; Limitations</a></li>
</ul></li>
<li><a href="#R4.2-RegexNormal">4.2&nbsp; Normal Character (any regex)</a></li>
<li><a href="#R4.3-RegexPeriod">4.3&nbsp; <kbd>.</kbd> for Any Character (any regex)</a></li>
<li><a href="#R4.4-RegexStarPlus">4.4&nbsp; <kbd>*</kbd> or <kbd>+</kbd> for Repetition (any regex)</a></li>
<li><a href="#R4.5-RegexQuestion">4.5&nbsp; <kbd>?</kbd> for Optional Match (extended regex)</a></li>
<li><a href="#R4.6-RegexBrace">4.6&nbsp; <kbd>{&nbsp;}</kbd> for Repetition (extended regex)</a>
<ul>
<li><a href="#R4.6.1-RegexGreedy">4.6.1&nbsp; Greedy Quantifiers (extended regex)</a></li>
</ul></li>
<li><a href="#R4.7-RegexClass">4.7&nbsp; <kbd>[&nbsp;]</kbd> for Character Class (any regex)</a>
<ul>
<li><a href="#R4.7.1-RegexClassMinus">4.7.1&nbsp; <kbd>-</kbd> for Character Range (any regex)</a></li>
<li><a href="#R4.7.2-RegexClassCaret">4.7.2&nbsp; <kbd>[^&nbsp;]</kbd> for Negative Character Class (any regex)</a></li>
<li><a href="#R4.7.3-RegexClassCaseblind">4.7.3&nbsp; Character Class and Case-Blind Matching (any regex)</a></li>
<li><a href="#R4.7.4-RegexClassName">4.7.4&nbsp; Character Class Names (extended regex)</a></li>
</ul></li>
<li><a href="#R4.8-RegexAnchor">4.8&nbsp; <kbd>^</kbd> and <kbd>$</kbd> for Start and End of Line (any regex)</a>
<ul>
<li><a href="#R4.8.1-LengthyExample">4.8.1&nbsp; Finding a Word (Lengthy Example)</a></li>
</ul></li>
<li><a href="#R4.9-RegexBar">4.9&nbsp; <kbd>|</kbd> for Alternatives (extended regex)</a></li>
<li><a href="#R4.10-RegexSub">4.10&nbsp; <kbd>(&nbsp;)</kbd> for Subexpressions (extended regex)</a>
<ul>
<li><a href="#R4.10.1-RegexSubAdvanced">4.10.1&nbsp; <kbd>(&nbsp;)</kbd> Advanced Topics (extended regex)</a></li>
</ul></li>
<li><a href="#R4.11-RegexBackslash">4.11&nbsp; The Backslash <kbd>\</kbd></a>
<ul>
<li><a href="#R4.11.1-RegexBackslashEscape">4.11.1&nbsp; Backslash as Escape (any regex)</a></li>
<li><a href="#R4.11.2-RegexBackslashType">4.11.2&nbsp; Backslash for Character Types (extended regex)</a></li>
<li><a href="#R4.11.3-RegexBackslashAssert">4.11.3&nbsp; Backslash for Assertions (extended regex)</a></li>
<li><a href="#R4.11.4-RegexBackslashBackref">4.11.4&nbsp; Backslash for Back References (extended regex)</a></li>
<li><a href="#R4.11.5-RegexBackslashEncode">4.11.5&nbsp; Backslash for Character Encoding (extended regex)</a></li>
</ul></li>
<li><a href="#R4.12-RegexCmdLine">4.12&nbsp; Special Rules for the Command Line</a>
<ul>
<li><a href="#R4.12.1-RegexCmdLineWhen">4.12.1&nbsp; When Do You Need the Special Rules?</a></li>
<li><a href="#R4.12.2-RegexCmdLineWhat">4.12.2&nbsp; What Exactly Are the Special Rules?</a></li>
</ul></li>
</ul></li>
<li><a href="#R5-Options">5. Options</a>
<ul>
<li><a href="#R5.1-OptSpecify">5.1&nbsp; Specifying Options</a>
<ul>
<li><a href="#R5.1.1-OptCmdLine">5.1.1&nbsp; On the Command Line</a></li>
<li><a href="#R5.1.2-Envvar">5.1.2&nbsp; In an Environment Variable (ORS_GREP)</a>
<ul>
<li><a href="#R5.1.2-EnvvarSetting">Setting the Environment Variable</a></li>
<li><a href="#R5.1.2-EnvvarOverride">Overriding Environment Variable Options on the Command Line</a></li>
</ul></li>
</ul></li>
<li><a href="#R5.2-OptInFile">5.2&nbsp; Input File Options</a>
<ul>
<li><a href="#R5x-OptAt"><kbd>/@-</kbd> or <kbd>/@</kbd><var>file</var>&nbsp;&#8212; Take Input Filespecs from Standard Input or File</a></li>
<li><a href="#R5x-OptA"><kbd>/A</kbd>&nbsp;&#8212; Include Hidden and System Files</a></li>
<li><a href="#R5x-OptG"><kbd>/G</kbd><var>n</var>&nbsp;&#8212; Read Variable-Length Text Lines or Paragraphs</a>
<ul>
<li><a href="#R5-G2mode">More about Paragraph Mode (<kbd>/G2</kbd>)</a></li>
</ul></li>
<li><a href="#R5x-OptR"><kbd>/R</kbd><var>n</var>&nbsp;&#8212; Read Input Files as Binary or Text</a></li>
<li><a href="#R5x-OptS"><kbd>/S</kbd>&nbsp;&#8212; Scan Subdirectories</a></li>
<li><a href="#R5x-OptW"><kbd>/W</kbd><var>width</var> or <kbd>/W</kbd><var>txwid,bnwid</var>&nbsp;&#8212; Specify Line Width or Binary Block Length</a>
<ul>
<li><a href="#R5-R0mode">Text Mode (<kbd>/W</kbd> Option without <kbd>/R</kbd> or with <kbd>/R0</kbd>)</a></li>
<li><a href="#R5-R2mode">Record-oriented Binary Mode (<kbd>/W</kbd> Option with <kbd>/R2</kbd>)</a></li>
<li><a href="#R5-R3mode">Free-form Binary Mode (<kbd>/W</kbd> Option with <kbd>/R3</kbd>)</a></li>
<li><a href="#R5-R-1mode">When GREP Chooses File Mode (<kbd>/W</kbd> Option with <kbd>/R-1</kbd> or <kbd>/R-2</kbd>)</a></li>
</ul></li>
<li><a href="#R5x-OptX"><kbd>/X</kbd><var>pattern</var>&nbsp;&#8212; Exclude Matching Files from Scan</a></li>
</ul></li>
<li><a href="#R5.3-OptPattern">5.3&nbsp; Pattern-Matching Options</a>
<ul>
<li><a href="#R5x-OptE"><kbd>/E</kbd><var>regex_level</var>&nbsp;&#8212; Select Extended Regexes or Strings</a></li>
<li><a href="#R5x-OptF"><kbd>/F-</kbd> or <kbd>/F</kbd><var>file</var>&nbsp;&#8212; Read Regexes from Keyboard or File</a></li>
<li><a href="#R5x-OptI"><kbd>/I</kbd>&nbsp;&#8212; Ignore Case in Matching</a></li>
<li><a href="#R5x-OptM"><kbd>/M</kbd><var>loc</var> or <kbd>/M</kbd><var>loc,word</var>&nbsp;&#8212; Specify Character Mapping and Define &#8220;Word&#8221;</a></li>
<li><a href="#R5x-OptV"><kbd>/V</kbd>&nbsp;&#8212; Display Lines That Don&#8217;t Contain a Match</a></li>
<li><a href="#R5x-OptY"><kbd>/Y</kbd>&nbsp;&#8212; Multiple Regexes Must All Match</a></li>
</ul></li>
<li><a href="#R5.4-OptOutput">5.4&nbsp; Output Options</a>
<ul>
<li><a href="#R5x-OptB"><kbd>/B</kbd>&nbsp;&#8212; Display a Header for Every File Scanned</a></li>
<li><a href="#R5x-OptC"><kbd>/C</kbd>&nbsp;&#8212; Display the Hit Count, Not the Actual Hits</a></li>
<li><a href="#R5x-OptH"><kbd>/H</kbd>&nbsp;&#8212; Don&#8217;t Display Filespecs in Output</a></li>
<li><a href="#R5x-OptJ"><kbd>/J</kbd><var>n</var>&nbsp;&#8212; Display Just the Parts of Each Line That Match</a>
<ul>
<li><a href="#R5-Jevery">Displaying Every Match in a File with <kbd>/J2</kbd> or <kbd>/J3</kbd></a></li>
</ul></li>
<li><a href="#R5x-OptK"><kbd>/K</kbd><var>count</var>&nbsp;&#8212; Report Only the First Few Hits Per File</a></li>
<li><a href="#R5x-OptL"><kbd>/L</kbd>&nbsp;&#8212; List Files That Contain Hits, Not the Actual Hits</a>
<ul>
<li><a href="#R5x-Lmultregex">Finding Files That Match a List of Regexes</a></li>
</ul></li>
<li><a href="#R5x-OptN"><kbd>/N</kbd>&nbsp;&#8212; Show Line Numbers with Hits</a></li>
<li><a href="#R5x-OptO"><kbd>/O</kbd>&nbsp;&#8212; Set Output Format</a></li>
<li><a href="#R5x-OptP"><kbd>/P</kbd><var>before,after</var>&nbsp;&#8212; Show Context Lines around Matching Lines</a></li>
<li><a href="#R5x-OptU"><kbd>/U</kbd>&nbsp;&#8212; UNIX-style Output: Show Filespec with Each Hit</a></li>
</ul></li>
<li><a href="#R5.5-OptGeneral">5.5&nbsp; General Options</a>
<ul>
<li><a href="#R5x-OptD"><kbd>/D</kbd><var>file</var> or <kbd>/D-</kbd> or <kbd>/D</kbd>&nbsp;&#8212; Display Debugging Output</a></li>
<li><a href="#R5x-OptQ"><kbd>/Q</kbd><var>level</var>&nbsp;&#8212; Suppress the Logo and Unwanted Warnings</a></li>
<li><a href="#R5x-OptZ"><kbd>/Z</kbd>&nbsp;&#8212; Reset All Options</a></li>
<li><a href="#R5x-Opt0"><kbd>/0</kbd> or <kbd>/1</kbd>&nbsp;&#8212; Set ERRORLEVEL to Show Whether Matches Were Found</a></li>
<li><a href="#R5x-Opt3"><kbd>/3</kbd>&nbsp;&#8212; Set ERRORLEVEL to 3 for Warnings</a></li>
<li><a href="#R5x-OptHelp"><kbd>/?</kbd>&nbsp;&#8212; Display Help</a></li>
</ul></li>
</ul></li>
<li><a href="#R6-Messages">6. Messages</a>
<ul>
<li><a href="#R6.1-MessagesFailure">6.1&nbsp; Failure Messages</a></li>
<li><a href="#R6.2-MessagesMemory">6.2&nbsp; Insufficient Memory</a></li>
<li><a href="#R6.3-MessagesAlert">6.3&nbsp; User Alert Messages</a></li>
<li><a href="#R6.4-MessagesWarning">6.4&nbsp; Warning Messages</a></li>
<li><a href="#R6.5-MessagesInfo">6.5&nbsp; Information Messages</a></li>
<li><a href="#R6.6-MessagesPrompts">6.6&nbsp; Prompts</a></li>
</ul></li>
<li><a href="#R7-QandA">7. Troubleshooting and How-to</a>
<ul>
<li><a href="#R7.1-QandARegex">7.1&nbsp; Regex Matching Problems</a>
<ul>
<li><a href="#R7.1-missmatch01">GREP is missing matches in my Word or Word Perfect files, even though I know they&#8217;re in there!</a></li>
<li><a href="#R7.1-showallmatch02">How do I show all matches, not just all lines that contain a match?</a></li>
<li><a href="#R7.1-searchword03">How do I search for a word? For example, how do I get &#8220;plain&#8221; without also getting lines with &#8220;explain&#8221;, &#8220;plains&#8221;, etc.?</a></li>
<li><a href="#R7.1-onlyoneoftwo04">How do I find all lines that contain &#8220;this&#8221; but not &#8220;that&#8221;?</a></li>
<li><a href="#R7.1-bothmatch05">How do I find all files that contain &#8220;this&#8221; and &#8220;that&#8221;?</a></li>
<li><a href="#R7.1-quotes06">I put quotes in my regex, but GREP isn&#8217;t matching correctly on them.</a></li>
<li><a href="#R7.1-debugbackslash07">I&#8217;ve got a bunch of backslashes in my regex, and I don&#8217;t think GREP is interpreting it the way I want.</a></li>
<li><a href="#R7.1-extchar08">I&#8217;m trying to GREP for a character like <kbd>(</kbd>, <kbd>?</kbd>, or <kbd>{</kbd>, but it doesn&#8217;t work.</a></li>
<li><a href="#R7.1-wordbound09">GREPping on a word boundary with <kbd>\&lt;</kbd> and <kbd>\&gt;</kbd> doesn&#8217;t work.</a></li>
<li><a href="#R7.1-subpattern10">My subpattern with <kbd>\(</kbd> doesn&#8217;t work!</a></li>
<li><a href="#R7.1-alternative11"><kbd>\|</kbd> doesn&#8217;t work for alternatives!</a></li>
<li><a href="#R7.1-charclass12"><kbd>\w</kbd>, <kbd>[:alpha:]</kbd>, and similar only take account of English letters. I need to work with 8-bit letters.</a></li>
<li><a href="#R7.1-findword13">I used the <kbd>-w</kbd> option to find a word, but it didn&#8217;t work.</a></li>
<li><a href="#R7.1-nationalchar14">When I enter a character like &eacute; in my regex, the search doesn&#8217;t seem to work.</a></li>
</ul></li>
<li><a href="#R7.2-QandAMisc">7.2&nbsp; General Problems</a>
<ul>
<li><a href="#R7.2-registeragain01">I registered GREP, but it&#8217;s still prompting me to register.</a></li>
<li><a href="#R7.2-messages02">What does this error or warning message mean?</a></li>
<li><a href="#R7.2-insuffmemory03">I got the message &#8220;insufficient memory&#8221;.</a></li>
<li><a href="#R7.2-starglobbing04">I put <kbd>*</kbd> on the command line, but 16-bit GREP searched every file.</a></li>
<li><a href="#R7.2-redirectoutput05">Redirecting output with &gt;<var>outputfile</var> makes GREP hang up!</a></li>
<li><a href="#R7.2-justsatthere06">I typed my GREP command and hit the Enter key, and it just sat there.</a></li>
<li><a href="#R7.2-subdirs07">I used the <kbd>-r</kbd> option, but GREP won&#8217;t scan files in subdirectories.</a></li>
</ul></li>
</ul></li>
<li><a href="#R8-Future">8. Wish List</a></li>
<li class="nonprint"><a href="#WhatsNew">What&#8217;s New in This Manual</a></li>
</ul>
</div>



<div class="nonprint">
<h2 id="WhatsNew">What&#8217;s New in This Manual</h2>

<p class="brk"><strong class="key">7 Feb 2016</strong>:</p><ul>
<li>This manual is now on the Web, not just available in the 
<a href="grep.htm#download">download file</a>.</li>
<li>Explain how to
<a href="#R5.1.2-EnvvarSetting">set an environment variable</a>.</li>
<li>Update Windows compatibility information, and remove mentions of
DOS.</li>
<li>Change &#8220;Future Directions&#8221; to <a href="#R8-Future">Wish
List</a>.</li>
</ul></div>



</body></html>
